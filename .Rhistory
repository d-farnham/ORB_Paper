aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_CPC_by_season_year,
aes(x = RIP, y=..count..),
geom = "step", size = line.width,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_by_season_year,
aes(x = RIP, y =..count../5),
geom = "step", linetype = "twodash", size = line.width,
breaks = bin_breaks, col = "red") +
annotate("text", label = c("b)"), x = 0.75, y = 38.75, size = 6, colour = "black") +
xlab("# RIP") +
coord_cartesian(xlim = c(0.5,11.6), ylim = c(0,40)) +
scale_x_continuous(breaks = bin_breaks,
labels = bin_labels) +
theme_bw()
RIP_mod_obs_compare_4 =
ggplot() +
stat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 1,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 2,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 3,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 4,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 5,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_CPC_by_season_year,
aes(x = RIP, y=..count..),
geom = "step", size = line.width,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_CPC_thresh_by_season_year,
aes(x = RIP, y =..count../5),
geom = "step", linetype = "twodash", size = line.width,
breaks = bin_breaks, col = "red") +
annotate("text", label = c("d)"), x = 0.75, y = 38.75, size = 6, colour = "black") +
xlab("# RIP") +
coord_cartesian(xlim = c(0.5,11.6), ylim = c(0,40)) +
scale_x_continuous(breaks = bin_breaks,
labels = bin_labels) +
theme_bw()
pdf('Final figures/Figure_3.pdf', width = 11, height = 5.5)
grid.arrange(RIP_mod_obs_compare_1,
RIP_mod_obs_compare_2,
RIP_mod_obs_compare_3,
RIP_mod_obs_compare_4,
nrow = 2,
layout_matrix = rbind(c(1,3),c(2,4)))
dev.off()
# calculate the Mann kendall trend for MAM for each of the observations/simulations
library(Kendall)
obs_trend =  RIP_CPC_by_season_year %>% dplyr::group_by(season) %>%
dplyr::summarise(tau = as.numeric(MannKendall(RIP)["tau"]),
p.value = as.numeric(MannKendall(RIP)["sl"]))
mod_trend =  RIP_mod_by_season_year %>% dplyr::group_by(season,model) %>%
dplyr::summarise(tau = as.numeric(MannKendall(RIP)["tau"]),
p.value = as.numeric(MannKendall(RIP)["sl"]))
mod_ens_trend =  RIP_mod_by_season_year %>% dplyr::group_by(season,model) %>%
dplyr::summarise(tau = as.numeric(MannKendall(RIP_ensemble_mean)["tau"]),
p.value = as.numeric(MannKendall(RIP_ensemble_mean)["sl"]))
########################################
############### Figure 4 ###############
########################################
# first define new variables of lagged RIPs
RIP_lag_obs = CPC_mod_cell_RIP %>% dplyr::filter(season == "MAM") %>%
dplyr::mutate(RIP_lag1 = lag(RIP, 1),
RIP_lag4  = lag(RIP, 4),
RIP_lag5  = lag(RIP, 5),
RIP_lag6  = lag(RIP, 6),
RIP_lag7  = lag(RIP, 7))
# need to remove the first 7 days from each year (b/c we cannot check the lagged days associated with those days in the simulation round)
RIP_lag_obs = RIP_lag_obs %>% dplyr::filter(!(lubridate::month(date) == 3 & lubridate::day(date) %in% 1:7))
RIP_lag_obs$RIP_lag_4_7 = apply(RIP_lag_obs[, c("RIP_lag4","RIP_lag5", "RIP_lag6", "RIP_lag7")], 1, max)
RIP_lag_obs = RIP_lag_obs %>% dplyr::select(c(date, RIP, season , RIP_lag1, RIP_lag_4_7))
RIP_lag_mod = mod_RIP %>% dplyr::filter(season == "MAM") %>%
dplyr::group_by(model) %>%
dplyr::mutate(RIP_lag1 = lag(RIP, 1),
RIP_lag4  = lag(RIP, 4),
RIP_lag5  = lag(RIP, 5),
RIP_lag6  = lag(RIP, 6),
RIP_lag7  = lag(RIP, 7))
# need to remove the first 7 days from each year (b/c we cannot check the lagged days associated with those days in the simulation round)
RIP_lag_mod = RIP_lag_mod %>% dplyr::filter(!(lubridate::month(date) == 3 & lubridate::day(date) %in% 1:7))
RIP_lag_mod$RIP_lag_4_7 = apply(RIP_lag_mod[, c("RIP_lag4","RIP_lag5", "RIP_lag6", "RIP_lag7")], 1, max)
RIP_lag_mod = RIP_lag_mod %>% dplyr::select(c(date, RIP, season, model, RIP_lag1, RIP_lag_4_7))
RIP_lag_obs_long = melt(RIP_lag_obs, id.vars = c("date", "season", "RIP"))
RIP_lag_mod_long = melt(RIP_lag_mod, id.vars = c("date", "season", "model", "RIP"))
RIP_cond_prob_obs = data.frame(lag = unique(RIP_lag_mod_long$variable),
obs = NA)
RIP_cond_prob_mod = data.frame(lag = unique(RIP_lag_mod_long$variable),
mod1 = NA,
mod2 = NA,
mod3 = NA,
mod4 = NA,
mod5 = NA)
RIP_lag_names = unique(RIP_lag_mod_long$variable)
for(llag in 1:2){
con_ting_table = table(RIP_lag_obs_long$RIP[RIP_lag_obs_long$variable == RIP_lag_names[llag]],
RIP_lag_obs_long$value[RIP_lag_obs_long$variable == RIP_lag_names[llag]],
deparse.level = 2)
RIP_cond_prob_obs$obs[llag] = con_ting_table[4]/(con_ting_table[3] + con_ting_table[4])
for(mmod in 1:5){
con_ting_table = table(RIP_lag_mod_long$RIP[RIP_lag_mod_long$model == mmod &
RIP_lag_mod_long$variable == RIP_lag_names[llag]],
RIP_lag_mod_long$value[RIP_lag_mod_long$model == mmod &
RIP_lag_mod_long$variable == RIP_lag_names[llag]],
deparse.level = 2)
RIP_cond_prob_mod[llag,mmod+1] = con_ting_table[4]/(con_ting_table[3] + con_ting_table[4])
}
}
head(RIP_cond_prob_mod)
RIP_cond_prob_long = melt(RIP_cond_prob_mod, id.vars = c("lag"), variable.name = "model")
RIP_cond_prob_long
RIP_cond_prob_obs
RIP_cond_prob_obs
RIP_cond_prob_obs_long = data.frame(model = "obs",
lag = RIP_cond_prob_obs$lag,
value = RIP_cond_prob_obs$obs)
RIP_cond_prob_obs_long
RIP_cond_prob_mod_long = melt(RIP_cond_prob_mod, id.vars = c("lag"), variable.name = "model")
RIP_cond_prob_mod_long = melt(RIP_cond_prob_mod, id.vars = c("lag"), variable.name = "model")
RIP_cond_prob_mod_obs_long = rbind(RIP_cond_prob_mod_long,RIP_cond_prob_obs_long)
RIP_cond_prob_mod_obs_long
CPC_marg_probs =
RIP_lag_obs_long %>% dplyr::group_by(season) %>%
dplyr::summarise(value = sum(RIP[!is.na(RIP)], na.rm = TRUE)/length(RIP[!is.na(RIP)])) %>%
dplyr::mutate(variable = "obs",
lag = "marg_prob") %>%
dplyr::filter(season %in% c("MAM")) %>%
data.frame()
mod_marg_probs =
RIP_lag_mod_long %>% dplyr::group_by(season, model) %>%
dplyr::summarise(value = sum(RIP[!is.na(RIP)], na.rm = TRUE)/length(RIP[!is.na(RIP)])) %>%
dplyr::mutate(variable = paste0("mod",model),
lag = "marg_prob") %>%
dplyr::filter(season %in% c("MAM")) %>%
dplyr::select(-model) %>%
data.frame()
marg_probs = rbind(mod_marg_probs, CPC_marg_probs)
marg_probs_wide = reshape2::dcast(variable ~ lag, data = marg_probs, value.var	="value")
RIP_mod_CPC_cond_marg_prob_long = merge(RIP_cond_prob_long[RIP_cond_prob_long$season == "MAM", ],
marg_probs_wide, by = "variable") %>%
dplyr::mutate(cond_div_marg = value/ marg_prob)
head(RIP_cond_prob_mod_obs_long)
RIP_mod_CPC_cond_marg_prob_long = merge(RIP_cond_prob_mod_obs_long,
marg_probs_wide, by = "variable") %>%
dplyr::mutate(cond_div_marg = value/ marg_prob)
head(marg_probs_wide)
marg_probs_wide = reshape2::dcast(variable ~ lag, data = marg_probs, value.var	="value", variable.name = "model")
head(marg_probs_wide)
marg_probs_wide = reshape2::dcast(variable ~ lag, data = marg_probs, value.va	= "value", variable.name = "model")
head(marg_probs_wide)
head(marg_probs)
RIP_cond_prob_mod_long = melt(RIP_cond_prob_mod, id.vars = c("lag"))
RIP_cond_prob_obs_long = data.frame(model = "obs",
lag = RIP_cond_prob_obs$lag,
value = RIP_cond_prob_obs$obs)
RIP_cond_prob_mod_obs_long = rbind(RIP_cond_prob_mod_long,RIP_cond_prob_obs_long)
CPC_marg_probs =
RIP_lag_obs_long %>% dplyr::group_by(season) %>%
dplyr::summarise(value = sum(RIP[!is.na(RIP)], na.rm = TRUE)/length(RIP[!is.na(RIP)])) %>%
dplyr::mutate(variable = "obs",
lag = "marg_prob") %>%
dplyr::filter(season %in% c("MAM")) %>%
data.frame()
mod_marg_probs =
RIP_lag_mod_long %>% dplyr::group_by(season, model) %>%
dplyr::summarise(value = sum(RIP[!is.na(RIP)], na.rm = TRUE)/length(RIP[!is.na(RIP)])) %>%
dplyr::mutate(variable = paste0("mod",model),
lag = "marg_prob") %>%
dplyr::filter(season %in% c("MAM")) %>%
dplyr::select(-model) %>%
data.frame()
marg_probs = rbind(mod_marg_probs, CPC_marg_probs)
marg_probs_wide = reshape2::dcast(variable ~ lag, data = marg_probs, value.va	= "value")
RIP_mod_CPC_cond_marg_prob_long = merge(RIP_cond_prob_mod_obs_long,
marg_probs_wide, by = "variable") %>%
dplyr::mutate(cond_div_marg = value/ marg_prob)
head(RIP_cond_prob_mod_obs_long)
RIP_cond_prob_obs_long = data.frame(model = "obs",
lag = RIP_cond_prob_obs$lag,
value = RIP_cond_prob_obs$obs)
RIP_cond_prob_mod_obs_long = rbind(RIP_cond_prob_mod_long,RIP_cond_prob_obs_long)
RIP_cond_prob_mod_long = melt(RIP_cond_prob_mod, id.vars = c("lag"))
head(RIP_cond_prob_mod_long)
head(RIP_cond_prob_obs_long)
RIP_cond_prob_mod_long = melt(RIP_cond_prob_mod, id.vars = c("lag"), variable.name = "model")
RIP_cond_prob_obs_long = data.frame(model = "obs",
lag = RIP_cond_prob_obs$lag,
value = RIP_cond_prob_obs$obs)
RIP_cond_prob_mod_obs_long = rbind(RIP_cond_prob_mod_long,RIP_cond_prob_obs_long)
head(RIP_cond_prob_mod_obs_long)
RIP_mod_CPC_cond_marg_prob_long = merge(RIP_cond_prob_mod_obs_long,
marg_probs_wide, by.x = "model", by.y = "variable") %>%
dplyr::mutate(cond_div_marg = value/ marg_prob)
RIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>% dplyr::mutate(lag_rename = ifelse(lag == "RIP_lag1", "1", "4-7"))
RIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>%  dplyr::mutate(model = ifelse(variable == "mod1", "GCM 1",
ifelse(variable == "mod2", "GCM 2",
ifelse(variable == "mod3", "GCM 3",
ifelse(variable == "mod4", "GCM 4",
ifelse(variable == "mod5", "GCM 5", "OBS"))))))
RIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>%  dplyr::mutate(model = ifelse(model == "mod1", "GCM 1",
ifelse(model == "mod2", "GCM 2",
ifelse(model == "mod3", "GCM 3",
ifelse(model == "mod4", "GCM 4",
ifelse(model == "mod5", "GCM 5", "OBS"))))))
RIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>%  dplyr::mutate(variable2 = ifelse(model == "OBS", "OBS", "GCM"))
ggplot() +
geom_boxplot(data = RIP_mod_CPC_cond_marg_prob_long,
aes(y = cond_div_marg, x = lag_rename, fill = variable2), width = 0.5, coef = 5) +
labs(x = "lag (days)", y = expression(P(RIP[t] ~"|" ~ RIP[t-lag])/P(RIP))) +
scale_fill_discrete(name = "GCM/OBS") +
scale_color_discrete(name = "GCM/OBS") +
geom_hline(yintercept = 1, linetype = "dashed") +
scale_y_continuous(limits = c(0,16)) +
theme_bw()
rm(list = ls())
source("R/GetSeasonDate.R")
load(file = 'Processed_Data/mod_RIP.RData')
load(file = 'Processed_Data/CPC_mod_cell_RIP.RData')
load(file = 'Processed_Data/mod_CPC_thresh_RIP.RData')
RIP_month_counts_mod = aggregate(date ~ month(date) + model, data = mod_RIP[mod_RIP$RIP == 1,], FUN = length)
colnames(RIP_month_counts_mod) = c("month", "model", "RIPs")
RIP_month_counts_mod$model = paste0("GCM ",RIP_month_counts_mod$model)
RIP_month_counts_obs = data.frame(aggregate(date ~ month(date), data = CPC_mod_cell_RIP[CPC_mod_cell_RIP$RIP == 1,], FUN = length),
model = "OBS")
colnames(RIP_month_counts_obs) = c("month", "RIPs", "model")
RIP_month_counts_obs = RIP_month_counts_obs[,c("month", "model", "RIPs")]
RIP_month_counts = rbind(RIP_month_counts_mod, RIP_month_counts_obs)
RIP_month_counts = RIP_month_counts %>% dplyr::group_by(model) %>%
dplyr::mutate(percent_RIPs = RIPs/sum(RIPs))
# figure S1
pdf('Final figures/Figure_S1.pdf', height = 4, width = 8)
ggplot(RIP_month_counts) +
geom_bar(aes(month, percent_RIPs*100), stat = "identity") +
facet_wrap(~model) +
labs(x = "month", y = "% of RIPs") +
scale_x_continuous(breaks = 1:12) +
theme_bw()
dev.off()
########################################
############### Figure 3 ###############
########################################
RIP_CPC_by_season_year = CPC_mod_cell_RIP %>% dplyr::filter(season == "MAM") %>%
dplyr::mutate(year = lubridate::year(date)) %>%
dplyr::group_by(season, year) %>%
dplyr::summarise(RIP = sum(RIP, na.rm = TRUE)) %>%
dplyr::group_by(season) %>%
dplyr::mutate(RIP_mean = mean(RIP, na.rm = TRUE))
RIP_mod_by_season_year = mod_RIP %>% dplyr::filter(season == "MAM") %>%
dplyr::mutate(year = lubridate::year(date)) %>%
dplyr::group_by(season, year, model) %>%
dplyr::summarise(RIP = sum(RIP, na.rm = TRUE)) %>%
dplyr::group_by(season, model) %>%
dplyr::mutate(RIP_mean = mean(RIP, na.rm = TRUE)) %>%
dplyr::group_by(season, year) %>%
dplyr::mutate(RIP_ensemble_mean = mean(RIP, na.rm = TRUE))
RIP_mod_CPC_thresh_by_season_year = mod_CPC_thresh_RIP %>% dplyr::filter(season == "MAM") %>%
dplyr::mutate(year = lubridate::year(date)) %>%
dplyr::group_by(season, year, model) %>%
dplyr::summarise(RIP = sum(RIP, na.rm = TRUE)) %>%
dplyr::group_by(season, model) %>%
dplyr::mutate(RIP_mean = mean(RIP, na.rm = TRUE)) %>%
dplyr::group_by(season, year) %>%
dplyr::mutate(RIP_ensemble_mean = mean(RIP, na.rm = TRUE))
source('R/ma.R')
smoothing_window = 10
RIP_CPC_by_season_year = RIP_CPC_by_season_year %>% dplyr::mutate(RIP_smooth = ma(RIP, smoothing_window))
RIP_mod_by_season_year = RIP_mod_by_season_year %>% dplyr::group_by(model,season) %>%
dplyr::mutate(RIP_smooth = ma(RIP, smoothing_window),
RIP_ensemble_mean_smooth = ma(RIP_ensemble_mean, smoothing_window))
RIP_mod_CPC_thresh_by_season_year = RIP_mod_CPC_thresh_by_season_year %>% dplyr::group_by(model,season) %>%
dplyr::mutate(RIP_smooth = ma(RIP, smoothing_window),
RIP_ensemble_mean_smooth = ma(RIP_ensemble_mean, smoothing_window))
line.width = 1
alpha.line = 1
RIP_mod_obs_compare_1 =
ggplot() +
geom_line(data = RIP_mod_by_season_year,
aes(year, y = RIP_smooth, group = factor(model)),
linetype = "dashed", size = line.width/2, alpha = alpha.line) +
geom_line(data = RIP_mod_by_season_year,
aes(year, y = RIP_ensemble_mean_smooth), col = "red",
linetype = "dashed", size = line.width) +
geom_line(data = RIP_CPC_by_season_year,
aes(year, y = RIP_smooth),
size = line.width) +
ylab("# RIP") +
coord_cartesian(xlim = c(1955,2006),
ylim = c(0,5.5)) +
xlab("Year") +
annotate("text", label = c("a)"), x = 1956, y = 5.3, size = 6, colour = "black") +
theme_bw()
RIP_mod_obs_compare_2 =
ggplot() +
geom_line(data = RIP_mod_CPC_thresh_by_season_year,
aes(year, y = RIP_smooth, group = factor(model)),
linetype = "dashed", size = line.width/2, alpha = alpha.line) +
geom_line(data = RIP_mod_CPC_thresh_by_season_year,
aes(year, y = RIP_ensemble_mean_smooth), col = "red",
linetype = "dashed", size = line.width) +
geom_line(data = RIP_CPC_by_season_year,
aes(year, y = RIP_smooth),
size = line.width) +
ylab("# RIP") +
coord_cartesian(xlim = c(1955,2006),
ylim = c(0,5.5)) +
xlab("Year") +
annotate("text", label = c("c)"), x = 1956, y = 5.3, size = 6, colour = "black") +
theme_bw()
bin_breaks = seq(-0.5,12.5,1)
bin_labels = as.character(bin_breaks-0.5)
RIP_mod_obs_compare_3 =
ggplot() +
stat_bin(data = RIP_mod_by_season_year[RIP_mod_by_season_year$model == 1,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_by_season_year[RIP_mod_by_season_year$model == 2,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_by_season_year[RIP_mod_by_season_year$model == 3,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_by_season_year[RIP_mod_by_season_year$model == 4,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_by_season_year[RIP_mod_by_season_year$model == 5,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_CPC_by_season_year,
aes(x = RIP, y=..count..),
geom = "step", size = line.width,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_by_season_year,
aes(x = RIP, y =..count../5),
geom = "step", linetype = "twodash", size = line.width,
breaks = bin_breaks, col = "red") +
annotate("text", label = c("b)"), x = 0.75, y = 38.75, size = 6, colour = "black") +
xlab("# RIP") +
coord_cartesian(xlim = c(0.5,11.6), ylim = c(0,40)) +
scale_x_continuous(breaks = bin_breaks,
labels = bin_labels) +
theme_bw()
RIP_mod_obs_compare_4 =
ggplot() +
stat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 1,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 2,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 3,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 4,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 5,],
aes(x = RIP, y =..count..), alpha = alpha.line,
geom = "step", linetype = "dashed", size = line.width/2,
breaks = bin_breaks) +
stat_bin(data = RIP_CPC_by_season_year,
aes(x = RIP, y=..count..),
geom = "step", size = line.width,
breaks = bin_breaks) +
stat_bin(data = RIP_mod_CPC_thresh_by_season_year,
aes(x = RIP, y =..count../5),
geom = "step", linetype = "twodash", size = line.width,
breaks = bin_breaks, col = "red") +
annotate("text", label = c("d)"), x = 0.75, y = 38.75, size = 6, colour = "black") +
xlab("# RIP") +
coord_cartesian(xlim = c(0.5,11.6), ylim = c(0,40)) +
scale_x_continuous(breaks = bin_breaks,
labels = bin_labels) +
theme_bw()
pdf('Final figures/Figure_3.pdf', width = 11, height = 5.5)
grid.arrange(RIP_mod_obs_compare_1,
RIP_mod_obs_compare_2,
RIP_mod_obs_compare_3,
RIP_mod_obs_compare_4,
nrow = 2,
layout_matrix = rbind(c(1,3),c(2,4)))
dev.off()
# calculate the Mann kendall trend for MAM for each of the observations/simulations
library(Kendall)
obs_trend =  RIP_CPC_by_season_year %>% dplyr::group_by(season) %>%
dplyr::summarise(tau = as.numeric(MannKendall(RIP)["tau"]),
p.value = as.numeric(MannKendall(RIP)["sl"]))
mod_trend =  RIP_mod_by_season_year %>% dplyr::group_by(season,model) %>%
dplyr::summarise(tau = as.numeric(MannKendall(RIP)["tau"]),
p.value = as.numeric(MannKendall(RIP)["sl"]))
mod_ens_trend =  RIP_mod_by_season_year %>% dplyr::group_by(season,model) %>%
dplyr::summarise(tau = as.numeric(MannKendall(RIP_ensemble_mean)["tau"]),
p.value = as.numeric(MannKendall(RIP_ensemble_mean)["sl"]))
########################################
############### Figure 4 ###############
########################################
# first define new variables of lagged RIPs
RIP_lag_obs = CPC_mod_cell_RIP %>% dplyr::filter(season == "MAM") %>%
dplyr::mutate(RIP_lag1 = lag(RIP, 1),
RIP_lag4  = lag(RIP, 4),
RIP_lag5  = lag(RIP, 5),
RIP_lag6  = lag(RIP, 6),
RIP_lag7  = lag(RIP, 7))
# need to remove the first 7 days from each year (b/c we cannot check the lagged days associated with those days in the simulation round)
RIP_lag_obs = RIP_lag_obs %>% dplyr::filter(!(lubridate::month(date) == 3 & lubridate::day(date) %in% 1:7))
RIP_lag_obs$RIP_lag_4_7 = apply(RIP_lag_obs[, c("RIP_lag4","RIP_lag5", "RIP_lag6", "RIP_lag7")], 1, max)
RIP_lag_obs = RIP_lag_obs %>% dplyr::select(c(date, RIP, season , RIP_lag1, RIP_lag_4_7))
RIP_lag_mod = mod_RIP %>% dplyr::filter(season == "MAM") %>%
dplyr::group_by(model) %>%
dplyr::mutate(RIP_lag1 = lag(RIP, 1),
RIP_lag4  = lag(RIP, 4),
RIP_lag5  = lag(RIP, 5),
RIP_lag6  = lag(RIP, 6),
RIP_lag7  = lag(RIP, 7))
# need to remove the first 7 days from each year (b/c we cannot check the lagged days associated with those days in the simulation round)
RIP_lag_mod = RIP_lag_mod %>% dplyr::filter(!(lubridate::month(date) == 3 & lubridate::day(date) %in% 1:7))
RIP_lag_mod$RIP_lag_4_7 = apply(RIP_lag_mod[, c("RIP_lag4","RIP_lag5", "RIP_lag6", "RIP_lag7")], 1, max)
RIP_lag_mod = RIP_lag_mod %>% dplyr::select(c(date, RIP, season, model, RIP_lag1, RIP_lag_4_7))
RIP_lag_obs_long = melt(RIP_lag_obs, id.vars = c("date", "season", "RIP"))
RIP_lag_mod_long = melt(RIP_lag_mod, id.vars = c("date", "season", "model", "RIP"))
# initialize a blank data.frame to store the conditional probs
RIP_cond_prob_obs = data.frame(lag = unique(RIP_lag_mod_long$variable),
obs = NA)
RIP_cond_prob_mod = data.frame(lag = unique(RIP_lag_mod_long$variable),
mod1 = NA,
mod2 = NA,
mod3 = NA,
mod4 = NA,
mod5 = NA)
RIP_lag_names = unique(RIP_lag_mod_long$variable)
for(llag in 1:2){
con_ting_table = table(RIP_lag_obs_long$RIP[RIP_lag_obs_long$variable == RIP_lag_names[llag]],
RIP_lag_obs_long$value[RIP_lag_obs_long$variable == RIP_lag_names[llag]],
deparse.level = 2)
RIP_cond_prob_obs$obs[llag] = con_ting_table[4]/(con_ting_table[3] + con_ting_table[4])
for(mmod in 1:5){
con_ting_table = table(RIP_lag_mod_long$RIP[RIP_lag_mod_long$model == mmod &
RIP_lag_mod_long$variable == RIP_lag_names[llag]],
RIP_lag_mod_long$value[RIP_lag_mod_long$model == mmod &
RIP_lag_mod_long$variable == RIP_lag_names[llag]],
deparse.level = 2)
RIP_cond_prob_mod[llag,mmod+1] = con_ting_table[4]/(con_ting_table[3] + con_ting_table[4])
}
}
# RIP_mod_CPC_cond_prob$ensemble_mean = apply(RIP_mod_CPC_cond_prob[,4:8], 1, mean)
RIP_cond_prob_mod_long = melt(RIP_cond_prob_mod, id.vars = c("lag"), variable.name = "model")
# add the observations to this
RIP_cond_prob_obs_long = data.frame(model = "obs",
lag = RIP_cond_prob_obs$lag,
value = RIP_cond_prob_obs$obs)
RIP_cond_prob_mod_obs_long = rbind(RIP_cond_prob_mod_long,RIP_cond_prob_obs_long)
CPC_marg_probs =
RIP_lag_obs_long %>% dplyr::group_by(season) %>%
dplyr::summarise(value = sum(RIP[!is.na(RIP)], na.rm = TRUE)/length(RIP[!is.na(RIP)])) %>%
dplyr::mutate(variable = "obs",
lag = "marg_prob") %>%
dplyr::filter(season %in% c("MAM")) %>%
data.frame()
mod_marg_probs =
RIP_lag_mod_long %>% dplyr::group_by(season, model) %>%
dplyr::summarise(value = sum(RIP[!is.na(RIP)], na.rm = TRUE)/length(RIP[!is.na(RIP)])) %>%
dplyr::mutate(variable = paste0("mod",model),
lag = "marg_prob") %>%
dplyr::filter(season %in% c("MAM")) %>%
dplyr::select(-model) %>%
data.frame()
marg_probs = rbind(mod_marg_probs, CPC_marg_probs)
marg_probs_wide = reshape2::dcast(variable ~ lag, data = marg_probs, value.va	= "value")
RIP_mod_CPC_cond_marg_prob_long = merge(RIP_cond_prob_mod_obs_long,
marg_probs_wide, by.x = "model", by.y = "variable") %>%
dplyr::mutate(cond_div_marg = value/ marg_prob)
# rename the lag
RIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>% dplyr::mutate(lag_rename = ifelse(lag == "RIP_lag1", "1", "4-7"))
RIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>%  dplyr::mutate(model = ifelse(model == "mod1", "GCM 1",
ifelse(model == "mod2", "GCM 2",
ifelse(model == "mod3", "GCM 3",
ifelse(model == "mod4", "GCM 4",
ifelse(model == "mod5", "GCM 5", "OBS"))))))
RIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>%  dplyr::mutate(variable2 = ifelse(model == "OBS", "OBS", "GCM"))
pdf("Final figures/Figure_4.pdf", width = 5, height = 3)
ggplot() +
geom_boxplot(data = RIP_mod_CPC_cond_marg_prob_long,
aes(y = cond_div_marg, x = lag_rename, fill = variable2), width = 0.5, coef = 5) +
labs(x = "lag (days)", y = expression(P(RIP[t] ~"|" ~ RIP[t-lag])/P(RIP))) +
scale_fill_discrete(name = "GCM/OBS") +
scale_color_discrete(name = "GCM/OBS") +
geom_hline(yintercept = 1, linetype = "dashed") +
scale_y_continuous(limits = c(0,16)) +
theme_bw()
dev.off()
