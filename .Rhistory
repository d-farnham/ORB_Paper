RIP_EWD_MHC_long = melt(RIP_EWD_MHC, id.vars = c("season", "date", "RIP", "EWD_mean", "MHC_anom_mean")) %>%
dplyr::filter(RIP == 1)
source("R/SubstrRightLeft.R")
RIP_EWD_MHC_time = RIP_EWD_MHC_time %>% dplyr::mutate(lag = as.numeric(substrRight(as.character(variable),2)),
var = substrLeft(as.character(variable),3))
RIP_EWD_MHC_time = RIP_EWD_MHC_long %>% dplyr::group_by(season, variable) %>%
dplyr::summarise(median = median(value, na.rm = TRUE),
`5th` = quantile(value, probs = 0.05, na.rm = TRUE),
top_95th = quantile(value, probs = 0.95, na.rm = TRUE),
bot_25th = quantile(value, probs = 0.25, na.rm = TRUE),
top_75th = quantile(value, probs = 0.75, na.rm = TRUE),
EWD_mean = mean(EWD_mean),
MHC_anom_mean = mean(MHC_anom_mean))
RIP_EWD_MHC_time = RIP_EWD_MHC_long %>% dplyr::group_by(season, variable) %>%
dplyr::summarise(median = median(value, na.rm = TRUE),
`5th` = quantile(value, probs = 0.05, na.rm = TRUE),
`95th` = quantile(value, probs = 0.95, na.rm = TRUE),
`25th` = quantile(value, probs = 0.25, na.rm = TRUE),
`75th` = quantile(value, probs = 0.75, na.rm = TRUE),
EWD_mean = mean(EWD_mean),
MHC_anom_mean = mean(MHC_anom_mean))
source("R/SubstrRightLeft.R")
RIP_EWD_MHC_time = RIP_EWD_MHC_time %>% dplyr::mutate(lag = as.numeric(substrRight(as.character(variable),2)),
var = substrLeft(as.character(variable),3))
EWD_time =
ggplot(RIP_EWD_MHC_time[RIP_EWD_MHC_time$season == "MAM" &
RIP_EWD_MHC_time$var == "EWD"	, ]) +
geom_ribbon(aes(x = lag, y = median, ymax = `25th`, ymin = `25th`), alpha = 0.5) +
geom_ribbon(aes(x = lag, y = median, ymax = `95th`, ymin = `5th`), alpha = 0.5) +
geom_line(aes(x = lag, y = median)) +
geom_hline(aes(yintercept = EWD_mean), linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
ylab("EWD Index") +
xlab("Days after RIP event") +
scale_x_continuous(breaks = c(seq(-5,3,by=1))) +
theme_bw()
MHC_anom_time =
ggplot(RIP_EWD_MHC_time[RIP_EWD_MHC_time$season == "MAM" &
RIP_EWD_MHC_time$var == "MHC_anom"	, ]) +
geom_ribbon(aes(x = lag, y = median, ymax = `25th`, ymin = `25th`), alpha = 0.5) +
geom_ribbon(aes(x = lag, y = median, ymax = `95th`, ymin = `5th`), alpha = 0.5) +
geom_line(aes(x = lag, y = median)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
ylab("MHC Index") +
xlab("Days after RIP event") +
scale_x_continuous(breaks = c(seq(-5,3,by=1))) +
theme_bw()
load(file = 'Processed_Data/EWD_boxes.RData')
load(file = 'Processed_Data/MHC_box.RData')
world <- data.frame(map("world", plot=FALSE)[c("x","y")])
state <- data.frame(map("state", plot=FALSE)[c("x","y")])
source("R/load_basin_boundary.R")
EWD_MHC_location =
ggplot() +
geom_rect(data = EWD_boxes,
aes(xmin=lon.min, xmax=lon.max, ymin=lat.min, ymax=lat.max, color = factor(box), fill = factor(box)),
alpha=0.5) +
geom_rect(data = MHC_box,
aes(xmin=lon.min-360, xmax=lon.max-360, ymin=lat.min, ymax=lat.max),
alpha=0.5) +
geom_path(data=state, aes(x,y,z=NULL), size = 0.25) +
geom_path(data=world, aes(x,y,z=NULL), size = 0.25) +
scale_y_continuous(limits = c(20,55)) +
xlab("lon") +
ylab("lat") +
scale_x_continuous(limits = c(-122,-58)) +
theme_bw() +
coord_map("ortho", orientation=c(40, -90, 0)) +
geom_polygon(aes(x = long, y = lat, group = group), alpha = 0.25, data = basin_points) +
theme(legend.position="none") +
labs(x = "Longitude", y = "Latitude")
grid.arrange(EWD_MHC_location,
EWD_time,
MHC_anom_time,
ncol = 3)
EWD_time =
ggplot(RIP_EWD_MHC_time[RIP_EWD_MHC_time$season == "MAM" &
RIP_EWD_MHC_time$var == "EWD"	, ]) +
geom_ribbon(aes(x = lag, y = median, ymax = `75th`, ymin = `25th`), alpha = 0.5) +
geom_ribbon(aes(x = lag, y = median, ymax = `95th`, ymin = `5th`), alpha = 0.5) +
geom_line(aes(x = lag, y = median)) +
geom_hline(aes(yintercept = EWD_mean), linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
ylab("EWD Index") +
xlab("Days after RIP event") +
scale_x_continuous(breaks = c(seq(-5,3,by=1))) +
theme_bw()
MHC_anom_time =
ggplot(RIP_EWD_MHC_time[RIP_EWD_MHC_time$season == "MAM" &
RIP_EWD_MHC_time$var == "MHC_anom"	, ]) +
geom_ribbon(aes(x = lag, y = median, ymax = `75th`, ymin = `25th`), alpha = 0.5) +
geom_ribbon(aes(x = lag, y = median, ymax = `95th`, ymin = `5th`), alpha = 0.5) +
geom_line(aes(x = lag, y = median)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
ylab("MHC Index") +
xlab("Days after RIP event") +
scale_x_continuous(breaks = c(seq(-5,3,by=1))) +
theme_bw()
load(file = 'Processed_Data/EWD_boxes.RData')
load(file = 'Processed_Data/MHC_box.RData')
world <- data.frame(map("world", plot=FALSE)[c("x","y")])
state <- data.frame(map("state", plot=FALSE)[c("x","y")])
source("R/load_basin_boundary.R")
EWD_MHC_location =
ggplot() +
geom_rect(data = EWD_boxes,
aes(xmin=lon.min, xmax=lon.max, ymin=lat.min, ymax=lat.max, color = factor(box), fill = factor(box)),
alpha=0.5) +
geom_rect(data = MHC_box,
aes(xmin=lon.min-360, xmax=lon.max-360, ymin=lat.min, ymax=lat.max),
alpha=0.5) +
geom_path(data=state, aes(x,y,z=NULL), size = 0.25) +
geom_path(data=world, aes(x,y,z=NULL), size = 0.25) +
scale_y_continuous(limits = c(20,55)) +
xlab("lon") +
ylab("lat") +
scale_x_continuous(limits = c(-122,-58)) +
theme_bw() +
coord_map("ortho", orientation=c(40, -90, 0)) +
geom_polygon(aes(x = long, y = lat, group = group), alpha = 0.25, data = basin_points) +
theme(legend.position="none") +
labs(x = "Longitude", y = "Latitude")
grid.arrange(EWD_MHC_location,
EWD_time,
MHC_anom_time,
ncol = 3)
rm(list = ls())
load(file = 'Processed_Data/CPC_mod_cell_RIP.RData')
load(file = 'Processed_Data/EWD.RData')
load(file = 'Processed_Data/MHC.RData')
RIP_EWD_MHC_obs = merge(merge(CPC_mod_cell_RIP,EWD, by = c("date","season")),MHC,by = c("date","season")) %>%
dplyr::select(c(date, season, RIP, EWD, MHC_anom)) %>%
dplyr::mutate(model = "OBS")
load(file = 'Processed_Data/mod_RIP.RData')
load(file = 'Processed_Data/EWD_mod.RData')
load(file = 'Processed_Data/MHC_mod.RData')
RIP_EWD_MHC_mod = merge(merge(mod_RIP,EWD_mod, by = c("date","season","model")),MHC_mod,by = c("date","season","model")) %>%
dplyr::select(c(date, season, model, RIP, EWD, MHC_anom))
RIP_EWD_MHC_all = rbind(RIP_EWD_MHC_obs, RIP_EWD_MHC_mod)
RIP_EWD_MHC_all = RIP_EWD_MHC_all %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0))
cors = RIP_EWD_MHC_all %>% dplyr::group_by(season,model) %>%
dplyr::summarise(pearson = cor(EWD, MHC_anom, use = "complete.obs", method = "pearson"),
spearman = cor(EWD, MHC_anom, use = "complete.obs", method = "spearman"),
pearson_lag = cor(EWD, lag(MHC_anom,1), use = "complete.obs", method = "pearson"),
spearman_lag = cor(EWD, lag(MHC_anom,1), use = "complete.obs", method = "spearman"))
cors[cors$season %in% c("MAM"),]
tail_dependence_data = data.frame(date = RIP_EWD_MHC_all$date,
season = RIP_EWD_MHC_all$season,
model = RIP_EWD_MHC_all$model,
EWD = RIP_EWD_MHC_all$EWD,
MHC_anom = RIP_EWD_MHC_all$MHC_anom)
head(tail_dependence_data)
tdc.EWD = tdc.MHC = list()
for(llag in 1:lag.max){
tdc.EWD[[llag]] = data.frame(model = unique(tail_dependence_data$model),
P_0.9 = NA,
P_0.95 = NA,
P_0.99 = NA)
tdc.MHC[[llag]] = data.frame(model = unique(tail_dependence_data$model),
P_0.9 = NA,
P_0.95 = NA,
P_0.99 = NA)
}
source('R/tdc.R')
lag.max = 10
tdc.EWD = tdc.MHC = list()
for(llag in 1:lag.max){
tdc.EWD[[llag]] = data.frame(model = unique(tail_dependence_data$model),
P_0.9 = NA,
P_0.95 = NA,
P_0.99 = NA)
tdc.MHC[[llag]] = data.frame(model = unique(tail_dependence_data$model),
P_0.9 = NA,
P_0.95 = NA,
P_0.99 = NA)
}
for(llag in 1:lag.max){
tmp = tail_dependence_data %>% dplyr::group_by(model) %>%
dplyr::mutate(EWD_lag = lag(EWD, llag),
MHC_anom_lag = lag(MHC_anom, llag))%>%
dplyr::filter(season == "MAM")
for(mmodel in 1:length(unique(tmp$model))){
for(pper in 1:(ncol(tdc.EWD[[llag]])-1)){
tdc.EWD[[llag]][mmodel,pper+1] = tdc(tmp$EWD[tmp$model == unique(tmp$model)[mmodel]],
tmp$EWD_lag[tmp$model == unique(tmp$model)[mmodel]],
p = as.numeric(strsplit(names(tdc.EWD[[llag]])[pper+1], "_")[[1]][2]),
upper = TRUE)
tdc.MHC[[llag]][mmodel,pper+1] = tdc(tmp$MHC_anom[tmp$model == unique(tmp$model)[mmodel]],
tmp$MHC_anom_lag[tmp$model == unique(tmp$model)[mmodel]],
p = as.numeric(strsplit(names(tdc.MHC[[llag]])[pper+1], "_")[[1]][2]),
upper = TRUE)
}
}
}
tdc.EWD_long = melt(tdc.EWD)
head(tdc.EWD)
tdc.EWD_long
tdc.EWD_long = melt(tdc.EWD)
colnames(tdc.EWD_long)[4] = "lag"
tdc.EWD_long$variable = gsub("_", " = ", as.character(tdc.EWD_long$variable))
head(tdc.EWD_long)
tail(tdc.EWD_long)
tdc.EWD_long = melt(tdc.EWD) %>% setnames(L1,lag)
head(tdc.EWD_long)
tdc.EWD_long = melt(tdc.EWD) %>% setnames(L1,"lag")
tdc.EWD_long = melt(tdc.EWD) %>% setnames("L1","lag")
head(tdc.EWD_long)
tdc.MHC_long = melt(tdc.MHC) %>% setnames("L1","lag") %>%
dplyr::mutate(variable = gsub("_", " = ", as.character(variable)))
head(tdc.MHC_long)
?setnames
tdc.EWD_long = melt(tdc.EWD) %>% setnames("L1","lag") %>%
dplyr::mutate(variable = gsub("_", " = ", as.character(variable)))
EWD_tail_persist =
ggplot() +
geom_line(data = tdc.EWD_long[tdc.EWD_long$model != "OBS",],
aes(lag, value*100, group = model), linetype = "dashed") +
geom_line(data = tdc.EWD_long[tdc.EWD_long$model == "OBS",],
aes(lag, value*100)) +
facet_wrap(~variable) +
theme_bw() +
scale_x_continuous(breaks = c(1:10)) +
labs(y = expression(Pr(F(EWD[t])~ ">" ~ P ~ "|" ~ F(EWD[t-lag]) ~ ">" ~ P)))
tdc.MHC_long = melt(tdc.MHC) %>% setnames("L1","lag") %>%
dplyr::mutate(variable = gsub("_", " = ", as.character(variable)))
MHC_tail_persist =
ggplot() +
geom_line(data = tdc.MHC_long[tdc.MHC_long$model != "OBS",],
aes(lag, value*100, group = model), linetype = "dashed") +
geom_line(data = tdc.MHC_long[tdc.MHC_long$model == "OBS",],
aes(lag, value*100)) +
facet_wrap(~variable) +
theme_bw() +
scale_x_continuous(breaks = c(1:10)) +
labs(y = expression(Pr(F(MHC[t])~ ">" ~ P ~ "|" ~ F(MHC[t-lag]) ~ ">" ~ P)))
grid.arrange(EWD_tail_persist,
MHC_tail_persist,
nrow = 2)
bins_low_count0 = RIP_EWD_MHC_all %>% dplyr::mutate(MHC_anom = grid.size.MHC_anom*round(MHC_anom/(grid.size.MHC_anom)),
EWD = grid.size.EWD*(round(EWD/grid.size.EWD))) %>%
dplyr::group_by(model, season, MHC_anom, EWD) %>%
dplyr::summarise(count = length(RIP))
rm(list = ls())
load(file = 'Processed_Data/RIP_EWD_MHC_all.RData')
RIP_EWD_MHC_all = RIP_EWD_MHC_all %>% dplyr::mutate(model = ifelse(model != "OBS", paste0("GCM ", model), model))
alpha = 1
locfit_fits_MAM = list()
for(mm in 1:length(unique(RIP_EWD_MHC_all$model))){
mmodel = unique(RIP_EWD_MHC_all$model)[mm]
locfit_data = RIP_EWD_MHC_all %>% dplyr::filter(model == mmodel &
season == "MAM")
locfit_fits_MAM[[mm]] <- locfit(RIP ~ EWD + MHC_anom,
data = locfit_data,
family="binomial",
alpha = alpha)
}
names(locfit_fits_MAM) = unique(RIP_EWD_MHC_all$model)
locfit_data = RIP_EWD_MHC_all %>% dplyr::filter(model != "OBS" &
season == "MAM")
locfit_fits_ens_MAM <- locfit(RIP ~ EWD + MHC_anom,
data = locfit_data,
family="binomial",
alpha = alpha)
grid.size.MHC_anom = 0.75
grid.size.EWD = 30
reg_grid_MAM =
expand.grid(MHC_anom = seq(-9,9, by = grid.size.MHC_anom),
EWD = seq(-300,300, by = grid.size.EWD))
bins_low_count0 = RIP_EWD_MHC_all %>% dplyr::mutate(MHC_anom = grid.size.MHC_anom*round(MHC_anom/(grid.size.MHC_anom)),
EWD = grid.size.EWD*(round(EWD/grid.size.EWD))) %>%
dplyr::group_by(model, season, MHC_anom, EWD) %>%
dplyr::summarise(count = length(RIP))
all_bins = data.frame(expand.grid(MHC_anom = unique(reg_grid_MAM$MHC_anom),
EWD = unique(reg_grid_MAM$EWD),
model = unique(RIP_EWD_MHC_all$model),
season = unique(RIP_EWD_MHC_all$season)),
count = 0)
all_bins_count1 = merge(bins_low_count0, all_bins, by = c("model", "MHC_anom",
"EWD", "season"), all = TRUE) %>%
dplyr::mutate(count = ifelse(is.na(count.x), count.y, count.x),
variable = factor(model))
all_bins_count_ens = all_bins_count1 %>% dplyr::group_by(MHC_anom, EWD, season) %>%
dplyr::summarise(count = min(count)) %>%
dplyr::mutate(variable = "ENS - OBS") %>%
dplyr::ungroup()
all_bins_count1 = all_bins_count1 %>% dplyr::select(c(MHC_anom, EWD, season, count, variable))
all_bins_count = rbind(all_bins_count1, all_bins_count_ens)
for(mm in 1:length(unique(RIP_EWD_MHC_all$model))){
reg_grid_MAM[,mm+2] = predict(locfit_fits_MAM[[mm]], newdata = reg_grid_MAM)
colnames(reg_grid_MAM)[mm+2] = unique(RIP_EWD_MHC_all$model)[mm]
}
reg_grid_MAM[,9] = predict(locfit_fits_ens_MAM, newdata = reg_grid_MAM)
colnames(reg_grid_MAM)[9] = "ENS"
reg_grid_MAM = reg_grid_MAM %>% dplyr::mutate("ENS - OBS" = ENS - OBS) %>%
dplyr::select(-c(ENS))
reg_grid_MAM_long = melt(reg_grid_MAM, id.vars = c("MHC_anom","EWD"))
obs_mod_plot =
ggplot() +
geom_tile(data = reg_grid_MAM_long[reg_grid_MAM_long$variable != "ENS - OBS",],
aes(x = MHC_anom,
y = EWD,
fill = value)) +
scale_fill_gradient2(name = "Pr(RIP)",
limits = c(0,0.35),
midpoint = 0,low="blue", mid = "white",  high = "red",na.value = "green",
breaks = c(0,0.1,0.2,0.3),
labels = c(0,0.1,0.2,0.3)) +
geom_tile(data = all_bins_count[all_bins_count$count < 5 &
all_bins_count$season %in% c("MAM") &
all_bins_count$variable %in% unique(reg_grid_MAM_long$variable)[1:6],],
aes(x = MHC_anom,
y = EWD),
fill = "grey") +
coord_cartesian(xlim = c(-5.3,5.3), ylim = c(-235,235)) +
labs(x = "MHC Index", y = "EWD Index") +
theme_bw() +
theme(legend.position = "bottom") +
facet_wrap( ~ variable, nrow = 2)
obs_ens_plot =
ggplot() +
geom_tile(data = reg_grid_MAM_long[reg_grid_MAM_long$variable == "ENS - OBS",],
aes(x = MHC_anom,
y = EWD,
fill = value)) +
scale_fill_gradient2(name = expression(Delta ~ "Pr(RIP)"),
limits = c(-0.12,0.12),
midpoint = 0,low="blue", mid = "white",  high = "red",na.value = "green",
breaks = c(-0.1,0,0.1),
labels = c(-0.1,0,0.1)) +
geom_tile(data = all_bins_count[all_bins_count$count < 5 &
all_bins_count$season %in% c("MAM") &
all_bins_count$variable == "ENS - OBS",],
aes(x = MHC_anom,
y = EWD),
fill = "grey") +
coord_cartesian(xlim = c(-5.3,5.3), ylim = c(-235,235)) +
labs(x = "MHC Index", y = "EWD Index") +
theme_bw() +
theme(legend.position = "bottom") +
facet_wrap( ~ variable)
lay = rbind(c(1,2))
min.obs = 5
obs_mod_plot =
ggplot() +
geom_tile(data = reg_grid_MAM_long[reg_grid_MAM_long$variable != "ENS - OBS",],
aes(x = MHC_anom,
y = EWD,
fill = value)) +
scale_fill_gradient2(name = "Pr(RIP)",
limits = c(0,0.35),
midpoint = 0,low="blue", mid = "white",  high = "red",na.value = "green",
breaks = c(0,0.1,0.2,0.3),
labels = c(0,0.1,0.2,0.3)) +
geom_tile(data = all_bins_count[all_bins_count$count < min.obs &
all_bins_count$season %in% c("MAM") &
all_bins_count$variable %in% unique(reg_grid_MAM_long$variable)[1:6],],
aes(x = MHC_anom,
y = EWD),
fill = "grey") +
coord_cartesian(xlim = c(-5.3,5.3), ylim = c(-235,235)) +
labs(x = "MHC Index", y = "EWD Index") +
theme_bw() +
theme(legend.position = "bottom") +
facet_wrap( ~ variable, nrow = 2)
obs_ens_plot =
ggplot() +
geom_tile(data = reg_grid_MAM_long[reg_grid_MAM_long$variable == "ENS - OBS",],
aes(x = MHC_anom,
y = EWD,
fill = value)) +
scale_fill_gradient2(name = expression(Delta ~ "Pr(RIP)"),
limits = c(-0.12,0.12),
midpoint = 0,low="blue", mid = "white",  high = "red",na.value = "green",
breaks = c(-0.1,0,0.1),
labels = c(-0.1,0,0.1)) +
geom_tile(data = all_bins_count[all_bins_count$count < min.obs &
all_bins_count$season %in% c("MAM") &
all_bins_count$variable == "ENS - OBS",],
aes(x = MHC_anom,
y = EWD),
fill = "grey") +
coord_cartesian(xlim = c(-5.3,5.3), ylim = c(-235,235)) +
labs(x = "MHC Index", y = "EWD Index") +
theme_bw() +
theme(legend.position = "bottom") +
facet_wrap( ~ variable)
lay = rbind(c(1,2))
grid.arrange(obs_mod_plot,
obs_ens_plot,
ncol = 2,
layout_matrix = lay)
rm(list = ls())
source("R/GetSeasonDate.R")
load(file = 'Processed_Data/RIP_EWD_MHC_all.RData')
RIP_EWD_MHC_all_MAM = RIP_EWD_MHC_all %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),
RIP_lag1 = lag(RIP,1)) %>%
dplyr::filter(season == "MAM")
RIP_EWD_MHC_mod = glm(RIP ~  MHC_anom : EWD.positive + factor(RIP_lag1) : EWD,
data = RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model == "OBS",], family = binomial(link = "logit"))
summary(RIP_EWD_MHC_mod)
hist_lims = data.frame(xlim = c(0.5,11.6),
ylim = c(0,40))
rm(list = ls())
source("R/GetSeasonDate.R")
# load RIP/EWD/MHC records
load(file = 'Processed_Data/RIP_EWD_MHC_all.RData')
# add EWD "+" indicator and just retain the MAM season
RIP_EWD_MHC_all_MAM = RIP_EWD_MHC_all %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),
RIP_lag1 = lag(RIP,1)) %>%
dplyr::filter(season == "MAM")
# fit the model on the observations
RIP_EWD_MHC_mod = glm(RIP ~  MHC_anom : EWD.positive + factor(RIP_lag1) : EWD,
data = RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model == "OBS",], family = binomial(link = "logit"))
n.sims = 25
# intialize the first RIP_lag1 as 0 for each model for each year
RIP_EWD_MHC_mod_MAM = RIP_EWD_MHC_all_MAM %>% dplyr::filter(model != "OBS") %>%
dplyr::select(-c(RIP, RIP_lag1)) %>%
dplyr::mutate(RIP_lag1 = ifelse(lubridate::month(date) == 3 & lubridate::day(date) == 1,
0, NA))
RIP_EWD_MHC_obs_MAM = RIP_EWD_MHC_all_MAM %>% dplyr::filter(model == "OBS")
RIP_sim_df = data.frame(date = unique(RIP_EWD_MHC_mod_MAM$date),
matrix(nrow = nrow(RIP_EWD_MHC_mod_MAM)/5, ncol = n.sims))
RIP_sim	= list(RIP_sim_df,RIP_sim_df,RIP_sim_df,RIP_sim_df,RIP_sim_df)
names(RIP_sim) = unique(RIP_EWD_MHC_mod_MAM$model)
RIP_sim
nrow(RIP_sim)
nrow(RIP_sim[[1]])
nrow(RIP_sim[[1:5]])
nrow(RIP_sim[[1]])
nrow(RIP_EWD_MHC_mod_MAM)/5
rm(list = ls())
source("R/GetSeasonDate.R")
load(file = 'Processed_Data/RIP_EWD_MHC_all.RData')
RIP_EWD_MHC_all_MAM = RIP_EWD_MHC_all %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),
RIP_lag1 = lag(RIP,1)) %>%
dplyr::filter(season == "MAM")
RIP_EWD_MHC_mod = glm(RIP ~  MHC_anom : EWD.positive + factor(RIP_lag1) : EWD,
data = RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model == "OBS",], family = binomial(link = "logit"))
n.sims = 25
RIP_EWD_MHC_mod_MAM = RIP_EWD_MHC_all_MAM %>% dplyr::filter(model != "OBS") %>%
dplyr::select(-c(RIP, RIP_lag1)) %>%
dplyr::mutate(RIP_lag1 = ifelse(lubridate::month(date) == 3 & lubridate::day(date) == 1,
0, NA))
RIP_EWD_MHC_obs_year = RIP_EWD_MHC_all_MAM %>% dplyr::filter(model == "OBS") %>%
dplyr::mutate(year = lubridate::year(date)) %>%
dplyr::group_by(year) %>%
dplyr::summarise(RIP = sum(RIP))
source('R/ma.R')
smoothing_window = 10
RIP_sim_by_year = RIP_sim_by_year %>% dplyr::group_by(model,sim) %>%
dplyr::mutate(RIP_sim_smooth = ma(RIP_sim, smoothing_window))
RIP_pred_by_year_sim_mean = RIP_pred_by_year_sim_mean %>% dplyr::group_by(model) %>%
dplyr::mutate(RIP_sim_smooth = ma(RIP_sim, smoothing_window))
RIP_EWD_MHC_obs_year = RIP_EWD_MHC_obs_year %>% dplyr::mutate(RIP_smooth = ma(RIP, smoothing_window))
rm(list = ls())
source("R/GetSeasonDate.R")
load(file = 'Processed_Data/RIP_EWD_MHC_all.RData')
RIP_EWD_MHC_all_MAM = RIP_EWD_MHC_all %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),
RIP_lag1 = lag(RIP,1)) %>%
dplyr::filter(season == "MAM")
RIP_EWD_mod = glm(RIP ~ factor(RIP_lag1) : EWD,
data = RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model == "OBS",], family = binomial(link = "logit"))
summary(RIP_EWD_mod)
hist_lims = data.frame(xlim = c(0.5,11.6),
ylim = c(0,40))
rm(list = ls())
source("R/GetSeasonDate.R")
load(file = 'Processed_Data/RIP_EWD_MHC_all.RData')
RIP_EWD_MHC_all_MAM = RIP_EWD_MHC_all %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),
RIP_lag1 = lag(RIP,1)) %>%
dplyr::filter(season == "MAM")
RIP_EWD_MHC_mod = glm(RIP ~ MHC_anom : EWD.positive + factor(RIP_lag1) : EWD,
data = RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model == "OBS",], family = binomial(link = "logit"))
summary(RIP_EWD_MHC_mod)
rm(list = ls())
source("R/GetSeasonDate.R")
# Simulate the future projections based on the EWD and MHC anom indices from the future record (RCP 8.5)
# load RIP/EWD/MHC records
load(file = 'Processed_Data/RIP_EWD_MHC_all.RData')
# add EWD "+" indicator and retain the MAM season
RIP_EWD_MHC_all_MAM = RIP_EWD_MHC_all %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),
RIP_lag1 = lag(RIP,1)) %>%
dplyr::filter(season == "MAM")
# fit the model on the observations
RIP_EWD_MHC_mod = glm(RIP ~ MHC_anom : EWD.positive + factor(RIP_lag1) : EWD,
data = RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model == "OBS",], family = binomial(link = "logit"))
summary(RIP_EWD_MHC_mod)
# load and process the future records
load(file = "Processed_Data/EWD_mod_future.RData")
load(file = "Processed_Data/MHC_mod_future.RData")
load(file = 'Processed_Data/mod_RIP_future.RData')
EWD_MHC_mod_future = merge(merge(mod_RIP_future,EWD_mod_future, by = c("date","season","model")),MHC_mod_future,by = c("date","season","model")) %>%
dplyr::select(c(date, season, model, RIP, EWD, MHC_anom)) %>%
dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),
RIP_lag1 = lag(RIP,1)) %>%
dplyr::filter(season == "MAM")
EWD_MHC_mod_future_MAM = EWD_MHC_mod_future %>% dplyr::filter(model != "OBS") %>%
dplyr::select(-c(RIP, RIP_lag1))
EWD_MHC_mod_future_MAM = EWD_MHC_mod_future_MAM %>% dplyr::mutate(RIP_lag1 = ifelse(lubridate::month(date) == 3 & lubridate::day(date) == 1,
0, NA))
head(EWD_MHC_mod_future_MAM)
summary(EWD_MHC_mod_future_MAM)
head(mod_RIP_future)
head(EWD_mod_future)
unique(EWD_MHC_mod_future$model)
EWD_MHC_mod_future = merge(merge(mod_RIP_future,EWD_mod_future, by = c("date","season","model")),MHC_mod_future,by = c("date","season","model")) %>%
dplyr::select(c(date, season, model, RIP, EWD, MHC_anom)) %>%
dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0)) %>%
dplyr::filter(season == "MAM")
unique(EWD_MHC_mod_future$model)
