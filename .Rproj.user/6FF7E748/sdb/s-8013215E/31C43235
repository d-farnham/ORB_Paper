{
    "collab_server" : "",
    "contents" : "# all codes run in RStudio version 1.0.136 and R version R version 3.3.3\n# Older and newer versions of RStudio and R have not been tested\n\n########################################\n############### Figure 1 ###############\n########################################\nrm(list = ls())\npackage.list <- list(\"akima\",\"dataRetrieval\",\"data.table\",\"dplyr\",\"epitools\",\"ggmap\",\"ggplot2\",\"gridExtra\", \n                     \"Kendall\",\"locfit\", \"lubridate\",\"maps\",\"ncdf4\",\"readr\",\"reshape2\",\"tidyr\")\nsource('R/load_packages.R') # clear workspace, clear console, load packages\nsource(\"R/GetSeasonDate.R\")\n\n# compare the grids from the CPC and the GCM\nload(file = 'Processed_Data/CPC_grid.RData')\nload(file = 'Processed_Data/mod_ORB_grid.RData')\n\n\nworld <- data.frame(map(\"world\", plot=FALSE)[c(\"x\",\"y\")])\nstate <- data.frame(map(\"state\", plot=FALSE)[c(\"x\",\"y\")])\n\nsource(\"R/load_basin_boundary.R\")\npdf('Final figures/Figure_1.pdf', width = 6, height = 4.25)\nggplot() + \n\tgeom_tile(data = CPC_grid,\n\t\t\t\t\t\taes(x = (lon-360),y = lat), fill = \"transparent\", col = \"red\", size = 0.2, alpha = 0.5) +\n\tgeom_tile(data = mod_ORB_grid,\n\t\t\t\t\t\taes(x = (lon-360),y = lat), fill = \"transparent\", col = \"blue\", size = 0.6) + \n\tgeom_path(data=state, aes(x,y,z=NULL), alpha = 0.75) +\n\tscale_y_continuous(limits = c(33,45)) +\n\tscale_x_continuous(limits = c(-93,-75)) +\n\tgeom_polygon(aes(x = long, y = lat, group = group), alpha = 0.25, data = basin_points) +\n\txlab(\"Longitude\") + \n\tylab(\"Latitude\") +\n\ttheme_bw()\ndev.off()\n\n\n########################################\n############### Figure 2 ###############\n########################################\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\nload(file = 'Processed_Data/HCDN.RData')\nload(file = 'Processed_Data/gage_info.RData')\n\n\n# plot the streamflow gauges:\nstate <- data.frame(map(\"state\", plot=FALSE)[c(\"x\",\"y\")])\nsource(\"R/load_basin_boundary.R\")\nload('Processed_Data/pr_box.RData')\n\ngage_info = gage_info %>% dplyr::mutate(new_names = paste0(Short.name,\" (\",substr(Short.name,1,1),\")\"))\n\n# first part of the plot\nstream_gauge_locs_plot =\n\tggplot() +\n\tgeom_point(data = as.data.frame(gage_info), aes(x = Longitude,y = Latitude, size=da_sq_km/10000)) +\n\tscale_size_continuous(name = \"Drainage Area (x 10000 sq. km)\", limits = c(0,25), range = c(0,4)) +\n\tgeom_text(data = as.data.frame(gage_info), aes(x = Longitude+c(0,0.35,-0.35,0,0,0),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t y = Latitude+c(rep(-0.5,4),0.5,-0.5), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label = new_names),\n\t\t\t\t\t\tsize = 3,\n\t\t\t\t\t\tcol = \"black\") +\n\tgeom_rect(data = data.frame(ymin = c(pr_box$lat.min), ymax = c(pr_box$lat.max), xmin = c(pr_box$lon.max - 360), xmax = c(pr_box$lon.min - 360)),\n\t\t\t\t\t\taes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), col = \"red\",\n\t\t\t\t\t\talpha=0.15, inherit.aes = FALSE, size = 0.5) +\n\tgeom_path(data=state, aes(x,y,z=NULL), alpha = 0.25) +\n\tscale_y_continuous(limits = c(35.5,42.5)) +\n\tscale_x_continuous(limits = c(-90,-77.5)) +\n\tgeom_polygon(aes(x = long, y = lat, group = group), alpha = 0.25, data = basin_points) +\n\tggtitle(\"Streamflow gauges\") +\n\ttheme_bw() +\n\ttheme(legend.position = \"bottom\")\n\n\n\nstreamflows0 = melt(HCDN,id.vars = c(\"dates\",\"streamflow\")) %>%\n\tdplyr::filter(dates > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\tdates < \"2006-01-01\")\n\n\n# calculate the 1 in 365 (or about the 99.7th percentiles) from each site\nxtr_threshold = (1 - 1/365)\n\ncolnames(streamflows0) = c(\"date\", \"streamflow\", \"site\")\n\nstreamflows = streamflows0 %>% dplyr::mutate(day = day(date),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t month = month(date),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t year = year(date),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t streamflow = ifelse(streamflow < 0, 0 , streamflow)) %>%\n\tdplyr::group_by(site) %>%\n\tdplyr::mutate(xtr = quantile(streamflow, probs = xtr_threshold),\n\t\t\t\t\t\t\t\tseason = GetSeasonDate(date),\n\t\t\t\t\t\t\t\tstr_S = ifelse(streamflow >= xtr, 1, 0))\nsave(streamflows, file = 'Processed_Data/streamflows.RData')\n\nflow_seasons = merge(aggregate(str_S ~ season + site, FUN = sum, data = streamflows),\n\t\t\t\t\t\t\t\t\t\t aggregate(str_S ~ season + site, FUN = length, data = streamflows), \n\t\t\t\t\t\t\t\t\t\t by = c(\"season\",\"site\"))\n\n\nflow_seasons = flow_seasons %>% dplyr::mutate(prob_str_S = str_S.x/str_S.y)\n\nflow_seasons = flow_seasons[order(flow_seasons$site),]\n\nflow_seasons$season = factor(flow_seasons$season, levels = c(\"DJF\", \"MAM\", \"JJA\", \"SON\"))\n\n# order the sites according to drainage basin size\nflow_seasons$site = factor(flow_seasons$site, levels = gage_info$Short.name[order(gage_info$D.A, decreasing = TRUE)])\n\n\nprob_str_S_by_season_plot =\n\tggplot(data = flow_seasons) +\n\tgeom_line(aes(x = season, y = prob_str_S, group = as.factor(site), col = site), size = 1.25) +\n\tgeom_point(aes(x = season, y = prob_str_S, group = as.factor(site), col = site), size = 2.5) +\n\ttheme(legend.position = \"none\") +\n\tylab(expression(Pr(S^{s} > S[364/365]^{s}))) +\n\tylim(c(0,0.01)) +\n\ttheme_bw() +\n\ttheme(legend.position = \"bottom\")\n\n# find the days when a RIP occured:\nload('Processed_Data/CPC_mod_cell_RIP.RData')\n\nRIP_CPC = CPC_mod_cell_RIP %>% dplyr::select(date, RIP) %>%\n\tdplyr::mutate(RIP_sum_15 = stats::filter(RIP, rep(1, 15), method = \"convolution\", sides = 1))\n\n\nprecip_streamflow = merge(streamflows,RIP_CPC, by = \"date\", all.y = TRUE)\n\n# compute the odds ratio\nodds_ratio = data.frame(expand.grid(site = unique(precip_streamflow$site),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tseason = c(\"MAM\"),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_sum_15 = c(0)))\n\nodds_ratio$odds_est = odds_ratio$odds_lower = odds_ratio$odds_upper = NA\n\n\nfor(rrow in 1:nrow(odds_ratio)){\n\todds_ratio_tmp = precip_streamflow %>% dplyr::mutate(RIP_over = ifelse(RIP_sum_15 > 0, 1, 0))\n\t\n\t\n\t# only retain RIP_over == 1, and RIP_sum_15 == 0\n\t\n\todds_ratio_tmp = odds_ratio_tmp[odds_ratio_tmp$RIP_over == 1 |\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\todds_ratio_tmp$RIP_sum_15 == 0,\t]\n\t\n\ttable_tmp = table(odds_ratio_tmp[odds_ratio_tmp$season == odds_ratio$season[rrow] & \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \todds_ratio_tmp$site == odds_ratio$site[rrow],]$RIP_over, \n\t\t\t\t\t\t\t\t\t\todds_ratio_tmp[odds_ratio_tmp$season == odds_ratio$season[rrow] &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \todds_ratio_tmp$site == odds_ratio$site[rrow],]$str_S)\n\ttryCatch({ # if there is an error, we want the loop to continue running\t\n\t\todds_ratio$odds_est[rrow] = oddsratio.wald(table_tmp)$measure[2,1]\n\t\todds_ratio$odds_lower[rrow] = oddsratio.wald(table_tmp)$measure[2,2]\n\t\todds_ratio$odds_upper[rrow] = oddsratio.wald(table_tmp)$measure[2,3]\n\t}, error=function(e){cat(\"ERROR :\",conditionMessage(e), \"\\n\")})\n\tprint(rrow)\n}\n\n# make the # RIP events label for plot\nodds_ratio = odds_ratio %>% dplyr::mutate(RIP_sum_15_lab = paste0(RIP_sum_15+1, \"+\"))\n\n# order the sites according to drainage basin size\nodds_ratio$site = factor(odds_ratio$site, levels = gage_info$Short.name[order(gage_info$D.A, decreasing = TRUE)])\n\nodds_ratio = odds_ratio %>% dplyr::mutate(new_name = substr(site,1,1))\n\nodds_ratio = odds_ratio %>% dplyr::mutate(ln_odds_est = log(odds_est),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tln_odds_lower = log(odds_lower),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tln_odds_upper = log(odds_upper))\n\nann_text_pet <- data.frame(x = c(1.08, 0.8), y = c(1),lab = \"Inf\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t site = factor(c(\"Petersburg\",\"MtCarmel\")),\n\t\t\t\t\t\t\t\t\t\t\t\t\t new_name = factor(c(\"P\",\"M\")),\n\t\t\t\t\t\t\t\t\t\t\t\t\t season = \"MAM\")\n\n\nodds_ratio$season = factor(odds_ratio$season, levels = c(\"MAM\"))\n\nodds_ratio_str_S_by_season_plot =\n\tggplot(data = odds_ratio[odds_ratio$season == \"MAM\",]) +\n\tgeom_pointrange(aes(x = factor(RIP_sum_15_lab), y = ln_odds_est, ymin = ln_odds_lower, ymax = ln_odds_upper, col = site), \n\t\t\t\t\t\t\t\t\tposition = position_dodge(width = 0.75), fatten = 1.75, size = 1) +\n\tfacet_grid( ~ season) +\n\tscale_y_continuous(name = expression((LOR^s ~ '|' ~ RIP)), limits = c(-1,6.25)) +\n\txlab(\"\") +\n\tgeom_text(data = ann_text_pet, aes(x,y,label = lab), col = c(\"#00BFC4\", \"#B79F00\")) +\n\tgeom_hline(aes(yintercept = 0), linetype = \"dashed\") +\n\ttheme_bw() +\n\ttheme(legend.position = \"none\")\n\nodds_ratio_str_S_by_season_plot\n\n############################\n\npdf(paste0(\"Final figures/Figure_2.pdf\"), height = 5, width = 10)\ngrid.arrange(stream_gauge_locs_plot,\n\t\t\t\t\t\t prob_str_S_by_season_plot,\n\t\t\t\t\t\t odds_ratio_str_S_by_season_plot,\n\t\t\t\t\t\t nrow = 2,\n\t\t\t\t\t\t layout_matrix = rbind(c(1,2),c(1,2),c(1,2),c(1,3),c(1,3)))\ndev.off()\n\n########################################\n############### Figure S1 ##############\n########################################\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\nload(file = 'Processed_Data/mod_RIP.RData')\nload(file = 'Processed_Data/CPC_mod_cell_RIP.RData')\nload(file = 'Processed_Data/mod_CPC_thresh_RIP.RData')\n\n\nRIP_month_counts_mod = aggregate(date ~ month(date) + model, data = mod_RIP[mod_RIP$RIP == 1,], FUN = length)\ncolnames(RIP_month_counts_mod) = c(\"month\", \"model\", \"RIPs\")\nRIP_month_counts_mod$model = paste0(\"GCM \",RIP_month_counts_mod$model)\n\nRIP_month_counts_obs = data.frame(aggregate(date ~ month(date), data = CPC_mod_cell_RIP[CPC_mod_cell_RIP$RIP == 1,], FUN = length),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel = \"OBS\")\ncolnames(RIP_month_counts_obs) = c(\"month\", \"RIPs\", \"model\")\nRIP_month_counts_obs = RIP_month_counts_obs[,c(\"month\", \"model\", \"RIPs\")]\n\nRIP_month_counts = rbind(RIP_month_counts_mod, RIP_month_counts_obs)\n\nRIP_month_counts = RIP_month_counts %>% dplyr::group_by(model) %>%\n\tdplyr::mutate(percent_RIPs = RIPs/sum(RIPs))\n\n# figure S1\npdf('Final figures/Figure_S1.pdf', height = 4, width = 8)\nggplot(RIP_month_counts) +\n\tgeom_bar(aes(month, percent_RIPs*100), stat = \"identity\") +\n\tfacet_wrap(~model) +\n\tlabs(x = \"month\", y = \"% of RIPs\") +\n\tscale_x_continuous(breaks = 1:12) +\n\ttheme_bw()\ndev.off()\n\n\n########################################\n############### Figure 3 ###############\n########################################\n\nRIP_CPC_by_season_year = CPC_mod_cell_RIP %>% dplyr::filter(season == \"MAM\") %>% \n\tdplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(season, year) %>%\n\tdplyr::summarise(RIP = sum(RIP, na.rm = TRUE)) %>%\n\tdplyr::group_by(season) %>%\n\tdplyr::mutate(RIP_mean = mean(RIP, na.rm = TRUE))\n\nRIP_mod_by_season_year = mod_RIP %>% dplyr::filter(season == \"MAM\") %>% \n\tdplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(season, year, model) %>%\n\tdplyr::summarise(RIP = sum(RIP, na.rm = TRUE)) %>%\n\tdplyr::group_by(season, model) %>%\n\tdplyr::mutate(RIP_mean = mean(RIP, na.rm = TRUE)) %>%\n\tdplyr::group_by(season, year) %>%\n\tdplyr::mutate(RIP_ensemble_mean = mean(RIP, na.rm = TRUE))\n\nRIP_mod_CPC_thresh_by_season_year = mod_CPC_thresh_RIP %>% dplyr::filter(season == \"MAM\") %>% \n\tdplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(season, year, model) %>%\n\tdplyr::summarise(RIP = sum(RIP, na.rm = TRUE)) %>%\n\tdplyr::group_by(season, model) %>%\n\tdplyr::mutate(RIP_mean = mean(RIP, na.rm = TRUE)) %>%\n\tdplyr::group_by(season, year) %>%\n\tdplyr::mutate(RIP_ensemble_mean = mean(RIP, na.rm = TRUE))\n\nsource('R/ma.R')\nsmoothing_window = 10\n\nRIP_CPC_by_season_year = RIP_CPC_by_season_year %>% dplyr::mutate(RIP_smooth = ma(RIP, smoothing_window))\nRIP_mod_by_season_year = RIP_mod_by_season_year %>% dplyr::group_by(model,season) %>%\n\tdplyr::mutate(RIP_smooth = ma(RIP, smoothing_window),\n\t\t\t\t\t\t\t\tRIP_ensemble_mean_smooth = ma(RIP_ensemble_mean, smoothing_window))\n\nRIP_mod_CPC_thresh_by_season_year = RIP_mod_CPC_thresh_by_season_year %>% dplyr::group_by(model,season) %>%\n\tdplyr::mutate(RIP_smooth = ma(RIP, smoothing_window),\n\t\t\t\t\t\t\t\tRIP_ensemble_mean_smooth = ma(RIP_ensemble_mean, smoothing_window))\n\nline.width = 1\nalpha.line = 1\n\nRIP_mod_obs_compare_1 =\n\tggplot() + \n\tgeom_line(data = RIP_mod_by_season_year,\n\t\t\t\t\t\taes(year, y = RIP_smooth, group = factor(model)), \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/2, alpha = alpha.line) +\n\tgeom_line(data = RIP_mod_by_season_year,\n\t\t\t\t\t\taes(year, y = RIP_ensemble_mean_smooth), col = \"red\", \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width) +\n\tgeom_line(data = RIP_CPC_by_season_year,\n\t\t\t\t\t\taes(year, y = RIP_smooth), \n\t\t\t\t\t\tsize = line.width) +\n\tylab(\"# RIP\") +\n\tcoord_cartesian(xlim = c(1955,2006),\n\t\t\t\t\t\t\t\t\tylim = c(0,5.5)) +\n\txlab(\"Year\") +\n\tannotate(\"text\", label = c(\"a)\"), x = 1956, y = 5.3, size = 6, colour = \"black\") +\n\ttheme_bw()\n\n\nRIP_mod_obs_compare_2 =\n\tggplot() + \n\tgeom_line(data = RIP_mod_CPC_thresh_by_season_year,\n\t\t\t\t\t\taes(year, y = RIP_smooth, group = factor(model)), \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/2, alpha = alpha.line) +\n\tgeom_line(data = RIP_mod_CPC_thresh_by_season_year,\n\t\t\t\t\t\taes(year, y = RIP_ensemble_mean_smooth), col = \"red\", \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width) +\n\tgeom_line(data = RIP_CPC_by_season_year,\n\t\t\t\t\t\taes(year, y = RIP_smooth), \n\t\t\t\t\t\tsize = line.width) +\n\tylab(\"# RIP\") +\n\tcoord_cartesian(xlim = c(1955,2006),\n\t\t\t\t\t\t\t\t\tylim = c(0,5.5)) +\n\txlab(\"Year\") +\n\tannotate(\"text\", label = c(\"c)\"), x = 1956, y = 5.3, size = 6, colour = \"black\") +\n\ttheme_bw()\n\n\nbin_breaks = seq(-0.5,12.5,1)\nbin_labels = as.character(bin_breaks-0.5)\nRIP_mod_obs_compare_3 =\n\tggplot() + \n\tstat_bin(data = RIP_mod_by_season_year[RIP_mod_by_season_year$model == 1,],\n\t\t\t\t\t aes(x = RIP, y =..count..), alpha = alpha.line,\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_mod_by_season_year[RIP_mod_by_season_year$model == 2,],\n\t\t\t\t\t aes(x = RIP, y =..count..), alpha = alpha.line,\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_mod_by_season_year[RIP_mod_by_season_year$model == 3,],\n\t\t\t\t\t aes(x = RIP, y =..count..), alpha = alpha.line,\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_mod_by_season_year[RIP_mod_by_season_year$model == 4,],\n\t\t\t\t\t aes(x = RIP, y =..count..), alpha = alpha.line,\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_mod_by_season_year[RIP_mod_by_season_year$model == 5,],\n\t\t\t\t\t aes(x = RIP, y =..count..), alpha = alpha.line,\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_CPC_by_season_year,\n\t\t\t\t\t aes(x = RIP, y=..count..), \n\t\t\t\t\t geom = \"step\", size = line.width,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_mod_by_season_year,\n\t\t\t\t\t aes(x = RIP, y =..count../5),\n\t\t\t\t\t geom = \"step\", linetype = \"twodash\", size = line.width,\n\t\t\t\t\t breaks = bin_breaks, col = \"red\") +\n\tannotate(\"text\", label = c(\"b)\"), x = 0.75, y = 38.75, size = 6, colour = \"black\") +\n\txlab(\"# RIP\") +\n\tcoord_cartesian(xlim = c(0.5,11.6), ylim = c(0,40)) +\n\tscale_x_continuous(breaks = bin_breaks,\n\t\t\t\t\t\t\t\t\t\t labels = bin_labels) +\n\ttheme_bw()\n\nRIP_mod_obs_compare_4 =\n\tggplot() + \n\tstat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 1,],\n\t\t\t\t\t aes(x = RIP, y =..count..), alpha = alpha.line,\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 2,],\n\t\t\t\t\t aes(x = RIP, y =..count..), alpha = alpha.line,\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 3,],\n\t\t\t\t\t aes(x = RIP, y =..count..), alpha = alpha.line,\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 4,],\n\t\t\t\t\t aes(x = RIP, y =..count..), alpha = alpha.line,\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_mod_CPC_thresh_by_season_year[RIP_mod_CPC_thresh_by_season_year$model == 5,],\n\t\t\t\t\t aes(x = RIP, y =..count..), alpha = alpha.line,\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_CPC_by_season_year,\n\t\t\t\t\t aes(x = RIP, y=..count..), \n\t\t\t\t\t geom = \"step\", size = line.width,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_mod_CPC_thresh_by_season_year,\n\t\t\t\t\t aes(x = RIP, y =..count../5),\n\t\t\t\t\t geom = \"step\", linetype = \"twodash\", size = line.width,\n\t\t\t\t\t breaks = bin_breaks, col = \"red\") +\n\tannotate(\"text\", label = c(\"d)\"), x = 0.75, y = 38.75, size = 6, colour = \"black\") +\n\txlab(\"# RIP\") +\n\tcoord_cartesian(xlim = c(0.5,11.6), ylim = c(0,40)) +\n\tscale_x_continuous(breaks = bin_breaks,\n\t\t\t\t\t\t\t\t\t\t labels = bin_labels) +\n\ttheme_bw()\n\npdf('Final figures/Figure_3.pdf', width = 11, height = 5.5)\ngrid.arrange(RIP_mod_obs_compare_1,\n\t\t\t\t\t\t RIP_mod_obs_compare_2,\n\t\t\t\t\t\t RIP_mod_obs_compare_3,\n\t\t\t\t\t\t RIP_mod_obs_compare_4,\n\t\t\t\t\t\t nrow = 2,\n\t\t\t\t\t\t layout_matrix = rbind(c(1,3),c(2,4)))\ndev.off()\n\n\n# calculate the Mann kendall trend for MAM for each of the observations/simulations\nlibrary(Kendall)\nobs_trend =  RIP_CPC_by_season_year %>% dplyr::group_by(season) %>%\n\tdplyr::summarise(tau = as.numeric(MannKendall(RIP)[\"tau\"]),\n\t\t\t\t\t\t\t\t\t p.value = as.numeric(MannKendall(RIP)[\"sl\"]))\n\nmod_trend =  RIP_mod_by_season_year %>% dplyr::group_by(season,model) %>%\n\tdplyr::summarise(tau = as.numeric(MannKendall(RIP)[\"tau\"]),\n\t\t\t\t\t\t\t\t\t p.value = as.numeric(MannKendall(RIP)[\"sl\"]))\n\nmod_ens_trend =  RIP_mod_by_season_year %>% dplyr::group_by(season,model) %>%\n\tdplyr::summarise(tau = as.numeric(MannKendall(RIP_ensemble_mean)[\"tau\"]),\n\t\t\t\t\t\t\t\t\t p.value = as.numeric(MannKendall(RIP_ensemble_mean)[\"sl\"]))\n\n########################################\n############### Figure 4 ###############\n########################################\n\n# first define new variables of lagged RIPs\nRIP_lag_obs = CPC_mod_cell_RIP %>% dplyr::filter(season == \"MAM\") %>%\n\tdplyr::mutate(RIP_lag1 = lag(RIP, 1),\n\t\t\t\t\t\t\t\tRIP_lag4  = lag(RIP, 4),\n\t\t\t\t\t\t\t\tRIP_lag5  = lag(RIP, 5),\n\t\t\t\t\t\t\t\tRIP_lag6  = lag(RIP, 6),\n\t\t\t\t\t\t\t\tRIP_lag7  = lag(RIP, 7))\n\n# need to remove the first 7 days from each year (b/c we cannot check the lagged days associated with those days in the simulation round)\nRIP_lag_obs = RIP_lag_obs %>% dplyr::filter(!(lubridate::month(date) == 3 & lubridate::day(date) %in% 1:7))\n\nRIP_lag_obs$RIP_lag_4_7 = apply(RIP_lag_obs[, c(\"RIP_lag4\",\"RIP_lag5\", \"RIP_lag6\", \"RIP_lag7\")], 1, max)\n\nRIP_lag_obs = RIP_lag_obs %>% dplyr::select(c(date, RIP, season , RIP_lag1, RIP_lag_4_7))\n\n\nRIP_lag_mod = mod_RIP %>% dplyr::filter(season == \"MAM\") %>%\n\tdplyr::group_by(model) %>% \n\tdplyr::mutate(RIP_lag1 = lag(RIP, 1),\n\t\t\t\t\t\t\t\tRIP_lag4  = lag(RIP, 4),\n\t\t\t\t\t\t\t\tRIP_lag5  = lag(RIP, 5),\n\t\t\t\t\t\t\t\tRIP_lag6  = lag(RIP, 6),\n\t\t\t\t\t\t\t\tRIP_lag7  = lag(RIP, 7))\n\n# need to remove the first 7 days from each year (b/c we cannot check the lagged days associated with those days in the simulation round)\nRIP_lag_mod = RIP_lag_mod %>% dplyr::filter(!(lubridate::month(date) == 3 & lubridate::day(date) %in% 1:7))\n\nRIP_lag_mod$RIP_lag_4_7 = apply(RIP_lag_mod[, c(\"RIP_lag4\",\"RIP_lag5\", \"RIP_lag6\", \"RIP_lag7\")], 1, max)\n\nRIP_lag_mod = RIP_lag_mod %>% dplyr::select(c(date, RIP, season, model, RIP_lag1, RIP_lag_4_7))\n\n\nRIP_lag_obs_long = melt(RIP_lag_obs, id.vars = c(\"date\", \"season\", \"RIP\"))\nRIP_lag_mod_long = melt(RIP_lag_mod, id.vars = c(\"date\", \"season\", \"model\", \"RIP\"))\n\n# intialize a blank data.frame to store the conditional probs\nRIP_cond_prob = data.frame(season = c(\"MAM\"),\n\t\t\t\t\t\t\t\t\t\t\t\t\t lag = rep(unique(RIP_lag_obs_long$variable), each = 2),\n\t\t\t\t\t\t\t\t\t\t\t\t\t obs = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t mod1 = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t mod2 = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t mod3 = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t mod4 = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t mod5 = NA)\n\nsource('R/GetCondProbbySeason.R')\n\nRIP_lag_names = unique(RIP_lag_obs_long$variable)\n\nfor(llag in 1:2){\n\tRIP_cond_prob$obs[(llag*2) - 1] = GetCondProbbySeason(RIP_lag_obs_long$RIP[RIP_lag_obs_long$variable == RIP_lag_names[llag]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_lag_obs_long$value[RIP_lag_obs_long$variable == RIP_lag_names[llag]],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_lag_obs_long$season[RIP_lag_obs_long$variable == RIP_lag_names[llag]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_cond_prob$season[(llag*2) - 1])\n\t\n\tRIP_cond_prob$obs[(llag*2)] = GetCondProbbySeason(RIP_lag_obs_long$RIP[RIP_lag_obs_long$variable == RIP_lag_names[llag]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_lag_obs_long$value[RIP_lag_obs_long$variable == RIP_lag_names[llag]],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_lag_obs_long$season[RIP_lag_obs_long$variable == RIP_lag_names[llag]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_cond_prob$season[(llag*2)])\n\tfor(mmod in 1:5){\n\t\tRIP_cond_prob[(llag*2) - 1,mmod+3] = GetCondProbbySeason(RIP_lag_mod_long$RIP[RIP_lag_mod_long$model == mmod & RIP_lag_mod_long$variable == RIP_lag_names[llag]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t RIP_lag_mod_long$value[RIP_lag_mod_long$model == mmod & RIP_lag_mod_long$variable == RIP_lag_names[llag]],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t RIP_lag_mod_long$season[RIP_lag_mod_long$model == mmod & RIP_lag_mod_long$variable == RIP_lag_names[llag]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t RIP_cond_prob$season[(llag*2) - 1])\n\t\tRIP_cond_prob[(llag*2),mmod+3] = GetCondProbbySeason(RIP_lag_mod_long$RIP[RIP_lag_mod_long$model == mmod & RIP_lag_mod_long$variable == RIP_lag_names[llag]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t RIP_lag_mod_long$value[RIP_lag_mod_long$model == mmod & RIP_lag_mod_long$variable == RIP_lag_names[llag]],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t RIP_lag_mod_long$season[RIP_lag_mod_long$model == mmod & RIP_lag_mod_long$variable == RIP_lag_names[llag]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t RIP_cond_prob$season[(llag*2)])\n\t}\n}\n\n# RIP_mod_CPC_cond_prob$ensemble_mean = apply(RIP_mod_CPC_cond_prob[,4:8], 1, mean)\nRIP_cond_prob_long = melt(RIP_cond_prob, id.vars = c(\"season\",\"lag\")) \n\nCPC_marg_probs = \n\tRIP_lag_obs_long %>% dplyr::group_by(season) %>%\n\tdplyr::summarise(value = sum(RIP[!is.na(RIP)], na.rm = TRUE)/length(RIP[!is.na(RIP)])) %>%\n\tdplyr::mutate(variable = \"obs\",\n\t\t\t\t\t\t\t\tlag = \"marg_prob\") %>%\n\tdplyr::filter(season %in% c(\"MAM\")) %>%\n\tdata.frame()\n\nmod_marg_probs = \n\tRIP_lag_mod_long %>% dplyr::group_by(season, model) %>%\n\tdplyr::summarise(value = sum(RIP[!is.na(RIP)], na.rm = TRUE)/length(RIP[!is.na(RIP)])) %>%\n\tdplyr::mutate(variable = paste0(\"mod\",model),\n\t\t\t\t\t\t\t\tlag = \"marg_prob\") %>%\n\tdplyr::filter(season %in% c(\"MAM\")) %>%\n\tdplyr::select(-model) %>%\n\tdata.frame()\n\nmarg_probs = rbind(mod_marg_probs, CPC_marg_probs)\n\nmarg_probs_wide = reshape2::dcast(variable ~ lag, data = marg_probs, value.var\t=\"value\")\n\n\nRIP_mod_CPC_cond_marg_prob_long = merge(RIP_cond_prob_long[RIP_cond_prob_long$season == \"MAM\", ],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarg_probs_wide, by = \"variable\") %>%\n\tdplyr::mutate(cond_div_marg = value/ marg_prob)\n\n# rename the lag\nRIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>% dplyr::mutate(lag_rename = ifelse(lag == \"RIP_lag1\", \"1\", \"4-7\"))\n\nRIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>%  dplyr::mutate(model = ifelse(variable == \"mod1\", \"GCM 1\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifelse(variable == \"mod2\", \"GCM 2\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ifelse(variable == \"mod3\", \"GCM 3\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t ifelse(variable == \"mod4\", \"GCM 4\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t \t\t\t ifelse(variable == \"mod5\", \"GCM 5\", \"OBS\"))))))\n\nRIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>%  dplyr::mutate(variable2 = ifelse(model == \"OBS\", \"OBS\", \"GCM\"))\n\npdf(\"Final figures/Figure_4.pdf\", width = 5, height = 3)\nggplot() +\n\tgeom_boxplot(data = RIP_mod_CPC_cond_marg_prob_long,\n\t\t\t\t\t\t\t aes(y = cond_div_marg, x = lag_rename, fill = variable2), width = 0.5, coef = 5) +\n\tlabs(x = \"lag (days)\", y = expression(P(RIP[t] ~\"|\" ~ RIP[t-lag])/P(RIP))) +\n\tscale_fill_discrete(name = \"GCM/OBS\") +\n\tscale_color_discrete(name = \"GCM/OBS\") +\n\tgeom_hline(yintercept = 1, linetype = \"dashed\") +\n\tscale_y_continuous(limits = c(0,16)) +\n\ttheme_bw()\ndev.off()\n\n\n########################################\n############### Figure S2 ##############\n########################################\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\n\n# load the records of cell-based intense precipitation for the CPC and GCM\nload(file = 'Processed_Data/CPC_mod_cell_IP.RData')\nload(file = 'Processed_Data/mod_IP.RData')\n\n\n# now only consider Dec 1950 through Nov 2005\nmod_IP = mod_IP %>% data.frame() %>%\n\tdplyr::filter(date > '1950-11-30' &\n\t\t\t\t\t\t\t\t\tdate < '2005-12-01') %>%\n\tdplyr::mutate(set = paste0(\"GCM \", model))\n\nCPC_mod_cell_IP = CPC_mod_cell_IP %>% data.frame() %>%\n\tdplyr::filter(date > '1950-11-30' &\n\t\t\t\t\t\t\t\t\tdate < '2005-12-01') %>%\n\tdplyr::mutate(set = \"OBS\")\n\nCPC_GCM_IP = rbind(CPC_mod_cell_IP, mod_IP[,c(\"date\", \"IP\", \"season\", \"set\")]) %>%\n\tdplyr::mutate(RIP = ifelse(IP > 3,\"RIP\",\"no RIP\")) %>%\n\tdplyr::filter(!is.na(IP) & IP > 0)\n\n# calculate the number fo IPS by season and set \nnum_CPC_GCM_IP_season_set = CPC_GCM_IP %>% dplyr::group_by(season, set, RIP) %>%\n\tdplyr::summarise(num_IP = length(IP)) %>%\n\tdplyr::mutate(prop_IP = round(num_IP/sum(num_IP),3),\n\t\t\t\t\t\t\t\tlab = paste0(RIP, \": \",num_IP,\" (\",prop_IP*100,\"%*)\")) %>%\n\tdplyr::group_by(season, set) %>%\n\tdplyr::mutate(num_IP_all = sum(num_IP)) %>%\n\tdplyr::group_by(set) %>%\n\tdplyr::mutate(prop_IP_all = round(num_IP_all/(sum(num_IP_all)/2),3), # need to divide by 2 b/c there are two rows ('RIP' & 'no RIP')\n\t\t\t\t\t\t\t\tlab_all = paste0(\"all: \",num_IP_all,\" (\",prop_IP_all*100,\"%**)\")) # that each contain a 'num_IP_all'\n\n\n# calculate the mean for IP for each set and season\nmean_CPC_GCM_IP_season_set = CPC_GCM_IP %>% dplyr::group_by(season, set) %>%\n\tdplyr::summarise(mean_IP = mean(IP)) \n\n# below is a figure that is only for our reference\npdf('Final figures/Figure_R1.pdf', height = 8, width = 10)\nggplot(CPC_GCM_IP) +\n\tgeom_bar(aes(IP, fill = factor(RIP))) +\n\tscale_fill_manual(values = c(\"black\",\"red\"), name = \"\") +\n\tgeom_vline(data = mean_CPC_GCM_IP_season_set, aes(xintercept = mean_IP), \n\t\t\t\t\t\t linetype = \"dashed\") +\n\tgeom_text(data = num_CPC_GCM_IP_season_set[num_CPC_GCM_IP_season_set$RIP == \"no RIP\",],\n\t\t\t\t\t\taes(x = 12, y = 225, label = lab), hjust = \"right\") +\n\tgeom_text(data = num_CPC_GCM_IP_season_set[num_CPC_GCM_IP_season_set$RIP == \"RIP\",],\n\t\t\t\t\t\taes(x = 12, y = 175, label = lab), col = \"red\", hjust = \"right\") +\n\tgeom_text(data = num_CPC_GCM_IP_season_set[num_CPC_GCM_IP_season_set$RIP == \"RIP\",],\n\t\t\t\t\t\taes(x = 12, y = 125, label = lab_all), col = \"black\", fontface = \"bold\", hjust = \"right\") +\n\tfacet_grid(set~season) +\n\tlabs(x = \"# of cell-based intense precipitation events on a given day\",\n\t\t\t y = \"count\",\n\t\t\t subtitle = \"* = the percent of days in each season that were/were not RIP days given that at least one cell was > it's 99th percentile during that day \\n ** = the percent of days when at least one cell was > it's 99th percentile that occurred during that season\") +\n\tscale_x_continuous(breaks = seq(1,12,by = 2))\ndev.off()\n\n\nOBS_IP_counts = CPC_GCM_IP %>% dplyr::mutate(IP_factor = as.factor(IP)) %>%\n\tdplyr::filter(set == \"OBS\") %>%\n\tdplyr::group_by(season,IP_factor,RIP) %>%\n\tdplyr::summarise(OBS_count = length(date))\n\nMOD_IP_counts = CPC_GCM_IP %>% dplyr::mutate(IP_factor = as.factor(IP)) %>%\n\tdplyr::filter(set != \"OBS\") %>%\n\tdplyr::group_by(season,IP_factor,RIP,set) %>%\n\tdplyr::summarise(ENS_MEAN_count = length(date))\n\n\nIP_counts = merge(OBS_IP_counts, MOD_IP_counts, by = c(\"season\", \"IP_factor\", \"RIP\")) %>%\n\tdplyr::mutate(`OBS - ENSEMBLE MEAN` = OBS_count - ENS_MEAN_count)\n\n\npdf('Final figures/Figure_S2.pdf', height = 3, width = 11)\nggplot(IP_counts) +\n\tgeom_hline(yintercept = 0, linetype = \"dashed\", alpha = 0.5) +\n\tgeom_vline(xintercept = 3.5, linetype = \"dashed\", alpha = 0.5) +\n\tgeom_point(aes(x = as.numeric(IP_factor), y = `OBS - ENSEMBLE MEAN`, col = factor(RIP)), stat = \"identity\") +\n\tscale_color_manual(values = c(\"black\",\"red\"), name = \"\") +\n\tfacet_wrap(~season, nrow = 1) +\n\tlabs(x = \"# of local intense precipitation events on a given day\",\n\t\t\t y = \"OBS count - GCM count\") +\n\tscale_x_continuous(breaks = seq(1,12,by = 2)) +\n\ttheme_bw()\ndev.off()\n\n########################################\n############### Figure 5 ###############\n########################################\n\n# clear workspace\nrm(list = ls())\nsource('R/GetSeasonDate.R')\n# now let's calculate anomalies and plot them\nload('Processed_Data/PR_WAT.RData')\nload('Processed_Data/Z_700.RData')\n\n# just look at the western hemisphere\nPR_WAT = PR_WAT %>% dplyr::filter(lon > 180)\nZ_700 = Z_700 %>% dplyr::filter(lon > 180)\n\ndat = cbind(Z_700, PR_WAT$pr_wat)\ncolnames(dat)[6] = \"pr_wat\"\n\nrm(Z_700,PR_WAT)\n\n\nmonthly_mean_Z_PR_WAT = dat %>% dplyr::mutate(month = month(date)) %>%\n\tdplyr::group_by(lon,lat,month) %>%\n\tdplyr::summarise(z_700_clim = mean(z_700),\n\t\t\t\t\t\t\t\t\t z_700_sd = sd(z_700),\n\t\t\t\t\t\t\t\t\t pr_wat_clim = mean(pr_wat),\n\t\t\t\t\t\t\t\t\t pr_wat_sd = sd(pr_wat))\n\nsave(monthly_mean_Z_PR_WAT, file = \"Processed_Data/monthly_mean_Z_PR_WAT.RData\")\n\nsource('R/GetSeasonDate.R')\n# load xtrs from the CPC calcs\nload(file = 'Processed_Data/CPC_mod_cell_RIP.RData')\n\nRIP_dates = CPC_mod_cell_RIP %>% dplyr::filter(RIP == 1) %>%\n\tdplyr::select(date) %>%\n\tdata.frame() %>%\n\tdplyr::filter(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\tdate < \"2006-01-01\")\n\nsubset.params = list(dates = RIP_dates$date,\n\t\t\t\t\t\t\t\t\t\t lags = c(-4,-3,-2,-1,0,1), # how many days prior to the event do you want?\n\t\t\t\t\t\t\t\t\t\t all_dates = as.Date(as.Date(\"1950-01-01\"):as.Date(\"2005-12-31\"),origin=\"1970-01-01\"))\n\n# calculate the mean value of relevant days \nRIP_event = dat %>% dplyr::filter(date %in% c(subset.params$dates + days(subset.params$lags[1]))) %>%\n\tas.data.table() %>%\n\tdplyr::mutate(lag = subset.params$lags[1])\n\n\nfor(llags in 2:length(subset.params$lags)){\n\tRIP_event0 = dat %>% dplyr::filter(date %in% c(RIP_dates$date + days(subset.params$lags[llags]))) %>%\n\t\tas.data.table() %>%\n\t\tdplyr::mutate(lag = subset.params$lags[llags])\n\tRIP_event = rbind(RIP_event,RIP_event0)\n\tprint(llags)\n}\n\nRIP_event = RIP_event %>% dplyr::mutate(month = month(date))\n\nsig.level = 0.8\nRIP_event_anom = merge(RIP_event, monthly_mean_Z_PR_WAT, by = c(\"lat\", \"lon\", \"month\")) %>%\n\tdplyr::mutate(z_700_anom = z_700 - z_700_clim,\n\t\t\t\t\t\t\t\tpr_wat_anom = pr_wat - pr_wat_clim,\n\t\t\t\t\t\t\t\tz_700_positive = ifelse(z_700_anom > 0, 1, 0))\n\n\nRIP_event_anom = RIP_event_anom %>% dplyr::group_by(lon,lat,season,lag) %>%\n\tdplyr::summarise(z_700_anom = mean(z_700_anom),\n\t\t\t\t\t\t\t\t\t pr_wat_anom = mean(pr_wat_anom),\n\t\t\t\t\t\t\t\t\t prop.pos = mean(z_700_positive))\n\nRIP_event_anom = RIP_event_anom %>% dplyr::mutate(z_700_sig = ifelse(z_700_anom > 0 & prop.pos > sig.level,1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ifelse(z_700_anom < 0 & prop.pos < (1-sig.level),1,0)))\n\n\nstate <- data.frame(map(\"state\", plot=FALSE)[c(\"x\",\"y\")])\nworld <- data.frame(map(\"world\", plot=FALSE)[c(\"x\",\"y\")])\nsource(\"R/load_basin_boundary.R\")\n\n# just plot the \"MAM\" composites\nsubset = RIP_event_anom[RIP_event_anom$season == \"MAM\",]\n\nz_700.lim = max(-floor(min(subset$z_700_anom)/2)*2,ceiling(max(subset$z_700_anom)/2)*2)\n\n\npdf(paste0(\"Final figures/Figure_5.pdf\"), width=10, height=5)\nggplot(data = subset) + \n\tgeom_tile(aes(x = (lon-360),y = lat,fill=(z_700_anom))) + \n\tfacet_wrap(~lag, ncol = 3) +\n\tscale_fill_gradient2(name=expression(paste(Z[700], \" (m)\")),\n\t\t\t\t\t\t\t\t\t\t\t limits = c(-z_700.lim,z_700.lim), \n\t\t\t\t\t\t\t\t\t\t\t midpoint = 0,low=\"blue\", mid = \"white\",  high = \"red\",na.value = \"grey\") +\n\tgeom_point(data = subset[subset$z_700_sig == 1, ], \n\t\t\t\t\t\t aes(x = (lon-360),y = lat),shape = \"X\", size = 1) +\n\tstat_contour(aes(x = (lon-360),y = lat, z=pr_wat_anom), \n\t\t\t\t\t\t\t breaks = seq(4,20,4), size=0.25, col = \"black\") +\n\tstat_contour(aes(x = (lon-360),y = lat, z=pr_wat_anom), \n\t\t\t\t\t\t\t breaks = seq(-4,-20,-4), size=0.25, col = \"black\", linetype = \"dashed\") +\n\tgeom_path(data=world, aes(x,y,z=NULL), size = 0.25) + \n\tscale_y_continuous(limits = c(10,60)) +\n\tlabs(x = \"Longitude\", y = \"Latitude\") +\n\tscale_x_continuous(limits = c(-155,-45), breaks = c(-140, -100, -60)) +\n\ttheme_bw() +\n\tcoord_map(\"ortho\", orientation=c(40, -95, 0)) +\n\tgeom_polygon(aes(x = long, y = lat, group = group), alpha = 0.5, data = basin_points)\ndev.off()\n\n########################################\n############### Figure S3 ##############\n########################################\nrm(list = ls())\nload(file = 'Processed_Data/pr_CPC_IP_US.RData')\nload(file = 'Processed_Data/pr_mod_IP_US.RData')\n\npr_mod_IP$lat = as.numeric(as.character(pr_mod_IP$lat))\npr_mod_IP$lon = as.numeric(as.character(pr_mod_IP$lon))\npr_CPC_IP$lat = as.numeric(as.character(pr_CPC_IP$lat))\npr_CPC_IP$lon = as.numeric(as.character(pr_CPC_IP$lon))\n\n\npr_mod_obs_IP = merge(rbind(pr_mod_IP, pr_CPC_IP), pr_CPC_IP[,c('season','lat', 'lon', 'mean_pr_percentile')], by = c('season','lat', 'lon')) %>%\n\tdplyr::mutate(delta_pr_percentile = ifelse(model != \"OBS\", mean_pr_percentile.x - mean_pr_percentile.y,mean_pr_percentile.y),\n\t\t\t\t\t\t\t\tmodel_lab = ifelse(model != \"OBS\", paste0(model, \"- OBS\"), \"OBS\"))\n\nstate <- data.frame(map(\"state\", plot=FALSE)[c(\"x\",\"y\")])\nworld <- data.frame(map(\"world\", plot=FALSE)[c(\"x\",\"y\")])\nsource(\"R/load_basin_boundary.R\")\n\nload(file = 'Processed_Data/pr_box.RData')\n\npr_mod_obs_IP_box = pr_mod_obs_IP %>% dplyr::filter(lat >= pr_box$lat.min,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat <= pr_box$lat.max,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlon >= pr_box$lon.min,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlon <= pr_box$lon.max)\n\nsubset = pr_mod_obs_IP[pr_mod_obs_IP$season == \"MAM\",]\n\npdf('Final figures/Figure_S3.pdf', height = 7, width = 12)\nggplot(data = subset) + \n\tgeom_tile(aes(x = (lon-360),y = lat,fill=(mean_pr_percentile.x))) + \n\tscale_fill_gradient(name=expression(paste(P, \" percentile\")),\n\t\t\t\t\t\t\t\t\t\t\tlimits = c(0.75,0.9), \n\t\t\t\t\t\t\t\t\t\t\tlow=\"white\", high = \"black\", na.value = \"white\") +\n\tgeom_rect(data = pr_box,\n\t\t\t\t\t\taes(xmin=lon.min-360, xmax=lon.max-360, ymin=lat.min, ymax=lat.max), \n\t\t\t\t\t\tcol = \"black\", fill = \"transparent\", alpha=0, size = 1) +\n\tgeom_path(data=world, aes(x,y,z=NULL), size = 0.25) + \n\tgeom_path(data=state, aes(x,y,z=NULL), size = 0.25) + \n\tscale_y_continuous(limits = c(25,50)) +\n\tlabs(x = \"Longitude\", y = \"Latitude\") +\n\tscale_x_continuous(limits = c(-100,-65)) +\n\ttheme_bw() +\n\tcoord_map(\"ortho\", orientation=c(40, -80, 0)) +\n\tgeom_polygon(aes(x = long, y = lat, group = group), alpha = 0.25, data = basin_points) +\n\tfacet_wrap(~model) +\n\ttheme(legend.position = \"right\")\ndev.off()\n\n########################################\n############### Figure S4 ##############\n########################################\n# now move onto RIP -- same day\nrm(list = ls())\nload(file = 'Processed_Data/pr_CPC_RIP_same_day.RData')\nload(file = 'Processed_Data/pr_mod_RIP_same_day.RData')\n\npr_mod_RIP_same_day$lat = as.numeric(as.character(pr_mod_RIP_same_day$lat))\npr_mod_RIP_same_day$lon = as.numeric(as.character(pr_mod_RIP_same_day$lon))\npr_CPC_RIP_same_day$lat = as.numeric(as.character(pr_CPC_RIP_same_day$lat))\npr_CPC_RIP_same_day$lon = as.numeric(as.character(pr_CPC_RIP_same_day$lon))\n\n\npr_CPC_mod_RIP_same_day = merge(rbind(pr_mod_RIP_same_day, pr_CPC_RIP_same_day), pr_CPC_RIP_same_day[,c('season','lat', 'lon', 'mean_pr_percentile')], by = c('season','lat', 'lon')) %>%\n\tdplyr::mutate(delta_pr_percentile = ifelse(model != \"OBS\", mean_pr_percentile.x - mean_pr_percentile.y,mean_pr_percentile.y),\n\t\t\t\t\t\t\t\tmodel_lab = ifelse(model != \"OBS\", paste0(model, \" - OBS\"), \"OBS\"))\n\nstate <- data.frame(map(\"state\", plot=FALSE)[c(\"x\",\"y\")])\nworld <- data.frame(map(\"world\", plot=FALSE)[c(\"x\",\"y\")])\nsource(\"R/load_basin_boundary.R\")\n\nload(file = 'Processed_Data/pr_box.RData')\n\nsubset = pr_CPC_mod_RIP_same_day[pr_CPC_mod_RIP_same_day$season == \"MAM\",]\n\npdf('Final figures/Figure_S4.pdf', height = 7, width = 12)\nggplot(data = subset[subset$model != \"OBS\", ]) + \n\tgeom_tile(aes(x = (lon-360),y = lat,fill=(delta_pr_percentile))) + \n\tscale_fill_gradient2(name=expression(atop(P[GCM] ~ \" percentile -\",P[OBS] ~ \" percentile\")),\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t limits = c(-0.27,0.27), \n\t\t\t\t\t\t\t\t\t\t\t midpoint = 0,low=\"blue\", mid = \"white\",  high = \"red\",na.value = \"grey\") +\n\tgeom_rect(data = pr_box,\n\t\t\t\t\t\taes(xmin=lon.min-360, xmax=lon.max-360, ymin=lat.min, ymax=lat.max), \n\t\t\t\t\t\tcol = \"black\", fill = \"transparent\", alpha=0, size = 1) +\n\tgeom_path(data=world, aes(x,y,z=NULL), size = 0.25) + \n\tgeom_path(data=state, aes(x,y,z=NULL), size = 0.25) + \n\tscale_y_continuous(limits = c(25,50)) +\n\tlabs(x = \"Longitude\", y = \"Latitude\") +\n\tscale_x_continuous(limits = c(-100,-65)) +\n\ttheme_bw() +\n\tstat_contour(aes(x = (lon-360),y = lat, z=delta_pr_percentile, colour = ..level..), \n\t\t\t\t\t\t\t breaks = seq(0.25,1,0.25), size=1, col = \"black\") +\n\tstat_contour(aes(x = (lon-360),y = lat, z=delta_pr_percentile, colour = ..level..), \n\t\t\t\t\t\t\t breaks = seq(-0.25,-1,-0.25), size=1, col = \"black\", linetype = \"dashed\") +\n\tcoord_map(\"ortho\", orientation=c(40, -80, 0)) +\n\tgeom_polygon(aes(x = long, y = lat, group = group), alpha = 0.5, data = basin_points) +\n\tfacet_wrap(~model_lab, nrow = 2) +\n\ttheme(legend.position = \"right\")\ndev.off()\n\n\n########################################\n############### Figure S5 ##############\n########################################\n# lets look at the example from Mar 1964\n\nrm(list = ls())\n# now let's calculate anomalies and plot them\nload('Processed_Data/PR_WAT.RData')\nload('Processed_Data/Z_700.RData')\n\n# just look at the western hemisphere\nPR_WAT = PR_WAT %>% dplyr::filter(lon > 180)\nZ_700 = Z_700 %>% dplyr::filter(lon > 180)\n\ndat = cbind(Z_700, PR_WAT$pr_wat)\ncolnames(dat)[6] = \"pr_wat\"\n\nrm(Z_700,PR_WAT)\n\nload(file = \"Processed_Data/monthly_mean_Z_PR_WAT.RData\")\n\ndat = dat %>% dplyr::mutate(month = month(date))\n\nmar_1964 = dat %>% dplyr::filter(year(date) == 1964 &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \tmonth == 3)\n\nmar_1964_anom = merge(mar_1964, monthly_mean_Z_PR_WAT, by = c(\"lat\", \"lon\", \"month\")) %>%\n\tdplyr::mutate(z_700_anom = z_700 - z_700_clim,\n\t\t\t\t\t\t\t\tpr_wat_anom = pr_wat - pr_wat_clim)\n\n# mark the days when an RIP occurred\nload(file = 'Processed_Data/CPC_mod_cell_RIP.RData')\nRIP_dates = CPC_mod_cell_RIP %>% dplyr::filter(RIP == 1) %>%\n\tdplyr::select(date) %>%\n\tdata.frame() %>%\n\tdplyr::filter(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\tdate < \"2006-01-01\")\n\nmar_1964_anom = mar_1964_anom %>% dplyr::mutate(date_marked = ifelse(date %in% c(RIP_dates$date),paste0(date,\"***\"),as.character(date)))\n\nstate <- data.frame(map(\"state\", plot=FALSE)[c(\"x\",\"y\")])\nworld <- data.frame(map(\"world\", plot=FALSE)[c(\"x\",\"y\")])\nsource(\"R/load_basin_boundary.R\")\n\nsubset = mar_1964_anom %>% dplyr::filter(date > \"1964-03-02\" & \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \tdate < \"1964-03-12\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \tlat > 10 & lat < 60)\n\nz_700.lim = max(-floor(min(subset$z_700_anom)/2)*2,ceiling(max(subset$z_700_anom)/2)*2)\n\npdf(\"Final figures/Figure_S5.pdf\", width=10, height=7.5)\nggplot(data = subset) + \n\tgeom_tile(aes(x = (lon-360),y = lat,fill=(z_700_anom))) + \n\tfacet_wrap(~date_marked, ncol = 3) +\n\tscale_fill_gradient2(name=expression(paste(Z[700], \" (m)\")),\n\t\t\t\t\t\t\t\t\t\t\t limits = c(-z_700.lim,z_700.lim), \n\t\t\t\t\t\t\t\t\t\t\t midpoint = 0,low=\"blue\", mid = \"white\",  high = \"red\",na.value = \"grey\") +\n\tstat_contour(aes(x = (lon-360),y = lat, z=pr_wat_anom), \n\t\t\t\t\t\t\t breaks = seq(4,24,4), size=0.25, col = \"black\") +\n\tstat_contour(aes(x = (lon-360),y = lat, z=pr_wat_anom), \n\t\t\t\t\t\t\t breaks = seq(-4,-24,-4), size=0.25, col = \"black\", linetype = \"dashed\") +\n\tgeom_path(data=world, aes(x,y,z=NULL), size = 0.25) + \n\tscale_y_continuous(limits = c(10,60)) +\n\tlabs(x = \"Longitude\", y = \"Latitude\") +\n\tscale_x_continuous(limits = c(-155,-45), breaks = c(-140, -100, -60)) +\n\ttheme_bw() +\n\tcoord_map(\"ortho\", orientation=c(40, -95, 0)) +\n\tgeom_polygon(aes(x = long, y = lat, group = group), alpha = 0.5, data = basin_points)\ndev.off()\n\n\n########################################\n############### Figure 6 ###############\n########################################\n\n# now we compare the GCM Z_700 to the OBS Z_700 associated with RIP days\nrm(list = ls())\nsource('R/GetSeasonDate.R')\n\n# load xtrs from the CPC calcs\nload(file = 'Processed_Data/CPC_mod_cell_RIP.RData')\n\nRIP_dates = CPC_mod_cell_RIP %>% dplyr::filter(RIP == 1) %>%\n\tdplyr::select(date) %>%\n\tdata.frame() %>%\n\tdplyr::filter(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\tdate < \"2006-01-01\")\n\nload('Processed_Data/Z_700.RData')\n\n# just look at pat of the western hemisphere\nZ_700 = Z_700 %>% dplyr::filter(lon > 205 & lon < 315)\n\nmonthly_mean_Z = Z_700 %>% dplyr::mutate(month = month(date)) %>%\n\tdplyr::group_by(lon,lat,month) %>%\n\tdplyr::summarise(z_700_clim = mean(z_700),\n\t\t\t\t\t\t\t\t\t z_700_sd = sd(z_700))\n\nsave(monthly_mean_Z, file = \"Processed_Data/monthly_mean_Z.RData\")\n\n# calculate the mean value of relevant days \nRIP_event = Z_700 %>% dplyr::filter(date %in% c(RIP_dates$date)) %>%\n\tas.data.table() \n\nRIP_event = RIP_event %>% dplyr::mutate(month = month(date))\n\nsig.level = 0.8\nRIP_event_anom = merge(RIP_event, monthly_mean_Z, by = c(\"lat\", \"lon\", \"month\")) %>%\n\tdplyr::mutate(z_700_anom = z_700 - z_700_clim,\n\t\t\t\t\t\t\t\tz_700_positive = ifelse(z_700_anom > 0, 1, 0))\n\n\nRIP_event_anom = RIP_event_anom %>% dplyr::group_by(lon,lat,season) %>%\n\tdplyr::summarise(z_700_anom = mean(z_700_anom),\n\t\t\t\t\t\t\t\t\t z_700 = mean(z_700),\n\t\t\t\t\t\t\t\t\t prop.pos = mean(z_700_positive))\n\nRIP_event_anom_obs = RIP_event_anom %>% dplyr::mutate(z_700_sig = ifelse(z_700_anom > 0 & prop.pos > sig.level,1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ifelse(z_700_anom < 0 & prop.pos < (1-sig.level),1,0)))\n\nRIP_event_anom_obs$model = \"OBS\"\n\n\n# load xtrs from the mod runs\nload(file = 'Processed_Data/mod_RIP.RData')\n\nRIP_dates_mod = mod_RIP %>% dplyr::filter(RIP == 1) %>%\n\tdplyr::select(date, season, model) %>%\n\tdata.frame() %>%\n\tdplyr::filter(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\tdate < \"2006-01-01\")\n\n\n# now let's calculate anomalies and plot them for the ta_700\nload(file = 'Processed_Data/Z_700_mod_field.RData')\n\nZ_700_mod_field = Z_700_mod_field %>% dplyr::mutate(season = GetSeasonDate(date))\n\ncolnames(Z_700_mod_field)[5] = \"z_700\"\n\nZ_700_mod_field = Z_700_mod_field %>% dplyr::mutate(month = month(date),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel = paste0(\"GCM \",model))\n\nmonthly_mean_Z_mod = Z_700_mod_field %>% dplyr::group_by(lon,lat,month,model) %>%\n\tdplyr::summarise(z_700_clim = mean(z_700),\n\t\t\t\t\t\t\t\t\t z_700_sd = sd(z_700))\n\nsave(monthly_mean_Z_mod, file = \"Processed_Data/monthly_mean_ZG_MOD.RData\")\n\nRIP_event_mod = Z_700_mod_field %>% dplyr::filter(date %in% c(RIP_dates_mod$date)) %>%\n\tas.data.table()\n\n# now exclude the models that did not have RIPs on days when another model had a RIP\nRIP_dates_mod$include = 1\nRIP_dates_mod = RIP_dates_mod %>% dplyr::mutate(model = paste0(\"GCM \",model))\n\nRIP_event_mod_subset = merge(RIP_event_mod,RIP_dates_mod, by = c(\"date\",\"model\",\"season\"), all.x = TRUE)\n\nRIP_event_mod = merge(RIP_event_mod_subset[!is.na(RIP_event_mod_subset$include),], monthly_mean_Z_mod, by = c(\"lat\", \"lon\", \"month\",\"model\")) %>%\n\tdplyr::mutate(z_700_anom = z_700 - z_700_clim,\n\t\t\t\t\t\t\t\tz_700_positive = ifelse(z_700_anom > 0, 1, 0))\n\n\nRIP_event_mod_anom = RIP_event_mod %>% dplyr::group_by(lon,lat,season,model) %>%\n\tdplyr::summarise(z_700_anom = mean(z_700_anom),\n\t\t\t\t\t\t\t\t\t z_700 = mean(z_700),\n\t\t\t\t\t\t\t\t\t prop.pos = mean(z_700_positive))\n\nsig.level = 0.8\nRIP_event_mod_anom = RIP_event_mod_anom %>% dplyr::mutate(z_700_sig = ifelse(z_700_anom > 0 & prop.pos > sig.level,1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ifelse(z_700_anom < 0 & prop.pos < (1-sig.level),1,0)))\nRIP_event_anom_all = rbind(RIP_event_mod_anom, RIP_event_anom_obs)\n\nstate <- data.frame(map(\"state\", plot=FALSE)[c(\"x\",\"y\")])\nworld <- data.frame(map(\"world\", plot=FALSE)[c(\"x\",\"y\")])\nsource(\"R/load_basin_boundary.R\")\n\n# define a blank list of plots\nplots = list()\n\nfor(mmodel in 1:length(unique(RIP_event_anom_all$model))){\n\tsubset0 = RIP_event_anom_all[RIP_event_anom_all$model == unique(RIP_event_anom_all$model)[mmodel],]\n\tsubset = subset0[subset0$season == \"MAM\",]\n\t\n\tplots[[mmodel]] =\n\t\tggplot(data = subset) + \n\t\tgeom_tile(aes(x = (lon-360),y = lat,fill=(z_700))) + \n\t\tscale_fill_gradient2(name=expression(paste(Z[700], \" (m)\")),\n\t\t\t\t\t\t\t\t\t\t\t\t limits = c(2800,3200),\n\t\t\t\t\t\t\t\t\t\t\t\t midpoint = 3000,low=\"blue\", mid = \"white\",  high = \"red\",na.value = \"grey\",\n\t\t\t\t\t\t\t\t\t\t\t\t guide = FALSE) +\n\t\tgeom_point(data = subset[subset$z_700_sig == 1, ], \n\t\t\t\t\t\t\t aes(x = (lon-360),y = lat),shape = \"X\", size = 1.5, alpha = 0.6) +\n\t\tstat_contour(aes(x = (lon-360),y = lat, z=z_700_anom), \n\t\t\t\t\t\t\t\t breaks = seq(15,200,15), size=0.35, col = \"black\") +\n\t\tstat_contour(aes(x = (lon-360),y = lat, z=z_700_anom), \n\t\t\t\t\t\t\t\t breaks = seq(-15,-200,-15), size=0.35, col = \"black\", linetype = \"dashed\") +\n\t\tgeom_path(data=world, aes(x,y,z=NULL), size = 0.2, alpha = 0.6) + \n\t\tscale_y_continuous(limits = c(10,60)) +\n\t\tlabs(x = \"Longitude\", y = \"Latitude\") +\n\t\tscale_x_continuous(limits = c(-155,-45), breaks = c(-140, -100, -60))  +\n\t\ttheme_bw() +\n\t\tcoord_map(\"ortho\", orientation=c(40, -95, 0)) +\n\t\tgeom_polygon(aes(x = long, y = lat, group = group), alpha = 0.5, data = basin_points) +\n\t\tggtitle(unique(RIP_event_anom_all$model)[mmodel])\n\t\n}\n\n\n# Function to extract legend (from: http://stackoverflow.com/questions/11883844/inserting-a-table-under-the-legend-in-a-ggplot2-histogram)\nsource('R/g_legend.R')\n\nplot_legend <- g_legend(ggplot(data = subset) + \n\t\t\t\t\t\t\t\t\t\t\t\t\tgeom_tile(aes(x = (lon-360),y = lat,fill=(z_700))) + \n\t\t\t\t\t\t\t\t\t\t\t\t\tscale_fill_gradient2(name=expression(paste(Z[700], \" (m)\")),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t limits = c(2800,3200),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t midpoint = 3000,low=\"blue\", mid = \"white\",  high = \"red\",na.value = \"grey\") +\n\t\t\t\t\t\t\t\t\t\t\t\t\tgeom_point(data = subset[subset$z_700_sig == 1, ], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t aes(x = (lon-360),y = lat),shape = \"X\", size = 1.5, alpha = 0.6) +\n\t\t\t\t\t\t\t\t\t\t\t\t\tstat_contour(aes(x = (lon-360),y = lat, z=z_700_anom), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t breaks = seq(15,200,15), size=0.25, col = \"black\") +\n\t\t\t\t\t\t\t\t\t\t\t\t\tstat_contour(aes(x = (lon-360),y = lat, z=z_700_anom), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t breaks = seq(-15,-200,-15), size=0.4, col = \"black\", linetype = \"dashed\") +\n\t\t\t\t\t\t\t\t\t\t\t\t\tgeom_path(data=world, aes(x,y,z=NULL), size = 0.2, alpha = 0.6) + \n\t\t\t\t\t\t\t\t\t\t\t\t\tscale_y_continuous(limits = c(15,60)) +\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabs(x = \"Longitude\", y = \"Latitude\") +\n\t\t\t\t\t\t\t\t\t\t\t\t\tscale_x_continuous(limits = c(-155,-45)) +\n\t\t\t\t\t\t\t\t\t\t\t\t\ttheme_bw() +\n\t\t\t\t\t\t\t\t\t\t\t\t\tcoord_map(\"ortho\", orientation=c(40, -95, 0)) +\n\t\t\t\t\t\t\t\t\t\t\t\t\tgeom_polygon(aes(x = long, y = lat, group = group), alpha = 0.5, data = basin_points))\n\n\n\nlay <- rbind(c(1,1,2,2,3,3,7),\n\t\t\t\t\t\t c(4,4,5,5,6,6,7))\n\n\npdf(\"Final figures/Figure_6.pdf\", width=10, height=5)\ngrid.arrange(plots[[1]],plots[[2]],plots[[3]],\n\t\t\t\t\t\t plots[[4]],plots[[5]],plots[[6]],\n\t\t\t\t\t\t plot_legend, layout_matrix = lay)\ndev.off()\n\n\n########################################\n############### Figure S6 ##############\n########################################\nrm(list = ls())\nlibrary(\"akima\")\nsource('R/GetSeasonDate.R')\nload(file = 'Processed_Data/Z_700_mod_field.RData')\n\nZ_700_mod_field = Z_700_mod_field %>% dplyr::mutate(season = GetSeasonDate(date))\n\nZ_700_mod_field = Z_700_mod_field %>% dplyr::filter(season == 'MAM')\n\ncolnames(Z_700_mod_field)[5] = \"z_700\"\n\nZ_700_mod_field = Z_700_mod_field %>% dplyr::mutate(month = month(date),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel = paste0(\"GCM \",model))\n\nseason_mean_sd_mod = Z_700_mod_field %>% dplyr::group_by(lon,lat,model) %>%\n\tdplyr::summarise(z_700_clim = mean(z_700),\n\t\t\t\t\t\t\t\t\t z_700_sd = sd(z_700))\n\nseason_mean_sd_mod_long = melt(season_mean_sd_mod, id.vars = c('lon', 'lat', 'model'))\n\n\n\nstate <- data.frame(map(\"state\", plot=FALSE)[c(\"x\",\"y\")])\nworld <- data.frame(map(\"world\", plot=FALSE)[c(\"x\",\"y\")])\nsource(\"R/load_basin_boundary.R\")\n\n# now load the observed data\nload('Processed_Data/Z_700.RData')\n\nZ_700 = Z_700 %>% dplyr::mutate(season = GetSeasonDate(date))\n\nZ_700 = Z_700[Z_700$season %in% c('MAM'),]\n\ncolnames(Z_700)[5] = \"z_700\"\n\nZ_700 = Z_700 %>% dplyr::mutate(month = month(date))\n\nZ_700_coarse = Z_700 %>% dplyr::ungroup() %>%\n\tdplyr::mutate(lat = 4*round(lat/4),\n\t\t\t\t\t\t\t\tlon = 4*round(lon/4)) %>%\n\tdplyr::group_by(lon, lat) %>%\n\tdplyr::summarise(z_700_clim = mean(z_700),\n\t\t\t\t\t\t\t\t\t z_700_sd = sd(z_700))\n\nseason_mean_sd_obs = Z_700 %>% dplyr::group_by(lon,lat) %>%\n\tdplyr::summarise(z_700_clim = mean(z_700),\n\t\t\t\t\t\t\t\t\t z_700_sd = sd(z_700))\n\nseason_mean_sd_obs$model = \"NCEP/NCAR\"\n\nseason_mean_sd_all = rbind(season_mean_sd_mod, season_mean_sd_obs)\n\nnew_lat = seq(16, 60, by = 4)\nnew_lon = seq(208, 312, by = 4)\nseason_mean_sd_all_interp = list()\nfor(mm in 1:length(unique(season_mean_sd_all$model))){\n\tmmodel = \tunique(season_mean_sd_all$model)[mm]\n\t\n\tseason_mean_sd_all_interp[[mm]] = data.frame(model = mmodel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t lat = rep(new_lat, each = length(new_lon)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t lon = rep(new_lon, length(new_lat)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t z_700_sd = c(interp(x = season_mean_sd_all[season_mean_sd_all$model == mmodel,]$lon,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\ty = season_mean_sd_all[season_mean_sd_all$model == mmodel,]$lat,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\tz = season_mean_sd_all[season_mean_sd_all$model == mmodel,]$z_700_sd,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\txo = new_lon,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\tyo = new_lat)$z))\n}\n\nseason_mean_sd_mod_interp = do.call(\"rbind\", season_mean_sd_all_interp[unique(season_mean_sd_all$model) != \"NCEP/NCAR\"])\nseason_mean_sd_obs_interp = do.call(\"rbind\", season_mean_sd_all_interp[unique(season_mean_sd_all$model) == \"NCEP/NCAR\"])\n\nplot_data = merge(season_mean_sd_obs_interp,season_mean_sd_mod_interp, by = c(\"lon\", \"lat\")) %>%\n\tdplyr::mutate(z_700_sd = z_700_sd.y - z_700_sd.x,\n\t\t\t\t\t\t\t\tmodel = paste0(model.y,\" - \", model.x))\n\n\npdf(\"Final figures/Figure_S6.pdf\", width=10, height=5)\nggplot(data = plot_data) + \n\tgeom_tile(aes(x = (lon-360),y = lat,fill=(z_700_sd))) + \n\tfacet_wrap(~model, ncol = 3) +\n\tscale_fill_gradient2(name=expression(paste(Delta, sigma[Z[700]], \" (m)\")),\n\t\t\t\t\t\t\t\t\t\t\t limits = c(-22,22),\n\t\t\t\t\t\t\t\t\t\t\t midpoint = 0,low=\"blue\", mid = \"white\",  high = \"red\",na.value = \"grey\") +\n\tgeom_path(data=world, aes(x,y,z=NULL), size = 0.2, alpha = 0.6) + \n\tgeom_path(data=state, aes(x,y,z=NULL), size = 0.2, alpha = 0.6) + \n\tscale_y_continuous(limits = c(15,60)) +\n\tlabs(x = \"Longitude\", y = \"Latitude\") +\n\tscale_x_continuous(limits = c(-145,-45), breaks = c(-140, -100, -60))  +\n\ttheme_bw() +\n\tcoord_map(\"ortho\", orientation=c(40, -95, 0)) +\n\tgeom_polygon(aes(x = long, y = lat, group = group), alpha = 0.5, data = basin_points)\ndev.off()\n\n\n########################################\n############### Figure S7 ##############\n########################################\n\n# now let's load the model zonal wind -- monthly data\nrm(list = ls())\nsource('R/GetSeasonDate.R')\n\n# now let's plot the average jet in the reanalysis and the models after making the \n# resolution 4 deg by 4 deg\nrm(list = ls())\nsource('R/GetSeasonDate.R')\n\nload(file = 'Processed_Data/U_200_mod_MAM.RData')\nload(file = 'Processed_Data/U_200_MAM.RData')\n\nU_200_mod_MAM = U_200_mod_MAM %>% dplyr::mutate(model = paste0(\"GCM \",model))\nU_200_MAM$model = \"NCEP/NCAR\"\n\nU_200_MAM_all = rbind(U_200_mod_MAM, U_200_MAM)  %>%\n\tdplyr::group_by(lon, lat, model) %>%\n\tdplyr::summarise(u_200_clim = mean(u_200))\n\nworld <- data.frame(map(\"world\", plot=FALSE)[c(\"x\",\"y\")])\nsource(\"R/load_basin_boundary.R\")\n\n# define a blank list of plots\nplots = list()\n\nfor(mmodel in 1:length(unique(U_200_MAM_all$model))){\n\tsubset = U_200_MAM_all[U_200_MAM_all$model == unique(U_200_MAM_all$model)[mmodel],]\n\t\n\tplots[[mmodel]] = \n\t\tggplot(data = subset) + \n\t\tgeom_tile(aes(x = (lon-360),y = lat,fill=(u_200_clim))) +\n\t\tfacet_wrap(~model, ncol = 3) +\n\t\tscale_fill_gradient2(name=expression(paste(U[200], \" (m/s)\")),\n\t\t\t\t\t\t\t\t\t\t\t\t limits = c(0,40),\n\t\t\t\t\t\t\t\t\t\t\t\t midpoint = 20,low=\"blue\", mid = \"green\",  high = \"red\",na.value = \"grey\",\n\t\t\t\t\t\t\t\t\t\t\t\t guide = FALSE) +\n\t\tstat_contour(aes(x = (lon-360),y = lat, z=u_200_clim),\n\t\t\t\t\t\t\t\t breaks = seq(15,45,10), size=0.35, col = \"black\") +\n\t\tgeom_path(data=world, aes(x,y,z=NULL), size = 0.2, alpha = 0.6) + \n\t\tscale_y_continuous(limits = c(10,60)) +\n\t\tlabs(x = \"Longitude\", y = \"Latitude\") +\n\t\tscale_x_continuous(limits = c(-160,-30)) +\n\t\ttheme_bw() +\n\t\tcoord_map(\"ortho\", orientation=c(40, -90, 0)) +\n\t\tgeom_polygon(aes(x = long, y = lat, group = group), alpha = 0.5, data = basin_points)\n}\n\n\n# Function to extract legend (from: http://stackoverflow.com/questions/11883844/inserting-a-table-under-the-legend-in-a-ggplot2-histogram)\nsource('R/g_legend.R')\n\nplot_legend <- g_legend(\tggplot(data = subset) + \n\t\t\t\t\t\t\t\t\t\t\t\t \tgeom_tile(aes(x = (lon-360),y = lat,fill=(u_200_clim))) +\n\t\t\t\t\t\t\t\t\t\t\t\t \tfacet_wrap(~model, ncol = 3) +\n\t\t\t\t\t\t\t\t\t\t\t\t \tscale_fill_gradient2(name=expression(paste(U[200], \" (m/s)\")),\n\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t limits = c(0,40),\n\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t midpoint = 20,low=\"blue\", mid = \"green\",  high = \"red\",na.value = \"grey\") +\n\t\t\t\t\t\t\t\t\t\t\t\t \tstat_contour(aes(x = (lon-360),y = lat, z=u_200_clim),\n\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t breaks = seq(15,45,10), size=0.35, col = \"black\") +\n\t\t\t\t\t\t\t\t\t\t\t\t \tgeom_path(data=world, aes(x,y,z=NULL), size = 0.2, alpha = 0.6) + \n\t\t\t\t\t\t\t\t\t\t\t\t \tscale_y_continuous(limits = c(10,60)) +\n\t\t\t\t\t\t\t\t\t\t\t\t \tlabs(x = \"Longitude\", y = \"Latitude\") +\n\t\t\t\t\t\t\t\t\t\t\t\t \tscale_x_continuous(limits = c(-160,-30)) +\n\t\t\t\t\t\t\t\t\t\t\t\t \ttheme_bw() +\n\t\t\t\t\t\t\t\t\t\t\t\t \tcoord_map(\"ortho\", orientation=c(40, -90, 0)) +\n\t\t\t\t\t\t\t\t\t\t\t\t \tgeom_polygon(aes(x = long, y = lat, group = group), alpha = 0.5, data = basin_points) +\n\t\t\t\t\t\t\t\t\t\t\t\t \ttheme(legend.position = \"right\"))\n\n\n\nlay <- rbind(c(1,1,2,2,3,3,7),\n\t\t\t\t\t\t c(4,4,5,5,6,6,7))\n\npdf(\"Final figures/Figure_S7.pdf\", width=10, height=5)\ngrid.arrange(plots[[2]],plots[[3]],plots[[4]],\n\t\t\t\t\t\t plots[[5]],plots[[6]],plots[[1]],\n\t\t\t\t\t\t plot_legend, layout_matrix = lay)\ndev.off()\n\n########################################\n############### Figure 7 ###############\n########################################\n# plot dipole locations and the lead up to a RIP\nrm(list = ls())\nload(file = 'Processed_Data/CPC_mod_cell_RIP.RData')\nload(file = 'Processed_Data/EWD.RData')\nload(file = 'Processed_Data/MHC.RData')\n\n# embed the laging and leading values of EWD and MHC_anom\nRIP_EWD_MHC = merge(merge(CPC_mod_cell_RIP,EWD, by = c(\"date\",\"season\")),MHC,by = c(\"date\",\"season\")) %>%\n\tdplyr::select(c(date, season, RIP, EWD, MHC_anom)) %>%\n\tdplyr::mutate(`EWD_-1` = lag(EWD, 1), `MHC_anom_-1` = lag(MHC_anom, 1),\n\t\t\t\t\t\t\t\t`EWD_-2` = lag(EWD, 2), `MHC_anom_-2` = lag(MHC_anom, 2),\n\t\t\t\t\t\t\t\t`EWD_-3` = lag(EWD, 3), `MHC_anom_-3` = lag(MHC_anom, 3),\n\t\t\t\t\t\t\t\t`EWD_-4` = lag(EWD, 4), `MHC_anom_-4` = lag(MHC_anom, 4),\n\t\t\t\t\t\t\t\t`EWD_-5` = lag(EWD, 5), `MHC_anom_-5` = lag(MHC_anom, 5),\n\t\t\t\t\t\t\t\t`EWD_00` = EWD,         `MHC_anom_00` = MHC_anom,\n\t\t\t\t\t\t\t\t`EWD_01` = lead(EWD, 1), `MHC_anom_01` = lead(MHC_anom, 1),\n\t\t\t\t\t\t\t\t`EWD_02` = lead(EWD, 2), `MHC_anom_02` = lead(MHC_anom, 2),\n\t\t\t\t\t\t\t\t`EWD_03` = lead(EWD, 3), `MHC_anom_03` = lead(MHC_anom, 3)) %>%\n\tdplyr::group_by(season) %>%\n\tdplyr::mutate(EWD_mean = mean(EWD, na.rm = TRUE),\n\t\t\t\t\t\t\t\tMHC_anom_mean = mean(MHC_anom, na.rm = TRUE)) %>%\n\tdplyr::select(-c(EWD, MHC_anom))\n\n# only select the RIP days\nRIP_EWD_MHC_long = melt(RIP_EWD_MHC, id.vars = c(\"season\", \"date\", \"RIP\", \"EWD_mean\", \"MHC_anom_mean\")) %>%\n\tdplyr::filter(RIP == 1)\n\n# compute the percentiles of interest\nRIP_EWD_MHC_time = RIP_EWD_MHC_long %>% dplyr::group_by(season, variable) %>%\n\tdplyr::summarise(median = median(value, na.rm = TRUE),\n\t\t\t\t\t\t\t\t\t bot_95th = quantile(value, probs = 0.05, na.rm = TRUE),\n\t\t\t\t\t\t\t\t\t top_95th = quantile(value, probs = 0.95, na.rm = TRUE),\n\t\t\t\t\t\t\t\t\t bot_25th = quantile(value, probs = 0.25, na.rm = TRUE),\n\t\t\t\t\t\t\t\t\t top_25th = quantile(value, probs = 0.75, na.rm = TRUE),\n\t\t\t\t\t\t\t\t\t EWD_mean = mean(EWD_mean),\n\t\t\t\t\t\t\t\t\t MHC_anom_mean = mean(MHC_anom_mean))\n\n# separate 'variable' into 'EWD' or 'MHC' and lag\n\n# function to retain the n chars on the right side\nsubstrRight <- function(x, n){\n\tsubstr(x, nchar(x)-n+1, nchar(x))\n}\n\n# function to retain all chars but the n chars on the right side\nsubstrLeft <- function(x, n){\n\tsubstr(x, 0, nchar(x)-n)\n}\n\nRIP_EWD_MHC_time = RIP_EWD_MHC_time %>% dplyr::mutate(lag = as.numeric(substrRight(as.character(variable),2)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar = substrLeft(as.character(variable),3))\n\nEWD_time =\n\tggplot(RIP_EWD_MHC_time[RIP_EWD_MHC_time$season == \"MAM\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_EWD_MHC_time$var == \"EWD\"\t, ]) +\n\tgeom_ribbon(aes(x = lag, y = median, ymax = top_25th, ymin = bot_25th), alpha = 0.5) +\n\tgeom_ribbon(aes(x = lag, y = median, ymax = top_95th, ymin = bot_95th), alpha = 0.5) +\n\tgeom_line(aes(x = lag, y = median)) +\n\tgeom_hline(aes(yintercept = EWD_mean), linetype = \"dashed\") +\n\tgeom_vline(xintercept = 0, linetype = \"dashed\") +\n\tylab(\"EWD Index\") +\n\txlab(\"Days after RIP event\") +\n\tscale_x_continuous(breaks = c(seq(-5,3,by=1))) +\n\ttheme_bw()\n\nMHC_anom_time =\n\tggplot(RIP_EWD_MHC_time[RIP_EWD_MHC_time$season == \"MAM\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_EWD_MHC_time$var == \"MHC_anom\"\t, ]) +\n\tgeom_ribbon(aes(x = lag, y = median, ymax = top_25th, ymin = bot_25th), alpha = 0.5) +\n\tgeom_ribbon(aes(x = lag, y = median, ymax = top_95th, ymin = bot_95th), alpha = 0.5) +\n\tgeom_line(aes(x = lag, y = median)) +\n\tgeom_hline(yintercept = 0, linetype = \"dashed\") +\n\tgeom_vline(xintercept = 0, linetype = \"dashed\") +\n\tylab(\"MHC Index\") +\n\txlab(\"Days after RIP event\") +\n\tscale_x_continuous(breaks = c(seq(-5,3,by=1))) +\n\ttheme_bw()\n\n\nload(file = 'Processed_Data/EWD_boxes.RData')\nload(file = 'Processed_Data/MHC_box.RData')\n\n# plot the locations of the dipole index\nworld <- data.frame(map(\"world\", plot=FALSE)[c(\"x\",\"y\")])\nstate <- data.frame(map(\"state\", plot=FALSE)[c(\"x\",\"y\")])\n\nsource(\"R/load_basin_boundary.R\")\n\nEWD_MHC_location =\n\tggplot() + \n\tgeom_rect(data = EWD_boxes,\n\t\t\t\t\t\taes(xmin=lon.min, xmax=lon.max, ymin=lat.min, ymax=lat.max, color = factor(box), fill = factor(box)),\n\t\t\t\t\t\talpha=0.5) + \n\tgeom_rect(data = MHC_box,\n\t\t\t\t\t\taes(xmin=lon.min-360, xmax=lon.max-360, ymin=lat.min, ymax=lat.max),\n\t\t\t\t\t\talpha=0.5) +\n\tgeom_path(data=state, aes(x,y,z=NULL), size = 0.25) + \n\tgeom_path(data=world, aes(x,y,z=NULL), size = 0.25) + \n\tscale_y_continuous(limits = c(20,55)) + \n\txlab(\"lon\") + \n\tylab(\"lat\") +\n\tscale_x_continuous(limits = c(-122,-58)) +\n\ttheme_bw() +\n\tcoord_map(\"ortho\", orientation=c(40, -90, 0)) +\n\tgeom_polygon(aes(x = long, y = lat, group = group), alpha = 0.25, data = basin_points) +\n\ttheme(legend.position=\"none\") +\n\tlabs(x = \"Longitude\", y = \"Latitude\")\n\n# Figure 7\npdf('Final figures/Figure_7.pdf', width = 12, height = 3)\ngrid.arrange(EWD_MHC_location,\n\t\t\t\t\t\t EWD_time,\n\t\t\t\t\t\t MHC_anom_time,\n\t\t\t\t\t\t ncol = 3)\ndev.off()\n\n########################################\n############### Figure 8 ###############\n########################################\n# plot EWD and MHC distributions\nrm(list = ls())\nload(file = 'Processed_Data/CPC_mod_cell_RIP.RData')\nload(file = 'Processed_Data/EWD.RData')\nload(file = 'Processed_Data/MHC.RData')\n\n# embed the laging and leading values of EWD and MHC_anom\nRIP_EWD_MHC_obs = merge(merge(CPC_mod_cell_RIP,EWD, by = c(\"date\",\"season\")),MHC,by = c(\"date\",\"season\")) %>%\n\tdplyr::select(c(date, season, RIP, EWD, MHC_anom))\nRIP_EWD_MHC_obs$model = \"OBS\"\n\nload(file = 'Processed_Data/mod_RIP.RData')\nload(file = 'Processed_Data/EWD_mod.RData')\nload(file = 'Processed_Data/MHC_mod.RData')\n\n# embed the laging and leading values of EWD and MHC_anom\nRIP_EWD_MHC_mod = merge(merge(mod_RIP,EWD_mod, by = c(\"date\",\"season\",\"model\")),MHC_mod,by = c(\"date\",\"season\",\"model\")) %>%\n\tdplyr::select(c(date, season, model, RIP, EWD, MHC_anom))\n\nRIP_EWD_MHC_all = rbind(RIP_EWD_MHC_obs, RIP_EWD_MHC_mod)\n\nRIP_EWD_MHC_all = RIP_EWD_MHC_all %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0))\n\nsave(RIP_EWD_MHC_all, file = 'Processed_Data/RIP_EWD_MHC_all.RData')\n\n# check the correlations for MHC and EWD\ncors = RIP_EWD_MHC_all %>% dplyr::group_by(season,model) %>%\n\tdplyr::summarise(pearson = cor(EWD, MHC_anom, use = \"complete.obs\", method = \"pearson\"),\n\t\t\t\t\t\t\t\t\t spearman = cor(EWD, MHC_anom, use = \"complete.obs\", method = \"spearman\"),\n\t\t\t\t\t\t\t\t\t pearson_lag = cor(EWD, lag(MHC_anom,1), use = \"complete.obs\", method = \"pearson\"),\n\t\t\t\t\t\t\t\t\t spearman_lag = cor(EWD, lag(MHC_anom,1), use = \"complete.obs\", method = \"spearman\"))\n\ncors[cors$season %in% c(\"MAM\"),]\n\n# OUTPUT:\n# Source: local data frame [6 x 6]\n# Groups: season [1]\n# \n# season model   pearson  spearman pearson_lag spearman_lag\n# <chr> <chr>     <dbl>     <dbl>       <dbl>        <dbl>\n#  1    MAM     1 0.4117560 0.4274333   0.3795099    0.3910408\n#  2    MAM     2 0.3766251 0.3838416   0.3335699    0.3363547\n#  3    MAM     3 0.4176295 0.4341362   0.3830847    0.3969970\n#  4    MAM     4 0.3714886 0.3948615   0.3248813    0.3459591\n#  5    MAM     5 0.4380729 0.4560737   0.4189722    0.4290108\n#  6    MAM   OBS 0.3150146 0.3171686   0.3301132    0.3329870\n\n\n# look at the cdfs for the EWD and MHC\nassign(\"EWD_cdf_plot\",\n\t\t\t ggplot() + \n\t\t\t \tstat_ecdf(data = RIP_EWD_MHC_all[RIP_EWD_MHC_all$season %in% c(\"MAM\") & RIP_EWD_MHC_all$model != \"OBS\",], \n\t\t\t \t\t\t\t\t\taes(x = EWD, group = model), linetype = \"dashed\") +\n\t\t\t \tstat_ecdf(data = RIP_EWD_MHC_all[RIP_EWD_MHC_all$season %in% c(\"MAM\") & RIP_EWD_MHC_all$model == \"OBS\",], \n\t\t\t \t\t\t\t\t\taes(x = EWD)) +\n\t\t\t \ttheme(legend.position=\"none\") +\n\t\t\t \txlab(\"EWD Index\") +\n\t\t\t \tylab(\"F(EWD Index)\") +\n\t\t\t \tcoord_cartesian(xlim = c(-250,250)) +\n\t\t\t \ttheme_bw()\n)\n\nassign(\"EWD_cdf_plot_zoom\",\n\t\t\t ggplot() + \n\t\t\t \tstat_ecdf(data = RIP_EWD_MHC_all[RIP_EWD_MHC_all$season %in% c(\"MAM\") & RIP_EWD_MHC_all$model != \"OBS\",], \n\t\t\t \t\t\t\t\t\taes(x = EWD, group = model), linetype = \"dashed\") +\n\t\t\t \tstat_ecdf(data = RIP_EWD_MHC_all[RIP_EWD_MHC_all$season %in% c(\"MAM\") & RIP_EWD_MHC_all$model == \"OBS\",], \n\t\t\t \t\t\t\t\t\taes(x = EWD)) +\n\t\t\t \ttheme(legend.position=\"none\") +\n\t\t\t \txlab(\"EWD Index (upper tail)\") +\n\t\t\t \tylab(\"F(EWD Index)\") +\n\t\t\t \tcoord_cartesian(xlim = c(75,250), ylim = c(0.9,1)) +\n\t\t\t \ttheme_bw()\n)\n\nassign(\"MHC_cdf_plot\",\n\t\t\t ggplot() + \n\t\t\t \tstat_ecdf(data = RIP_EWD_MHC_all[RIP_EWD_MHC_all$season %in% c(\"MAM\") & RIP_EWD_MHC_all$model != \"OBS\",], \n\t\t\t \t\t\t\t\t\taes(x = MHC_anom, group = model), linetype = \"dashed\") +\n\t\t\t \tstat_ecdf(data = RIP_EWD_MHC_all[RIP_EWD_MHC_all$season %in% c(\"MAM\") & RIP_EWD_MHC_all$model == \"OBS\",], \n\t\t\t \t\t\t\t\t\taes(x = MHC_anom)) +\n\t\t\t \ttheme(legend.position=\"none\") +\n\t\t\t \ttheme(legend.position=\"none\") +\n\t\t\t \txlab(\"MHC Index\") +\n\t\t\t \tylab(\"F(MHC Index)\") +\n\t\t\t \tcoord_cartesian(xlim = c(-5,5.2)) +\n\t\t\t \ttheme_bw()\n)\n\n# Figure 8\npdf('Final figures/Figure_8.pdf', width = 11, height = 3)\ngrid.arrange(EWD_cdf_plot,\n\t\t\t\t\t\t EWD_cdf_plot_zoom,\n\t\t\t\t\t\t MHC_cdf_plot,\n\t\t\t\t\t\t nrow = 1)\ndev.off()\n\n\n########################################\n############### Figure 9 ###############\n########################################\n\ntail_dependence_data = data.frame(date = RIP_EWD_MHC_all$date,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tseason = RIP_EWD_MHC_all$season,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel = RIP_EWD_MHC_all$model,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEWD = RIP_EWD_MHC_all$EWD,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMHC_anom = RIP_EWD_MHC_all$MHC_anom)\n\n\n## Tail Dependence Coefficient ##\nsource('R/tdc.R')\nlag.max = 10\ntdc.EWD = tdc.MHC = list()\nfor(llag in 1:lag.max){\n\ttdc.EWD[[llag]] = data.frame(model = unique(tail_dependence_data$model),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t P_0.9 = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t P_0.95 = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t P_0.99 = NA)\n\ttdc.MHC[[llag]] = data.frame(model = unique(tail_dependence_data$model),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t P_0.9 = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t P_0.95 = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t P_0.99 = NA)\n}\n\n\nfor(llag in 1:lag.max){\n\ttmp = tail_dependence_data %>% dplyr::group_by(model) %>%\n\t\tdplyr::mutate(EWD_lag = lag(EWD, llag),\n\t\t\t\t\t\t\t\t\tMHC_anom_lag = lag(MHC_anom, llag))%>%\n\t\tdplyr::filter(season == \"MAM\")\n\t\n\tfor(mmodel in 1:length(unique(tmp$model))){\n\t\tfor(pper in 1:(ncol(tdc.EWD[[llag]])-1)){\n\t\t\ttdc.EWD[[llag]][mmodel,pper+1] = tdc(tmp$EWD[tmp$model == unique(tmp$model)[mmodel]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tmp$EWD_lag[tmp$model == unique(tmp$model)[mmodel]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t p = as.numeric(strsplit(names(tdc.EWD[[llag]])[pper+1], \"_\")[[1]][2]), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t upper = TRUE)\n\t\t\t\n\t\t\ttdc.MHC[[llag]][mmodel,pper+1] = tdc(tmp$MHC_anom[tmp$model == unique(tmp$model)[mmodel]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tmp$MHC_anom_lag[tmp$model == unique(tmp$model)[mmodel]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t p = as.numeric(strsplit(names(tdc.MHC[[llag]])[pper+1], \"_\")[[1]][2]), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t upper = TRUE)\n\t\t}\n\t\t\n\t}\n}\n\ntdc.EWD_long = melt(tdc.EWD)\ncolnames(tdc.EWD_long)[4] = \"lag\"\ntdc.EWD_long$variable = gsub(\"_\", \" = \", as.character(tdc.EWD_long$variable))\n\nEWD_tail_persist = \n\tggplot() +\n\tgeom_line(data = tdc.EWD_long[tdc.EWD_long$model != \"OBS\",],\n\t\t\t\t\t\taes(lag, value*100, group = model), linetype = \"dashed\") +\n\tgeom_line(data = tdc.EWD_long[tdc.EWD_long$model == \"OBS\",],\n\t\t\t\t\t\taes(lag, value*100)) +\n\tfacet_wrap(~variable) + \n\ttheme_bw() +\n\tscale_x_continuous(breaks = c(1:10)) +\n\tlabs(y = expression(Pr(F(EWD[t])~ \">\" ~ P ~ \"|\" ~ F(EWD[t-lag]) ~ \">\" ~ P)))\n\ntdc.MHC_long = melt(tdc.MHC)\ncolnames(tdc.MHC_long)[4] = \"lag\"\ntdc.MHC_long$variable = gsub(\"_\", \" = \", as.character(tdc.MHC_long$variable))\n\nMHC_tail_persist = \n\tggplot() +\n\tgeom_line(data = tdc.MHC_long[tdc.MHC_long$model != \"OBS\",],\n\t\t\t\t\t\taes(lag, value*100, group = model), linetype = \"dashed\") +\n\tgeom_line(data = tdc.MHC_long[tdc.MHC_long$model == \"OBS\",],\n\t\t\t\t\t\taes(lag, value*100)) +\n\tfacet_wrap(~variable) + \n\ttheme_bw() +\n\tscale_x_continuous(breaks = c(1:10)) +\n\tlabs(y = expression(Pr(F(MHC[t])~ \">\" ~ P ~ \"|\" ~ F(MHC[t-lag]) ~ \">\" ~ P)))\n\n# Figure 9\npdf('Final figures/Figure_9.pdf', width = 10, height = 6)\ngrid.arrange(EWD_tail_persist, \n\t\t\t\t\t\t MHC_tail_persist,\n\t\t\t\t\t\t nrow = 2)\ndev.off()\n\n########################################\n############### Figure S8 ##############\n########################################\nrm(list = ls())\nload(file = 'Processed_Data/RIP_EWD_MHC_all.RData')\n\nalpha = 1\nlocfit_fits_MAM = list()\nfor(mm in 1:length(unique(RIP_EWD_MHC_all$model))){\n\t\n\tmmodel = unique(RIP_EWD_MHC_all$model)[mm]\n\tlocfit_data = RIP_EWD_MHC_all %>% dplyr::filter(model == mmodel &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tseason == \"MAM\")\n\t\n\tlocfit_fits_MAM[[mm]] <- locfit(RIP ~ EWD + MHC_anom,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata = locfit_data,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfamily=\"binomial\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talpha = alpha)\n}\nnames(locfit_fits_MAM) = unique(RIP_EWD_MHC_all$model)\n\n\n# now do the same for pooled GCM ensemble members\nlocfit_data = RIP_EWD_MHC_all %>% dplyr::filter(model != \"OBS\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tseason == \"MAM\")\n\nlocfit_fits_ens_MAM <- locfit(RIP ~ EWD + MHC_anom,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata = locfit_data,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfamily=\"binomial\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talpha = alpha)\n\n\n# now interpolate onto a regular grid BELOW !!!!!! dipole -> dipole.std.anom\n\ngrid.size.MHC_anom = 0.75\ngrid.size.EWD = 30\nreg_grid_MAM = \n\texpand.grid(MHC_anom = seq(-9,9, by = grid.size.MHC_anom), \n\t\t\t\t\t\t\tEWD = seq(-300,300, by = grid.size.EWD))\n\n# round to grid.size and find the bins in the regular grid with less than 2 observations\n\nbins_low_count0 = RIP_EWD_MHC_all %>% dplyr::mutate(MHC_anom = grid.size.MHC_anom*round(MHC_anom/(grid.size.MHC_anom)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEWD = grid.size.EWD*(round(EWD/grid.size.EWD))) %>%\n\tdplyr::group_by(model, season, MHC_anom, EWD) %>%\n\tdplyr::summarise(count = length(RIP))\n\n\nall_bins = data.frame(expand.grid(MHC_anom = unique(reg_grid_MAM$MHC_anom), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEWD = unique(reg_grid_MAM$EWD),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel = unique(RIP_EWD_MHC_all$model),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tseason = unique(RIP_EWD_MHC_all$season)),\n\t\t\t\t\t\t\t\t\t\t\tcount = 0)\n\n\nall_bins_count1 = merge(bins_low_count0, all_bins, by = c(\"model\", \"MHC_anom\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"EWD\", \"season\"), all = TRUE) %>%\n\tdplyr::mutate(count = ifelse(is.na(count.x), count.y, count.x),\n\t\t\t\t\t\t\t\tvariable = factor(model))\n\nall_bins_count_ens = all_bins_count1 %>% dplyr::group_by(MHC_anom, EWD, season) %>%\n\tdplyr::summarise(count = min(count)) %>%\n\tdplyr::mutate(variable = \"ENS - OBS\") %>%\n\tdplyr::ungroup()\n\nall_bins_count1 = all_bins_count1 %>% dplyr::select(c(MHC_anom, EWD, season, count, variable))\n\nall_bins_count = rbind(all_bins_count1, all_bins_count_ens)\n\nfor(mm in 1:length(unique(RIP_EWD_MHC_all$model))){\n\treg_grid_MAM[,mm+2] = predict(locfit_fits_MAM[[mm]], newdata = reg_grid_MAM)\n\tcolnames(reg_grid_MAM)[mm+2] = unique(RIP_EWD_MHC_all$model)[mm]\n}\nreg_grid_MAM[,9] = predict(locfit_fits_ens_MAM, newdata = reg_grid_MAM)\ncolnames(reg_grid_MAM)[9] = \"ens\"\n\nreg_grid_MAM = reg_grid_MAM %>% dplyr::mutate(\"ENS - OBS\" = ens - OBS) %>%\n\tdplyr::select(-c(ens))\n\nreg_grid_MAM_long = melt(reg_grid_MAM, id.vars = c(\"MHC_anom\",\"EWD\"))\nreg_grid_MAM_long$season = \"MAM\"\n\n\nreg_grid_MAM_long$model = factor(reg_grid_MAM_long$variable, levels=c(levels(reg_grid_MAM_long$variable)))\n\nobs_mod_plot = \n\tggplot() +\n\tgeom_tile(data = reg_grid_MAM_long[reg_grid_MAM_long$variable != \"ENS - OBS\",],\n\t\t\t\t\t\taes(x = MHC_anom,\n\t\t\t\t\t\t\t\ty = EWD,\n\t\t\t\t\t\t\t\tfill = value)) +\n\tscale_fill_gradient2(name = \"Pr(RIP)\",\n\t\t\t\t\t\t\t\t\t\t\t limits = c(0,0.35), \n\t\t\t\t\t\t\t\t\t\t\t midpoint = 0,low=\"blue\", mid = \"white\",  high = \"red\",na.value = \"green\",\n\t\t\t\t\t\t\t\t\t\t\t breaks = c(0,0.1,0.2,0.3), \n\t\t\t\t\t\t\t\t\t\t\t labels = c(0,0.1,0.2,0.3)) +\n\tgeom_tile(data = all_bins_count[all_bins_count$count < 5 &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tall_bins_count$season %in% c(\"MAM\") &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tall_bins_count$variable %in% unique(reg_grid_MAM_long$variable)[1:6],],\n\t\t\t\t\t\taes(x = MHC_anom,\n\t\t\t\t\t\t\t\ty = EWD),\n\t\t\t\t\t\tfill = \"grey\") +\n\tcoord_cartesian(xlim = c(-5.3,5.3), ylim = c(-235,235)) +\n\tlabs(x = \"MHC Index\", y = \"EWD Index\") +\n\ttheme_bw() +\n\ttheme(legend.position = \"bottom\") +\n\tfacet_wrap( ~ variable, nrow = 2)\n\n\nobs_ens_plot = \n\tggplot() +\n\tgeom_tile(data = reg_grid_MAM_long[reg_grid_MAM_long$variable == \"ENS - OBS\",],\n\t\t\t\t\t\taes(x = MHC_anom,\n\t\t\t\t\t\t\t\ty = EWD,\n\t\t\t\t\t\t\t\tfill = value)) +\n\tscale_fill_gradient2(name = expression(Delta ~ \"Pr(RIP)\"),\n\t\t\t\t\t\t\t\t\t\t\t limits = c(-0.12,0.12), \n\t\t\t\t\t\t\t\t\t\t\t midpoint = 0,low=\"blue\", mid = \"white\",  high = \"red\",na.value = \"green\",\n\t\t\t\t\t\t\t\t\t\t\t breaks = c(-0.1,0,0.1), \n\t\t\t\t\t\t\t\t\t\t\t labels = c(-0.1,0,0.1)) +\n\tgeom_tile(data = all_bins_count[all_bins_count$count < 5 &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tall_bins_count$season %in% c(\"MAM\") &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tall_bins_count$variable == \"ENS - OBS\",],\n\t\t\t\t\t\taes(x = MHC_anom,\n\t\t\t\t\t\t\t\ty = EWD),\n\t\t\t\t\t\tfill = \"grey\") +\n\tcoord_cartesian(xlim = c(-5.3,5.3), ylim = c(-235,235)) +\n\tlabs(x = \"MHC Index\", y = \"EWD Index\") +\n\ttheme_bw() +\n\ttheme(legend.position = \"bottom\") +\n\tfacet_wrap( ~ variable)\n\nlay = rbind(c(1,2))\n\npdf('Final figures/Figure_S8.pdf', height = 5, width = 12)\ngrid.arrange(obs_mod_plot,\n\t\t\t\t\t\t obs_ens_plot,\n\t\t\t\t\t\t ncol = 2,\n\t\t\t\t\t\t layout_matrix = lay)\ndev.off()\n\n\n########################################\n############### Figure 10 ##############\n########################################\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\n# load RIP/EWD/MHC records\nload(file = 'Processed_Data/RIP_EWD_MHC_all.RData')\n\n# add EWD \"+\" indicator and just retain the MAM season\nRIP_EWD_MHC_all_MAM = RIP_EWD_MHC_all %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_lag1 = lag(RIP,1)) %>%\n\tdplyr::filter(season == \"MAM\")\n\n# fit the model on the observations\nRIP_EWD_MHC_mod = glm(RIP ~  MHC_anom : EWD.positive + factor(RIP_lag1) : EWD, \n\t\t\t\t\t\t\t\t\t\t\tdata = RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model == \"OBS\",], family = binomial(link = \"logit\"))\n# RIP_EWD_MHC_mod = glm(RIP ~  MHC_anom : EWD.positive + RIP_lag1 : EWD  + EWD, \n# \t\t\t\t\t\t\t\t\t\t\tdata = RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model == \"OBS\",], family = binomial(link = \"logit\"))\n\nsummary(RIP_EWD_MHC_mod)\n\nn.sims = 25\n\nRIP_EWD_MHC_mod_MAM = RIP_EWD_MHC_all_MAM %>% dplyr::filter(model != \"OBS\") %>%\n\tdplyr::select(-c(RIP, RIP_lag1))\n\n\n# intialize the first RIP_lag1 as 0 for each model for each year\nRIP_EWD_MHC_mod_MAM = RIP_EWD_MHC_mod_MAM %>% dplyr::mutate(RIP_lag1 = ifelse(lubridate::month(date) == 3 & lubridate::day(date) == 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0, NA))\n\nRIP_EWD_MHC_obs_MAM = RIP_EWD_MHC_all_MAM %>% dplyr::filter(model == \"OBS\")\n\n\nRIP_sim_df = data.frame(date = unique(RIP_EWD_MHC_mod_MAM$date),\n\t\t\t\t\t\t\t\t\t\t\t\tmatrix(nrow = nrow(RIP_EWD_MHC_mod_MAM)/5, ncol = n.sims))\n\nRIP_sim\t= list(RIP_sim_df,RIP_sim_df,RIP_sim_df,RIP_sim_df,RIP_sim_df)\nnames(RIP_sim) = unique(RIP_EWD_MHC_mod_MAM$model)\ntime.nowwwww = proc.time()\nset.seed(0)\nfor(nn in 1:n.sims){\n\tfor(mmod in unique(RIP_EWD_MHC_mod_MAM$model)){\n\t\ttmp_data = RIP_EWD_MHC_mod_MAM %>% dplyr::filter(model == mmod)\n\t\tfor(rrow in 1:nrow(tmp_data)){\n\t\t\tRIP_sim[[mmod]][rrow,nn+1] = rbinom(1, 1, prob = predict.glm(RIP_EWD_MHC_mod, newdata = tmp_data[rrow,], type = \"response\"))\n\t\t\ttmp_data[rrow + 1,]$RIP_lag1 = RIP_sim[[mmod]][rrow,nn+1]\n\t\t}\n\t\tprint(paste0(\"model #\", mmod, \" complete (sim #\", nn, \")\"))\n\t}\n}\nproc.time() - time.nowwwww\n\nRIP_sim_df = do.call(\"rbind\", RIP_sim)\n\nRIP_sim_df = RIP_sim_df %>% dplyr::mutate(model = rep(1:5, each = nrow(RIP_sim_df)/5))\n\nRIP_sim_long = melt(RIP_sim_df, id.vars = c(\"date\",\"model\"), variable.name = \"sim\", value.name = \"RIP_sim\")\n\nRIP_sim_by_year = RIP_sim_long %>% dplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(year, sim, model) %>%\n\tdplyr::summarise(RIP_sim = sum(RIP_sim))\n\nRIP_EWD_MHC_obs_year = RIP_EWD_MHC_obs_MAM %>% dplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(year) %>%\n\tdplyr::summarise(RIP = sum(RIP))\n\n# calculate the mean for each member and the full ensemble mean\nRIP_pred_by_year_sim_mean = RIP_sim_long %>% dplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(year, sim, model) %>%\n\tdplyr::summarise(RIP_sim = sum(RIP_sim)) %>%\n\tdplyr::group_by(year, model) %>%\n\tdplyr::summarise(RIP_sim = mean(RIP_sim))\n\nRIP_pred_by_year_ens_mean = RIP_sim_long %>% dplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(year, sim, model) %>%\n\tdplyr::summarise(RIP_sim = sum(RIP_sim)) %>%\n\tdplyr::group_by(year) %>%\n\tdplyr::summarise(RIP_sim = mean(RIP_sim))\n\n\n# Make Figure 10\n\nsource('R/ma.R')\nsmoothing_window = 10\n\nRIP_sim_by_year = RIP_sim_by_year %>% dplyr::group_by(model,sim) %>%\n\tdplyr::mutate(RIP_sim_smooth = ma(RIP_sim, smoothing_window))\n\nRIP_pred_by_year_sim_mean = RIP_pred_by_year_sim_mean %>% dplyr::group_by(model) %>%\n\tdplyr::mutate(RIP_sim_smooth = ma(RIP_sim, smoothing_window))\n\nRIP_EWD_MHC_obs_year = RIP_EWD_MHC_obs_year %>% dplyr::mutate(RIP_smooth = ma(RIP, smoothing_window))\n\nRIP_pred_by_year_ens_mean = RIP_pred_by_year_ens_mean %>% dplyr::mutate(RIP_sim_smooth = ma(RIP_sim, smoothing_window))\n\nline.width = 1\nalpha.line = 1\ncol.line = \"grey80\"\n\nRIP_mod_obs_compare_1 =\n\tggplot() + \n\tgeom_line(data = RIP_sim_by_year[RIP_sim_by_year$model == 1,],\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth, group = sim), \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/4, col = col.line) +\n\tgeom_line(data = RIP_sim_by_year[RIP_sim_by_year$model == 2,],\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth, group = sim), \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/4, col = col.line) +\n\tgeom_line(data = RIP_sim_by_year[RIP_sim_by_year$model == 3,],\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth, group = sim), \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/4, col = col.line) +\n\tgeom_line(data = RIP_sim_by_year[RIP_sim_by_year$model == 4,],\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth, group = sim), \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/4, col = col.line) +\n\tgeom_line(data = RIP_sim_by_year[RIP_sim_by_year$model == 5,],\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth, group = sim), \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/4, col = col.line) +\n\tgeom_line(data = RIP_pred_by_year_sim_mean,\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth, group = model),\n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/2) +\n\tgeom_line(data = RIP_pred_by_year_ens_mean,\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth),\n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width, col = \"red\") +\n\tgeom_line(data = RIP_EWD_MHC_obs_year,\n\t\t\t\t\t\taes(year, y = RIP_smooth),\n\t\t\t\t\t\tlinetype = \"solid\", size = line.width) +\n\tylab(\"# RIP\") +\n\tcoord_cartesian(xlim = c(1955,2006),\n\t\t\t\t\t\t\t\t\tylim = c(0,5.5)) +\n\txlab(\"Year\") +\n\tannotate(\"text\", label = c(\"a)\"), x = 1956, y = 5.3, size = 6, colour = \"black\") +\n\ttheme_bw()\n\n\nbin_breaks = seq(-0.5,12.5,1)\nbin_labels = as.character(bin_breaks-0.5)\nRIP_mod_obs_compare_2 =\n\tggplot() + \n\tstat_bin(data = RIP_sim_by_year[RIP_sim_by_year$model == 1,],\n\t\t\t\t\t aes(x = RIP_sim, y =..count../25),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_sim_by_year[RIP_sim_by_year$model == 2,],\n\t\t\t\t\t aes(x = RIP_sim, y =..count../25),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_sim_by_year[RIP_sim_by_year$model == 3,],\n\t\t\t\t\t aes(x = RIP_sim, y =..count../25),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_sim_by_year[RIP_sim_by_year$model == 4,],\n\t\t\t\t\t aes(x = RIP_sim, y =..count../25),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_sim_by_year[RIP_sim_by_year$model == 5,],\n\t\t\t\t\t aes(x = RIP_sim, y =..count../25),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_sim_by_year,\n\t\t\t\t\t aes(x = RIP_sim, y =..count../(25*5)),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width,\n\t\t\t\t\t breaks = bin_breaks, col = \"red\") +\n\tstat_bin(data = RIP_EWD_MHC_obs_year,\n\t\t\t\t\t aes(x = RIP, y=..count..),\n\t\t\t\t\t geom = \"step\", size = line.width,\n\t\t\t\t\t breaks = bin_breaks) +\n\tannotate(\"text\", label = \"b)\", x = 0.75, y = 38.75, size = 6, colour = \"black\") +\n\tlabs(x = \"# RIP\",\n\t\t\t y = \"count\") +\n\tcoord_cartesian(xlim = c(0.5,11.6), ylim = c(0,40)) +\n\tscale_x_continuous(breaks = bin_breaks,\n\t\t\t\t\t\t\t\t\t\t labels = bin_labels) +\n\ttheme_bw()\n\n# Figure 10\npdf('Final figures/Figure_10.pdf', width = 11, height = 2.75)\ngrid.arrange(RIP_mod_obs_compare_1,\n\t\t\t\t\t\t RIP_mod_obs_compare_2,\n\t\t\t\t\t\t nrow = 1)\ndev.off()\n\n########################################\n############### Figure 11 ##############\n########################################\n\n# first define new variables of lagged RIPs\nRIP_lag_obs = RIP_EWD_MHC_all_MAM %>% dplyr::filter(model == \"OBS\") %>% \n\tdplyr::mutate(RIP_lag1 = lag(RIP, 1),\n\t\t\t\t\t\t\t\tRIP_lag4  = lag(RIP, 4),\n\t\t\t\t\t\t\t\tRIP_lag5  = lag(RIP, 5),\n\t\t\t\t\t\t\t\tRIP_lag6  = lag(RIP, 6),\n\t\t\t\t\t\t\t\tRIP_lag7  = lag(RIP, 7))\n\n# need to remove the first 7 days from each year (b/c we cannot check the lagged days associated with those days)\nRIP_lag_obs = RIP_lag_obs %>% dplyr::filter(!(lubridate::month(date) == 3 & lubridate::day(date) %in% 1:7))\n\nRIP_lag_obs$RIP_lag_4_7 = apply(RIP_lag_obs[, c(\"RIP_lag4\",\"RIP_lag5\", \"RIP_lag6\", \"RIP_lag7\")], 1, max)\n\nRIP_lag_obs = RIP_lag_obs %>% dplyr::select(c(date, RIP, season , RIP_lag1, RIP_lag_4_7))\n\n\nRIP_sim_lag_mod = RIP_sim_long  %>% dplyr::group_by(model, sim) %>% \n\tdplyr::mutate(RIP_lag1 = lag(RIP_sim, 1),\n\t\t\t\t\t\t\t\tRIP_lag4  = lag(RIP_sim, 4),\n\t\t\t\t\t\t\t\tRIP_lag5  = lag(RIP_sim, 5),\n\t\t\t\t\t\t\t\tRIP_lag6  = lag(RIP_sim, 6),\n\t\t\t\t\t\t\t\tRIP_lag7  = lag(RIP_sim, 7))\n\nRIP_sim_lag_mod = RIP_sim_lag_mod %>% dplyr::filter(!(lubridate::month(date) == 3 & lubridate::day(date) %in% 1:7))\n\n\nRIP_sim_lag_mod$RIP_lag_4_7 = apply(RIP_sim_lag_mod[, c(\"RIP_lag4\",\"RIP_lag5\", \"RIP_lag6\", \"RIP_lag7\")], 1, max)\n\nRIP_sim_lag_mod = RIP_sim_lag_mod %>% dplyr::mutate(season = GetSeasonDate(date))\n\nRIP_sim_lag_mod = RIP_sim_lag_mod %>% dplyr::select(c(date, RIP_sim, season, model, sim, RIP_lag1, RIP_lag_4_7))\n\n\nRIP_lag_obs_long = melt(RIP_lag_obs, id.vars = c(\"date\", \"season\", \"RIP\"))\nRIP_sim_lag_mod_long = melt(RIP_sim_lag_mod, id.vars = c(\"date\", \"season\", \"model\", \"sim\", \"RIP_sim\"))\n\n# intialize a blank data.frame to store the conditional probs\nRIP_cond_prob_obs = data.frame(lag = unique(RIP_sim_lag_mod_long$variable),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t obs = NA)\nRIP_cond_prob_mod_df = data.frame(lag = unique(RIP_sim_lag_mod_long$variable),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmod1 = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmod2 = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmod3 = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmod4 = NA,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmod5 = NA)\nRIP_cond_prob_mod_list = list()\nfor(nn in 1:n.sims) RIP_cond_prob_mod_list[[nn]] = RIP_cond_prob_mod_df\n\nsource('GetCondProbbySeason.R')\n\nRIP_lag_names = unique(RIP_sim_lag_mod_long$variable)\n\nfor(llag in 1:2){\n\tcon_ting_table = table(RIP_lag_obs_long$RIP[RIP_lag_obs_long$variable == RIP_lag_names[llag]], \n\t\t\t\t\t\t\t\t\t\t\t\t RIP_lag_obs_long$value[RIP_lag_obs_long$variable == RIP_lag_names[llag]], \n\t\t\t\t\t\t\t\t\t\t\t\t deparse.level = 2)\n\tRIP_cond_prob_obs$obs[llag] = con_ting_table[4]/(con_ting_table[3] + con_ting_table[4])\n\t\n\tfor(ss in 1:n.sims){\n\t\tssim = unique(RIP_sim_lag_mod_long$sim)[ss]\n\t\t\n\t\tfor(mmod in 1:5){\n\t\t\t\n\t\t\t\n\t\t\tcon_ting_table = table(RIP_sim_lag_mod_long$RIP_sim[RIP_sim_lag_mod_long$model == mmod & \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_sim_lag_mod_long$sim == ssim &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_sim_lag_mod_long$variable == RIP_lag_names[llag]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t RIP_sim_lag_mod_long$value[RIP_sim_lag_mod_long$model == mmod &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t \tRIP_sim_lag_mod_long$sim == ssim &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t \tRIP_sim_lag_mod_long$variable == RIP_lag_names[llag]], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t deparse.level = 2)\n\t\t\t\n\t\t\tRIP_cond_prob_mod_list[[ss]][llag,mmod+1] = con_ting_table[4]/(con_ting_table[3] + con_ting_table[4])\n\t\t}\n\t\tprint(paste0(\"sim \", ss, \" complete, (lag \",llag,\")\"))\t\n\t}\n\t\n}\n\n# RIP_mod_CPC_cond_prob$ensemble_mean = apply(RIP_mod_CPC_cond_prob[,4:8], 1, mean)\n\nRIP_cond_prob_mod = do.call(\"rbind\", RIP_cond_prob_mod_list)\nRIP_cond_prob_mod = RIP_cond_prob_mod %>% dplyr::mutate(sim = rep(unique(RIP_sim_lag_mod_long$sim), each = 2))\nRIP_cond_prob_long = melt(RIP_cond_prob_mod, id.vars = c(\"lag\",\"sim\"), variable.name = \"model\") \n\n# add the observations to this\nRIP_cond_prob_obs_long = data.frame(model = \"obs\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsim = \"obs\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlag = RIP_cond_prob_obs$lag,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue = RIP_cond_prob_obs$obs)\n\nRIP_cond_prob_mod_obs_long = rbind(RIP_cond_prob_long,RIP_cond_prob_obs_long)\n\nCPC_marg_probs = \n\tRIP_lag_obs_long %>% dplyr::group_by(season) %>%\n\tdplyr::summarise(value = sum(RIP[!is.na(RIP)], na.rm = TRUE)/length(RIP[!is.na(RIP)])) %>%\n\tdplyr::mutate(model = \"obs\",\n\t\t\t\t\t\t\t\tlag = \"marg_prob\",\n\t\t\t\t\t\t\t\tsim = \"obs\") %>%\n\tdplyr::filter(season %in% c(\"MAM\")) %>%\n\tdata.frame()\n\nmod_marg_probs = \n\tRIP_sim_lag_mod %>% dplyr::group_by(season, model, sim) %>%\n\tdplyr::summarise(value = sum(RIP_sim[!is.na(RIP_sim)], na.rm = TRUE)/length(RIP_sim[!is.na(RIP_sim)])) %>%\n\tdplyr::ungroup() %>%\n\tdplyr::mutate(model = paste0(\"mod\",model),\n\t\t\t\t\t\t\t\tlag = \"marg_prob\") %>%\n\tdplyr::filter(season %in% c(\"MAM\")) %>%\n\t#\tdplyr::select(-c(model)) %>%\n\tdata.frame()\n\nmarg_probs = rbind(mod_marg_probs, CPC_marg_probs)\n\n# rename the last colum \nmarg_probs_new = reshape2::dcast(model + sim ~ lag, data = marg_probs, value.var\t= \"value\")\n\n\nRIP_mod_CPC_cond_marg_prob_long = merge(RIP_cond_prob_mod_obs_long,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarg_probs_new, by = c(\"sim\", \"model\")) %>%\n\tdplyr::mutate(cond_div_marg = value/ marg_prob)\n\n# rename the lag\nRIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>% dplyr::mutate(lag_rename = ifelse(lag == \"RIP_lag1\", \"1\", \"4-7\"))\n\nRIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>%  dplyr::mutate(model = ifelse(model == \"mod1\", \"GCM 1\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifelse(model == \"mod2\", \"GCM 2\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ifelse(model == \"mod3\", \"GCM 3\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t ifelse(model == \"mod4\", \"GCM 4\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t \t\t\t ifelse(model == \"mod5\", \"GCM 5\", \"OBS\"))))))\n\nRIP_mod_CPC_cond_marg_prob_long = RIP_mod_CPC_cond_marg_prob_long %>%  dplyr::mutate(variable2 = ifelse(model == \"OBS\", \"OBS\", \"GCM\"))\n\n# Figure 11\npdf(\"Final figures/Figure_11.pdf\", width = 5, height = 3)\nggplot() +\n\tgeom_boxplot(data = RIP_mod_CPC_cond_marg_prob_long,\n\t\t\t\t\t\t\t aes(y = cond_div_marg, x = lag_rename, fill = variable2), width = 0.5, coef = 1.5) +\n\tlabs(x = \"lag (days)\", y = expression(P(RIP[t] ~\"|\" ~ RIP[t-lag])/P(RIP))) +\n\tscale_fill_discrete(name = \"GCM/OBS\") +\n\tscale_color_discrete(name = \"GCM/OBS\") +\n\tgeom_hline(yintercept = 1, linetype = \"dashed\") +\n\tscale_y_continuous(limits = c(0,25)) +\n\ttheme_bw()\ndev.off()\n\n\n########################################\n############### Figure S9 ##############\n########################################\n\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\n# load RIP/EWD/MHC records\nload(file = 'Processed_Data/RIP_EWD_MHC_all.RData')\n\n# add EWD \"+\" indicator and just retain the MAM season\nRIP_EWD_MHC_all_MAM = RIP_EWD_MHC_all %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_lag1 = lag(RIP,1)) %>%\n\tdplyr::filter(season == \"MAM\")\n\n# fit the model on the observations\nRIP_EWD_mod = glm(RIP ~ factor(RIP_lag1) : EWD, \n\t\t\t\t\t\t\t\t\tdata = RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model == \"OBS\",], family = binomial(link = \"logit\"))\nsummary(RIP_EWD_mod)\n\nn.sims = 25\n\nRIP_EWD_MHC_mod_MAM = RIP_EWD_MHC_all_MAM %>% dplyr::filter(model != \"OBS\") %>%\n\tdplyr::select(-c(RIP, RIP_lag1))\n\n\n# intialize the first RIP_lag1 as 0 for each model for each year\nRIP_EWD_MHC_mod_MAM = RIP_EWD_MHC_mod_MAM %>% dplyr::mutate(RIP_lag1 = ifelse(lubridate::month(date) == 3 & lubridate::day(date) == 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0, NA))\n\nRIP_EWD_MHC_obs_MAM = RIP_EWD_MHC_all_MAM %>% dplyr::filter(model == \"OBS\")\n\n\nRIP_sim_df = data.frame(date = unique(RIP_EWD_MHC_mod_MAM$date),\n\t\t\t\t\t\t\t\t\t\t\t\tmatrix(nrow = nrow(RIP_EWD_MHC_mod_MAM)/5, ncol = n.sims))\n\nRIP_sim\t= list(RIP_sim_df,RIP_sim_df,RIP_sim_df,RIP_sim_df,RIP_sim_df)\nnames(RIP_sim) = unique(RIP_EWD_MHC_mod_MAM$model)\ntime.nowwwww = proc.time()\nset.seed(0)\nfor(nn in 1:n.sims){\n\tfor(mmod in unique(RIP_EWD_MHC_mod_MAM$model)){\n\t\ttmp_data = RIP_EWD_MHC_mod_MAM %>% dplyr::filter(model == mmod)\n\t\tfor(rrow in 1:nrow(tmp_data)){\n\t\t\tRIP_sim[[mmod]][rrow,nn+1] = rbinom(1, 1, prob = predict.glm(RIP_EWD_mod, newdata = tmp_data[rrow,], type = \"response\"))\n\t\t\ttmp_data[rrow + 1,]$RIP_lag1 = RIP_sim[[mmod]][rrow,nn+1]\n\t\t}\n\t\tprint(paste0(\"model #\", mmod, \" complete (sim #\", nn, \")\"))\n\t}\n}\nproc.time() - time.nowwwww\n\nRIP_sim_df = do.call(\"rbind\", RIP_sim)\n\nRIP_sim_df = RIP_sim_df %>% dplyr::mutate(model = rep(1:5, each = nrow(RIP_sim_df)/5))\n\nRIP_sim_long = melt(RIP_sim_df, id.vars = c(\"date\",\"model\"), variable.name = \"sim\", value.name = \"RIP_sim\")\n\nRIP_sim_by_year = RIP_sim_long %>% dplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(year, sim, model) %>%\n\tdplyr::summarise(RIP_sim = sum(RIP_sim))\n\nRIP_EWD_MHC_obs_year = RIP_EWD_MHC_obs_MAM %>% dplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(year) %>%\n\tdplyr::summarise(RIP = sum(RIP))\n\n# calculate the mean for each member and the full ensemble mean\nRIP_pred_by_year_sim_mean = RIP_sim_long %>% dplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(year, sim, model) %>%\n\tdplyr::summarise(RIP_sim = sum(RIP_sim)) %>%\n\tdplyr::group_by(year, model) %>%\n\tdplyr::summarise(RIP_sim = mean(RIP_sim))\n\nRIP_pred_by_year_ens_mean = RIP_sim_long %>% dplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(year, sim, model) %>%\n\tdplyr::summarise(RIP_sim = sum(RIP_sim)) %>%\n\tdplyr::group_by(year) %>%\n\tdplyr::summarise(RIP_sim = mean(RIP_sim))\n\n\nsource('R/ma.R')\nsmoothing_window = 10\n\nRIP_sim_by_year = RIP_sim_by_year %>% dplyr::group_by(model,sim) %>%\n\tdplyr::mutate(RIP_sim_smooth = ma(RIP_sim, smoothing_window))\n\nRIP_pred_by_year_sim_mean = RIP_pred_by_year_sim_mean %>% dplyr::group_by(model) %>%\n\tdplyr::mutate(RIP_sim_smooth = ma(RIP_sim, smoothing_window))\n\nRIP_EWD_MHC_obs_year = RIP_EWD_MHC_obs_year %>% dplyr::mutate(RIP_smooth = ma(RIP, smoothing_window))\n\nRIP_pred_by_year_ens_mean = RIP_pred_by_year_ens_mean %>% dplyr::mutate(RIP_sim_smooth = ma(RIP_sim, smoothing_window))\n\nline.width = 1\nalpha.line = 1\ncol.line = \"grey80\"\n\nRIP_mod_obs_compare_1 =\n\tggplot() + \n\tgeom_line(data = RIP_sim_by_year[RIP_sim_by_year$model == 1,],\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth, group = sim), \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/4, col = col.line) +\n\tgeom_line(data = RIP_sim_by_year[RIP_sim_by_year$model == 2,],\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth, group = sim), \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/4, col = col.line) +\n\tgeom_line(data = RIP_sim_by_year[RIP_sim_by_year$model == 3,],\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth, group = sim), \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/4, col = col.line) +\n\tgeom_line(data = RIP_sim_by_year[RIP_sim_by_year$model == 4,],\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth, group = sim), \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/4, col = col.line) +\n\tgeom_line(data = RIP_sim_by_year[RIP_sim_by_year$model == 5,],\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth, group = sim), \n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/4, col = col.line) +\n\tgeom_line(data = RIP_pred_by_year_sim_mean,\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth, group = model),\n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width/2) +\n\tgeom_line(data = RIP_pred_by_year_ens_mean,\n\t\t\t\t\t\taes(year, y = RIP_sim_smooth),\n\t\t\t\t\t\tlinetype = \"dashed\", size = line.width, col = \"red\") +\n\tgeom_line(data = RIP_EWD_MHC_obs_year,\n\t\t\t\t\t\taes(year, y = RIP_smooth),\n\t\t\t\t\t\tlinetype = \"solid\", size = line.width) +\n\tylab(\"# RIP\") +\n\tcoord_cartesian(xlim = c(1955,2006),\n\t\t\t\t\t\t\t\t\tylim = c(0,5.5)) +\n\txlab(\"Year\") +\n\tannotate(\"text\", label = c(\"a)\"), x = 1956, y = 5.3, size = 6, colour = \"black\") +\n\ttheme_bw()\n\n\nbin_breaks = seq(-0.5,12.5,1)\nbin_labels = as.character(bin_breaks-0.5)\nRIP_mod_obs_compare_2 =\n\tggplot() + \n\tstat_bin(data = RIP_sim_by_year[RIP_sim_by_year$model == 1,],\n\t\t\t\t\t aes(x = RIP_sim, y =..count../25),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_sim_by_year[RIP_sim_by_year$model == 2,],\n\t\t\t\t\t aes(x = RIP_sim, y =..count../25),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_sim_by_year[RIP_sim_by_year$model == 3,],\n\t\t\t\t\t aes(x = RIP_sim, y =..count../25),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_sim_by_year[RIP_sim_by_year$model == 4,],\n\t\t\t\t\t aes(x = RIP_sim, y =..count../25),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_sim_by_year[RIP_sim_by_year$model == 5,],\n\t\t\t\t\t aes(x = RIP_sim, y =..count../25),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width/2,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_sim_by_year,\n\t\t\t\t\t aes(x = RIP_sim, y =..count../(25*5)),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\", size = line.width,\n\t\t\t\t\t breaks = bin_breaks, col = \"red\") +\n\tstat_bin(data = RIP_EWD_MHC_obs_year,\n\t\t\t\t\t aes(x = RIP, y=..count..),\n\t\t\t\t\t geom = \"step\", size = line.width,\n\t\t\t\t\t breaks = bin_breaks) +\n\tannotate(\"text\", label = \"b)\", x = 0.75, y = 38.75, size = 6, colour = \"black\") +\n\tlabs(x = \"# RIP\",\n\t\t\t y = \"count\") +\n\tcoord_cartesian(xlim = c(0.5,11.6), ylim = c(0,40)) +\n\tscale_x_continuous(breaks = bin_breaks,\n\t\t\t\t\t\t\t\t\t\t labels = bin_labels) +\n\ttheme_bw()\n\n# Figure S9\npdf('Final figures/Figure_S9.pdf', width = 11, height = 2.75)\ngrid.arrange(RIP_mod_obs_compare_1,\n\t\t\t\t\t\t RIP_mod_obs_compare_2,\n\t\t\t\t\t\t nrow = 1)\ndev.off()\n\n\n########################################\n############### Figure 12 ##############\n########################################\n\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\n# Simulate the future projections based on the EWD and MHC anom indices from the future record (RCP 8.5)\n# load RIP/EWD/MHC records\nload(file = 'Processed_Data/RIP_EWD_MHC_all.RData')\n\n\n# add EWD \"+\" indicator and just retain the MAM season\nRIP_EWD_MHC_all_MAM = RIP_EWD_MHC_all %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_lag1 = lag(RIP,1)) %>%\n\tdplyr::filter(season == \"MAM\")\n\n# fit the model on the observations\nRIP_EWD_MHC_mod = glm(RIP ~ MHC_anom : EWD.positive + factor(RIP_lag1) : EWD, \n\t\t\t\t\t\t\t\t\t\t\tdata = RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model == \"OBS\",], family = binomial(link = \"logit\"))\nsummary(RIP_EWD_MHC_mod)\n\n# load and process the future records\nload(file = \"Processed_Data/EWD_mod_future.RData\")\nload(file = \"Processed_Data/MHC_mod_future.RData\")\nload(file = 'Processed_Data/mod_RIP_future.RData')\n\nEWD_MHC_mod_future = merge(merge(mod_RIP_future,EWD_mod_future, by = c(\"date\",\"season\",\"model\")),MHC_mod_future,by = c(\"date\",\"season\",\"model\")) %>%\n\tdplyr::select(c(date, season, model, RIP, EWD, MHC_anom))\n\n# add EWD \"+\" indicator and just retain the MAM season\nEWD_MHC_mod_future = EWD_MHC_mod_future %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_lag1 = lag(RIP,1)) %>%\n\tdplyr::filter(season == \"MAM\")\n\n\n\nEWD_MHC_mod_future_MAM = EWD_MHC_mod_future %>% dplyr::filter(model != \"OBS\") %>%\n\tdplyr::select(-c(RIP, RIP_lag1))\n\n\n# intialize the first RIP_lag1 as 0 for each model for each year\nEWD_MHC_mod_future_MAM = EWD_MHC_mod_future_MAM %>% dplyr::mutate(RIP_lag1 = ifelse(lubridate::month(date) == 3 & lubridate::day(date) == 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0, NA))\nn.sims = 25\nRIP_sim_df = data.frame(date = unique(EWD_MHC_mod_future_MAM$date),\n\t\t\t\t\t\t\t\t\t\t\t\tmatrix(nrow = nrow(EWD_MHC_mod_future_MAM), ncol = n.sims))\n\nRIP_sim\t= list(RIP_sim_df)\nnames(RIP_sim) = unique(EWD_MHC_mod_future_MAM$model)\n\nset.seed(0)\nfor(nn in 1:n.sims){\n\tfor(mmod in unique(EWD_MHC_mod_future_MAM$model)){\n\t\ttmp_data = EWD_MHC_mod_future_MAM %>% dplyr::filter(model == mmod)\n\t\tfor(rrow in 1:nrow(tmp_data)){\n\t\t\tRIP_sim[[mmod]][rrow,nn+1] = rbinom(1, 1, prob = predict.glm(RIP_EWD_MHC_mod, newdata = tmp_data[rrow,], type = \"response\"))\n\t\t\ttmp_data[rrow + 1,]$RIP_lag1 = RIP_sim[[mmod]][rrow,nn+1]\n\t\t}\n\t\tprint(paste0(\"model #\", mmod, \" complete (sim #\", nn, \")\"))\n\t}\n}\n\nRIP_sim_df = do.call(\"rbind\", RIP_sim)\n\nRIP_sim_long = melt(RIP_sim_df, id.vars = c(\"date\"), variable.name = \"sim\", value.name = \"RIP_sim\")\n\nRIP_sim_by_year = RIP_sim_long %>% dplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(year, sim) %>%\n\tdplyr::summarise(RIP_sim = sum(RIP_sim))\n\nRIP_EWD_MHC_mod_raw_year = EWD_MHC_mod_future %>% dplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(year) %>%\n\tdplyr::summarise(RIP = sum(RIP))\n\n# calculate the mean for each member and the full ensemble mean\nRIP_pred_by_year_sim_mean = RIP_sim_long %>% dplyr::mutate(year = lubridate::year(date)) %>%\n\tdplyr::group_by(year, sim) %>%\n\tdplyr::summarise(RIP_sim = sum(RIP_sim)) %>%\n\tdplyr::group_by(year) %>%\n\tdplyr::summarise(RIP_sim = mean(RIP_sim))\n\n\n# mark whether the record is in the first 45 years (2006-2050)\n# or the last 45 years (2056-2100)\n\nRIP_sim_by_year = RIP_sim_by_year %>% dplyr::mutate(period = ifelse(year < 2051, \"2006-2050\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifelse(year > 2055,\"2056-2100\", \"2051-2055\")))\n\nRIP_EWD_MHC_mod_raw_year = RIP_EWD_MHC_mod_raw_year %>% dplyr::mutate(period = ifelse(year < 2051, \"2006-2050\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifelse(year > 2055,\"2056-2100\", \"2051-2055\")))\n\nRIP_pred_by_year_sim_mean = RIP_pred_by_year_sim_mean %>% dplyr::mutate(period = ifelse(year < 2051, \"2006-2050\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifelse(year > 2055,\"2056-2100\", \"2051-2055\")))\n# function to compute moving average\nsource('R/ma.R')\nsmoothing_window = 10\n\nRIP_sim_by_year = RIP_sim_by_year %>% dplyr::group_by(sim) %>% \n\tdplyr::mutate(RIP_smooth = ma(RIP_sim, smoothing_window))\n\nRIP_EWD_MHC_mod_raw_year = RIP_EWD_MHC_mod_raw_year %>% dplyr::mutate(RIP_smooth = ma(RIP, smoothing_window))\n\nRIP_pred_by_year_sim_mean = RIP_pred_by_year_sim_mean %>% dplyr::mutate(RIP_smooth = ma(RIP_sim, smoothing_window))\n\n# look at the number of RIPs per year from the first and last year\n# 2006-2025\nmean(RIP_EWD_MHC_mod_raw_year[RIP_EWD_MHC_mod_raw_year$year < 2026,]$RIP)\n# [1] 1.95\n\n# 2081-2100\nmean(RIP_EWD_MHC_mod_raw_year[RIP_EWD_MHC_mod_raw_year$year > 2080,]$RIP)\n# [1] 3.9\n\n# 2006-2025\nmean(RIP_sim_by_year[RIP_sim_by_year$year < 2026,]$RIP_sim)\n# [1] 1.248\n\n# 2007-2026\nmean(RIP_sim_by_year[RIP_sim_by_year$year > 2080,]$RIP_sim)\n# [1] 2.496\n\nline.width = 1\nalpha.line = 0.1\ncol.line = \"grey\"\n\nRIP_mod_future_sim_1 =\n\tggplot() +\n\tgeom_line(data = RIP_sim_by_year,\n\t\t\t\t\t\taes(year, y = RIP_smooth, group = sim), \n\t\t\t\t\t\tsize = line.width/2, col = col.line, linetype = \"dashed\") +\n\tgeom_line(data = RIP_pred_by_year_sim_mean,\n\t\t\t\t\t\taes(year, y = RIP_smooth), \n\t\t\t\t\t\tsize = line.width, linetype = \"dashed\") +\n\tgeom_line(data = RIP_EWD_MHC_mod_raw_year,\n\t\t\t\t\t\taes(year, y = RIP_smooth), \n\t\t\t\t\t\tsize = line.width) +\n\tylab(\"# RIP\") +\n\tannotate(\"text\", label = c(\"a)\"), x = 2006, y = 5.3, size = 6, colour = \"black\") +\n\tcoord_cartesian(ylim = c(0,5.6)) +\n\txlab(\"Year\") +\n\ttheme_bw()\n\n\n# exclude the middle few years between the first and last 45 years of the simulation\nRIP_EWD_MHC_mod_raw_year_subset = RIP_EWD_MHC_mod_raw_year %>% dplyr::filter(period != \"2051-2055\")\nRIP_sim_by_year_subset = RIP_sim_by_year %>% dplyr::filter(period != \"2051-2055\")\n\nbin_breaks = seq(-0.5,13.5,1)\nbin_labels = as.character(bin_breaks-0.5)\nRIP_mod_future_sim_2 =\n\tggplot() + \n\tstat_bin(data = RIP_EWD_MHC_mod_raw_year_subset,\n\t\t\t\t\t aes(x = RIP, y =..count..),\n\t\t\t\t\t geom = \"step\",size = line.width,\n\t\t\t\t\t breaks = bin_breaks) +\n\tstat_bin(data = RIP_sim_by_year_subset,\n\t\t\t\t\t aes(x = RIP_sim, y =..count../25),\n\t\t\t\t\t geom = \"step\", linetype = \"dashed\",size = line.width,\n\t\t\t\t\t breaks = bin_breaks) +\n\tannotate(\"text\", label = c(\"b)\",\"c)\"), period = c(\"2006-2050\",\"2056-2100\"), x = 0.5, y = 18, size = 6, colour = \"black\") +\n\tfacet_wrap(~period,\n\t\t\t\t\t\t ncol = 1) +\n\txlab(\"# RIP\") +\n\tylab(\"count\") +\n\tcoord_cartesian(xlim = c(0.5,12.6), ylim = c(0,20)) +\n\tscale_x_continuous(breaks = bin_breaks,\n\t\t\t\t\t\t\t\t\t\t labels = bin_labels) +\n\ttheme_bw()\n\n\nlay = rbind(c(1,1,1,2,2))\n\n# Figure 12\npdf('Final figures/Figure_12.pdf', width = 11, height = 3.5)\ngrid.arrange(RIP_mod_future_sim_1,\n\t\t\t\t\t\t RIP_mod_future_sim_2,\n\t\t\t\t\t\t nrow = 1,\n\t\t\t\t\t\t layout_matrix = lay)\ndev.off()\n\n########################################\n############### Figure 13 ##############\n########################################\nrm(list = ls())\nload(file = 'Processed_Data/RIP_EWD_MHC_all.RData')\n\n# add EWD \"+\" indicator and just retain the MAM season\nRIP_EWD_MHC_all_MAM = RIP_EWD_MHC_all %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_lag1 = lag(RIP,1)) %>%\n\tdplyr::filter(season == \"MAM\")\n\n# fit the model on the observations\nRIP_EWD_MHC_mod = glm(RIP ~ MHC_anom : EWD.positive + factor(RIP_lag1) : EWD,  \n\t\t\t\t\t\t\t\t\t\t\tdata = RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model == \"OBS\",], family = binomial(link = \"logit\"))\nsummary(RIP_EWD_MHC_mod)\n\n# load and process the historic future records\nload(file = \"Processed_Data/EWD_mod_future.RData\")\nload(file = \"Processed_Data/MHC_mod_future.RData\")\nload(file = 'Processed_Data/mod_RIP_future.RData')\n\nEWD_MHC_mod_future = merge(merge(mod_RIP_future,EWD_mod_future, by = c(\"date\",\"season\",\"model\")),MHC_mod_future,by = c(\"date\",\"season\",\"model\")) %>%\n\tdplyr::select(c(date, season, model, RIP, EWD, MHC_anom))\n\n# add EWD \"+\" indicator and just retain the MAM season\nEWD_MHC_mod_future_MAM = EWD_MHC_mod_future %>% dplyr::mutate(EWD.positive = ifelse(EWD > 0, 1, 0),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_lag1 = lag(RIP,1)) %>%\n\tdplyr::filter(season == \"MAM\")\n\n# compute the old and future EWD and MHC averages -- try to partition the effects of the EWD and MHC\nEWD_mean_1970_99 = mean(RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model != \"OBS\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_EWD_MHC_all_MAM$date > \"1969-12-31\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_EWD_MHC_all_MAM$date < \"2000-01-01\",]$EWD, na.rm = TRUE)\n\nEWD_mean_2070_99 = mean(EWD_MHC_mod_future_MAM[EWD_MHC_mod_future_MAM$model == 1 &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \tEWD_MHC_mod_future_MAM$date > \"2069-12-31\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \tEWD_MHC_mod_future_MAM$date < \"2100-01-01\",]$EWD, na.rm = TRUE)\n\nEWD_bias = EWD_mean_2070_99 - EWD_mean_1970_99\n\nMHC_mean_1970_99 = mean(RIP_EWD_MHC_all_MAM[RIP_EWD_MHC_all_MAM$model != \"OBS\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_EWD_MHC_all_MAM$date > \"1969-12-31\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRIP_EWD_MHC_all_MAM$date < \"2000-01-01\",]$MHC_anom, na.rm = TRUE)\n\nMHC_mean_2070_99 = mean(EWD_MHC_mod_future_MAM[EWD_MHC_mod_future_MAM$model == 1 &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \tEWD_MHC_mod_future_MAM$date > \"2069-12-31\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \tEWD_MHC_mod_future_MAM$date < \"2100-01-01\",]$MHC_anom, na.rm = TRUE)\n\nMHC_bias = MHC_mean_2070_99 - MHC_mean_1970_99\n\n\n\nEWD_MHC_partition_hist = RIP_EWD_MHC_all_MAM %>% dplyr::filter(model != \"OBS\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \tdate > \"1969-12-31\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \tdate < \"2000-01-01\") %>%\n\tdplyr::select(-c(RIP, RIP_lag1))\n\n\n\n# intialize the first RIP_lag1 as 0 for each model for each year\nEWD_MHC_partition_hist = EWD_MHC_partition_hist %>% dplyr::mutate(RIP_lag1 = ifelse(lubridate::month(date) == 3 & lubridate::day(date) == 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0, NA))\nn.sims = 25\nRIP_sim_df = data.frame(date = unique(EWD_MHC_partition_hist$date),\n\t\t\t\t\t\t\t\t\t\t\t\tmatrix(nrow = nrow(EWD_MHC_partition_hist)/5, ncol = n.sims))\n\nRIP_sim\t= list(RIP_sim_df,RIP_sim_df,RIP_sim_df,RIP_sim_df,RIP_sim_df)\nnames(RIP_sim) = unique(EWD_MHC_partition_hist$model)\n\ntime.nowwwww = proc.time()\nset.seed(0)\nfor(nn in 1:n.sims){\n\tfor(mmod in unique(EWD_MHC_partition_hist$model)){\n\t\ttmp_data = EWD_MHC_partition_hist %>% dplyr::filter(model == mmod)\n\t\tfor(rrow in 1:nrow(tmp_data)){\n\t\t\tRIP_sim[[mmod]][rrow,nn+1] = rbinom(1, 1, prob = predict.glm(RIP_EWD_MHC_mod, newdata = tmp_data[rrow,], type = \"response\"))\n\t\t\ttmp_data[rrow + 1,]$RIP_lag1 = RIP_sim[[mmod]][rrow,nn+1]\n\t\t}\n\t\tprint(paste0(\"model #\", mmod, \" complete (sim #\", nn, \")\"))\n\t}\n}\nprint(proc.time() - time.nowwwww)\nRIP_sim_df = do.call(\"rbind\", RIP_sim)\n\nmean_1970_1999 = sum(RIP_sim_df[,-c(1)])/n.sims/5\nmean_1970_1999\n# [1] 25.656\n\nEWD_MHC_partition_future = EWD_MHC_mod_future_MAM %>% dplyr::filter(date > \"2069-12-31\") %>%\n\tdplyr::select(-c(RIP)) %>%\n\tdplyr::mutate(RIP_lag1 = ifelse(lubridate::month(date) == 3 & lubridate::day(date) == 1, 0, NA))\n\nEWD_MHC_partition_EWD_change = EWD_MHC_partition_future %>% dplyr::mutate(MHC_anom = MHC_anom - MHC_bias)\nEWD_MHC_partition_MHC_change = EWD_MHC_partition_future %>% dplyr::mutate(EWD = EWD - EWD_bias, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEWD.positive = ifelse(EWD > 0, 1, 0))\n\n\n\nn.sims = 100\n\nboth_pred = data.frame(matrix(nrow = nrow(EWD_MHC_partition_future), ncol = n.sims))\nEWD_pred = data.frame(matrix(nrow = nrow(EWD_MHC_partition_future), ncol = n.sims))\nMHC_pred = data.frame(matrix(nrow = nrow(EWD_MHC_partition_future), ncol = n.sims))\n\n\n# first both pred\nset.seed(0)\nfor(nn in 1:n.sims){\n\ttmp_data = EWD_MHC_partition_future\n\tfor(rrow in 1:nrow(tmp_data)){\n\t\tboth_pred[rrow,nn] = rbinom(1, 1, prob = predict.glm(RIP_EWD_MHC_mod, newdata = tmp_data[rrow,], type = \"response\"))\n\t\ttmp_data[rrow + 1,]$RIP_lag1 = both_pred[rrow,nn]\n\t}\n\tprint(paste0(\"sim #\", nn, \" complete\"))\n}\n\n# now EWD change\nset.seed(0)\nfor(nn in 1:n.sims){\n\ttmp_data = EWD_MHC_partition_EWD_change\n\tfor(rrow in 1:nrow(tmp_data)){\n\t\tEWD_pred[rrow,nn] = rbinom(1, 1, prob = predict.glm(RIP_EWD_MHC_mod, newdata = tmp_data[rrow,], type = \"response\"))\n\t\ttmp_data[rrow + 1,]$RIP_lag1 = EWD_pred[rrow,nn]\n\t}\n\tprint(paste0(\"sim #\", nn, \" complete\"))\n}\n\n# now MHC change\nset.seed(0)\nfor(nn in 1:n.sims){\n\ttmp_data = EWD_MHC_partition_MHC_change\n\tfor(rrow in 1:nrow(tmp_data)){\n\t\tMHC_pred[rrow,nn] = rbinom(1, 1, prob = predict.glm(RIP_EWD_MHC_mod, newdata = tmp_data[rrow,], type = \"response\"))\n\t\ttmp_data[rrow + 1,]$RIP_lag1 = MHC_pred[rrow,nn]\n\t}\n\tprint(paste0(\"sim #\", nn, \" complete\"))\n}\n\nplot_future = data.frame(Model = c(rep(\"EWD & MHC increase (2070-2099)\",n.sims),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t rep(\"EWD increase (2070-2099)\",n.sims),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t rep(\"MHC increase (2070-2099)\",n.sims)),\n\t\t\t\t\t\t\t\t\t\t\t\t value = c(colSums(both_pred), colSums(EWD_pred), colSums(MHC_pred)) - mean_1970_1999)\nplot_future_medians = plot_future %>% dplyr::group_by(Model) %>%\n\tdplyr::summarise(mean_value = mean(value))\n\nsave(plot_future, file = \"Processed_Data/plot_future.RData\")\n\npdf(\"Final figures/Figure_13.pdf\", height = 3, width = 8)\nggplot(plot_future) +\n\tgeom_histogram(aes(x = value, fill = Model), \n\t\t\t\t\t\t\t\t alpha = 0.5, position=\"identity\", breaks = c(seq(-5,75,by = 5))) +\n\tgeom_vline(data = plot_future_medians, aes(xintercept = mean_value, col = Model)) +\n\tlabs(x = expression(Delta ~ \"# RIPs relative to (1970-1999)\"),\n\t\t\t y = \"# of simulations\") +\n\ttheme_bw() +\n\ttheme(legend.position = \"bottom\")\ndev.off()\n\n# median percentage increases?\nround(plot_future_medians$mean_value/mean_1970_1999 * 100 / 1)*1\n# [1] 188  66 104\n\n\n\n",
    "created" : 1497367110937.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1589288204",
    "id" : "31C43235",
    "lastKnownWriteTime" : 1497389923,
    "last_content_update" : 1497389923408,
    "path" : "~/Google Drive/ORB_Paper/ORB_2_PaperFigs&Stats.R",
    "project_path" : "ORB_2_PaperFigs&Stats.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}