{
    "collab_server" : "",
    "contents" : "# all codes run in RStudio version 1.0.136 and R version R version 3.3.3\n# Older and newer versions of RStudio and R have not been tested\nrm(list = ls())\npackage.list <- list(\"akima\",\"dataRetrieval\",\"data.table\",\"dplyr\",\"ggmap\",\"ggplot2\",\"gridExtra\", \n                     \"Kendall\",\"locfit\", \"lubridate\",\"maps\",\"ncdf4\",\"readr\",\"reshape2\",\"tidyr\")\nsource('R/load_packages.R') # clear workspace, clear console, load packages\nsource(\"R/GetSeasonDate.R\")\n\n# define the spatial domain for the RIP events\npr_box = data.frame(lat.min = 36,\n\t\t\t\t\t\t\t\t\t\tlat.max = 42,\n\t\t\t\t\t\t\t\t\t\tlon.min = 270,\n\t\t\t\t\t\t\t\t\t\tlon.max = 282.5)\n\nsave(pr_box, file = 'Processed_Data/pr_box.RData')\n\n# save the path to all of the raw data\ndata.file.path = 'Raw_Data/'\nsave(data.file.path, file = 'Processed_Data/data.file.path')\n\n# next let's load the GCM precipitation data\nlist_pr_files = list.files(path = paste0(data.file.path,'GCM_data/historic/pr/'))\n\npr_mod = data.frame()\n\nfor(m in 1:5){\n\tmmod = c(\"r1i\", \"r2i\", \"r3i\", \"r4i\", \"r5i\")\n\tmmod_files = list_pr_files[grep(list_pr_files, pattern = mmod[m])]\n\t\n\tfor(file_num in 1:length(mmod_files)){\n\t\tpr_ncdf = nc_open(paste0(data.file.path,'GCM_data/historic/pr/',mmod_files[file_num]))\n\t\t\n\t\t# extract time and lat/lon from the file\n\t\ttime = ncvar_get(pr_ncdf, varid = \"time\", start = c(1), count = c(-1))\n\t\tlat = ncvar_get(pr_ncdf, varid = \"lat\", start = c(1), count = c(-1))\n\t\tlon = ncvar_get(pr_ncdf, varid = \"lon\", start = c(1), count = c(-1))\n\t\t\n\t\tstart_lat = which(lat > pr_box$lat.min & lat < pr_box$lat.max)[1]\n\t\tcount_lat = sum(lat > pr_box$lat.min & lat < pr_box$lat.max)\n\t\t\n\t\tstart_lon = which(lon > pr_box$lon.min & lon < pr_box$lon.max)[1]\n\t\tcount_lon = sum(lon > pr_box$lon.min & lon < pr_box$lon.max)\n\t\t\n\t\t\n\t\ttmp0 = melt(ncvar_get(pr_ncdf, \n\t\t\t\t\t\t\t\t\t\t\t\t\tvarid = \"pr\", \n\t\t\t\t\t\t\t\t\t\t\t\t\tstart = c(start_lon,start_lat,1), \n\t\t\t\t\t\t\t\t\t\t\t\t\tcount = c(count_lon,count_lat,length(time))))\n\t\tif(file_num == 1){tmp = tmp0}\n\t\t\n\t\tif(file_num > 1){tmp = rbind(tmp, tmp0)}\n\t\tprint(file_num)\n\t}\n\ttmp$model = m\n\t\n\tif(m == 1){pr_mod = tmp}\n\tif(m > 1){pr_mod = rbind(pr_mod,tmp)}\t\n}\n\n# all years of the GCM data have 365 days (no leap years)\n# below we create the month and day of each of these no-leap year days\ndoy_no_leap = data.frame(month = month(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")),\n\t\t\t\t\t\t\t\t\t\t\t\t\tday = day(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")))\n\n# create a vector of dates for the GCM historic runs\ndate = c(as.Date(paste0(rep(1950:2005, each = 365),\"-\",doy_no_leap$month,\"-\",doy_no_leap$day)))\n\n# how many GCM cells exist in the study region\nnum.cells = nrow(unique(pr_mod[,c(\"Var1\", \"Var2\")]))\n\n# replace the date, lon, and lat indices with actual values\npr_mod$date = rep(rep(date,each = num.cells),length(mmod))\npr_mod$lon = lon[which(lon > pr_box$lon.min & lon < pr_box$lon.max)][pr_mod$Var1]\npr_mod$lat = lat[which(lat > pr_box$lat.min & lat < pr_box$lat.max)][pr_mod$Var2]\n\npr_mod = pr_mod %>% dplyr::select(date,lon,lat,model,value)\nsave(pr_mod, file = 'Processed_Data/pr_mod.RData')\n\n# save the GCM grid so that we can regrid the CPC data to match it\nmod_ORB_grid = data.frame(expand.grid(lon = unique(pr_mod$lon), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat = unique(pr_mod$lat)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t            cell = 1:(length(unique(pr_mod$lat))*length(unique(pr_mod$lon))))\nsave(mod_ORB_grid, file = 'Processed_Data/mod_ORB_grid.RData')\n\n\n# now load and save the CPC precipitation data\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\nload(file = 'Processed_Data/pr_box.RData')\nload(file = 'Processed_Data/data.file.path')\n\n# load the CPC reanalysis precipitation\npr_CPC_output = nc_open(paste0(data.file.path,'REANALYSIS_data/pr_CPC_daily.nc'))\n\n\ntime = ncvar_get(pr_CPC_output, varid = \"time\", start = c(1), count = c(-1))\nlat = ncvar_get(pr_CPC_output, varid = \"lat\", start = c(1), count = c(-1))\nlon = ncvar_get(pr_CPC_output, varid = \"lon\", start = c(1), count = c(-1))\n\n\n# formatting of pr is float prate[X,Y,T] \nstart_time = which(as.Date(unique(time), origin = \"1948-01-01\") > as.Date(\"1949-12-31\") &\n\t\t\t\t\t\t\t\t\t as.Date(unique(time), origin = \"1948-01-01\") < as.Date(\"2006-01-01\"))[1]\ncount_time = sum(as.Date(unique(time), origin = \"1948-01-01\") > as.Date(\"1949-12-31\") &\n\t\t\t\t\t\t\t\t as.Date(unique(time), origin = \"1948-01-01\") < as.Date(\"2006-01-01\"))\n\nstart_lat = which(lat > pr_box$lat.min & lat < pr_box$lat.max)[1]\ncount_lat = sum(lat > pr_box$lat.min & lat < pr_box$lat.max)\n\nstart_lon = which(lon > pr_box$lon.min & lon < pr_box$lon.max)[1]\ncount_lon = sum(lon > pr_box$lon.min & lon < pr_box$lon.max)\n\npr_CPC = ncvar_get(pr_CPC_output, \n\t\t\t\t\t\t\t\t\t varid = \"prcp\", \n\t\t\t\t\t\t\t\t\t start = c(start_lon,start_lat,start_time), \n\t\t\t\t\t\t\t\t\t count = c(count_lon,count_lat,count_time))\n\npr_CPC_long = melt(pr_CPC)\n\n\n# now we need to upscale the CPC data to match the grid of the GCM\nlats_CPC = lat[start_lat:(start_lat + count_lat - 1)]\nlons_CPC = lon[start_lon:(start_lon + count_lon - 1)]\ndates_CPC = as.Date(time[start_time:(start_time + count_time - 1)], origin = \"1948-01-01\")\n\npr_CPC = pr_CPC_long %>% dplyr::mutate(lon = lons_CPC[Var1],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t lat = lats_CPC[Var2],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t date = dates_CPC[Var3]) %>%\n\t\t\t\t\t\t\t\t\t\t\t\t dplyr::select(lon, lat, date, value) \n\n# save the CPC grid\nCPC_grid = unique(pr_CPC[,c(\"lat\", \"lon\")])\nsave(CPC_grid, file = 'Processed_Data/CPC_grid.RData')\n\n# assign each CPC cell to a model cell\nload(file = 'Processed_Data/mod_ORB_grid.RData')\n\nGetcellnumberFromlatlon = function(lat, lon, mod_lat_lon_cell){\n\ttmp_lat_lon = data.frame(lat = lat,\n\t\t\t\t\t\t\t\t\t\t\t\t\t lon = lon)\n\tcolnames(tmp_lat_lon) = c(\"lat\", \"lon\")\n\ttmp_dist = as.matrix(dist(rbind(tmp_lat_lon,mod_lat_lon_cell[,c(\"lat\",\"lon\")])))[-1,1]\n\t\n\treturn(mod_lat_lon_cell$cell[which.min(tmp_dist)])\n}\n\nCPC_mod_cell = data.frame(pr_CPC[1:(count_lon*count_lat) , c(\"lat\", \"lon\")])\nCPC_mod_cell$cell = NA\nfor(ii in 1:(nrow(CPC_mod_cell))){\n\tCPC_mod_cell$cell[ii] = GetcellnumberFromlatlon(lat = CPC_mod_cell$lat[ii], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlon = CPC_mod_cell$lon[ii], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmod_lat_lon_cell = mod_ORB_grid)\n}\n\npr_CPC$cell = rep(CPC_mod_cell$cell, length(dates_CPC))\n\n# regrid the CPC onto the GDM grid\nCPC_mod_cell_pr = pr_CPC %>% dplyr::group_by(cell, date) %>%\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t dplyr::summarise(value = mean(value, na.rm = TRUE))\nsave(CPC_mod_cell_pr, file = 'Processed_Data/CPC_mod_cell_pr.RData')\n\n\n# now load the streamflow data\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\n# set the minimum drainage area in sq. miles (NOTE: 1 sq. mile = 2.59 sq. km; so 5792 sq. mile is about 15000 sq. km)\nmin.da = 5792\n\n# set the maximum number of missing days in the streamflow record\nmax.miss.day = 25\n\nload(file = 'Processed_Data/data.file.path')\n\n# NOTE: total area of ORB ~ 189,423 miÂ²\n# load the streamflow stations with drainage areas larger than 'min.da'\nOhio <- read.csv(paste0(data.file.path,'STREAMFLOW_data/HUC5_HCDN_gages.csv'),skip=15)\npCode <- \"00060\"\nstart.date <- \"1950-01-01\"\nend.date <- \"2005-12-31\"\nsiteNo <- paste(\"0\",Ohio[Ohio[,\"D.A.\"] > min.da,\"Number\"],sep=\"\")\nOhioHCDN <- lapply(siteNo, function(x) setNames(readNWISdv(siteNumber=x,parameterCd=pCode,startDate=start.date,endDate=end.date)[,c(\"Date\",\"X_00060_00003\")],c(\"dates\",\"streamflow\")))\nHCDN <- c(OhioHCDN)\nshortname <- c(as.vector(Ohio[Ohio[,\"D.A.\"] > min.da,\"Short.name\"]))\nnames(HCDN) <- shortname\n\n\n# no gages with more than 'max.miss.day' days of missing data\nHCDN <- HCDN[!(as.vector(unlist(lapply(HCDN, function(x) nrow(x)))) < (length(seq(as.Date(start.date),as.Date(end.date),by=\"day\")) - max.miss.day))]\nHCDNgageinfo <- rbind(Ohio)[c(as.vector(Ohio[,\"Short.name\"])) %in% names(HCDN),]\n\n# convert to decimal lat/lon and add drainage area in sq km\nHCDNgagecoords <- HCDNgageinfo[,c(\"Latitude\",\"Longitude\")]\nHCDNgagecoords <- apply(HCDNgagecoords,MAR=2,function(x) as.character(x))\nHCDNgagecoords <- cbind(Latitude=sapply(HCDNgagecoords[,\"Latitude\"],function(x) as.numeric(substr(x, 1,2)) + as.numeric(substr(x, 4,5))/60 + as.numeric(substr(x, 7,8))/3600, USE.NAMES=F),\n\t\t\t\t\t\t\t\t\t\t\t\tLongitude=sapply(HCDNgagecoords[,\"Longitude\"],function(x) -1*(as.numeric(substr(x, 2,3)) + as.numeric(substr(x, 5,6))/60 + as.numeric(substr(x, 8,9))/3600), USE.NAMES=F))\nrownames(HCDNgagecoords) <- as.vector(HCDNgageinfo[,\"Short.name\"])\nHCDNgagearea <- HCDNgageinfo[,c(\"Short.name\",\"D.A.\",\"Datum\")]\nrownames(HCDNgagearea) <- as.vector(HCDNgageinfo[,\"Short.name\"])\ngage_info = merge(HCDNgagearea, HCDNgagecoords, by = \"row.names\")\n\n# transform sq mi to sq km\ngage_info = gage_info %>% dplyr::mutate(da_sq_km = D.A. * 2.58999)\n\nsave(HCDN, file = 'Processed_Data/HCDN.RData')\nsave(gage_info, file = 'Processed_Data/gage_info.RData')\n\n\n# Now calculate the RIPs\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\n\n# compare the 99th percentiles in the model and the CPC\nload(file = 'Processed_Data/CPC_mod_cell_pr.RData')\nload(file = 'Processed_Data/pr_mod.RData')\n\nninety_ninth_p_mod = pr_mod %>% dplyr::group_by(lat,lon,model) %>%\n\tdplyr::summarise(cut = quantile(value*24*60*60, probs = 0.99)) %>%\n\tdplyr::group_by(model) %>%\n\tdplyr::summarise(cut_min = min(cut),\n\t\t\t\t\t\t\t\t\t cut_max = max(cut),\n\t\t\t\t\t\t\t\t\t cut_med = median(cut))\n\nninety_ninth_p_CPC = CPC_mod_cell_pr %>% dplyr::group_by(cell) %>%\n\tdplyr::summarise(cut = quantile(value, probs = 0.99, na.rm = TRUE)) %>%\n\tdplyr::group_by() %>%\n\tdplyr::summarise(cut_min = min(cut),\n\t\t\t\t\t\t\t\t\t cut_max = max(cut),\n\t\t\t\t\t\t\t\t\t cut_med = median(cut))\n\n# choose the proportion of cells that must be extreme for a RIP to occur\nRIP_threshold = 3/15\nsave(RIP_threshold, file = \"Processed_Data/RIP_threshold\")\n\n# now calculate the RIPs for the CPC\nload(file = 'Processed_Data/CPC_mod_cell_pr.RData')\n\n# Calculate and save the RIPs based on the RIP_threshold \nCPC_mod_cell_RIP = CPC_mod_cell_pr %>% dplyr::group_by(cell) %>%\n\tdplyr::mutate(xtr_thresh = quantile(value, probs = 0.99, na.rm = TRUE)) %>%\n\tdplyr::mutate(xtr = ifelse(value > xtr_thresh, 1, 0)) %>%\n\tdplyr::group_by(date) %>%\n\tdplyr::summarise(RIP = ifelse((mean(xtr, na.rm = TRUE)) > RIP_threshold, 1, 0)) %>%\n\tdplyr::mutate(season = GetSeasonDate(date))\n\nsave(CPC_mod_cell_RIP, file = 'Processed_Data/CPC_mod_cell_RIP.RData')\n\n# save the CPC thresholds\nCPC_xtr_thresh = CPC_mod_cell_pr %>% dplyr::group_by(cell) %>%\n\tdplyr::summarise(xtr_thresh = quantile(value, probs = 0.99, na.rm = TRUE)) %>%\n\tdplyr::select(cell,xtr_thresh) %>%\n\tdata.frame()\n\nsave(CPC_xtr_thresh, file = \"Processed_Data/CPC_xtr_thresh.RData\")\n\n# Calculate and save the number of cell-based intense precip days per day\nCPC_mod_cell_IP = CPC_mod_cell_pr %>% dplyr::group_by(cell) %>%\n\tdplyr::mutate(xtr_thresh = quantile(value, probs = 0.99, na.rm = TRUE)) %>%\n\tdplyr::mutate(xtr = ifelse(value > xtr_thresh, 1, 0)) %>%\n\tdplyr::group_by(date) %>%\n\tdplyr::summarise(IP = sum(xtr)) %>%\n\tdplyr::mutate(season = GetSeasonDate(date))\n\nsave(CPC_mod_cell_IP, file = 'Processed_Data/CPC_mod_cell_IP.RData')\n\n\n# now calculate the RIPs for the GCM\nload(file = \"Processed_Data/pr_mod.RData\")\n\nmod_RIP = pr_mod %>% dplyr::group_by(lat,lon,model) %>%\n\tdplyr::mutate(xtr_thresh = quantile(value, probs = 0.99)) %>%\n\tdplyr::mutate(xtr = ifelse(value > xtr_thresh, 1, 0)) %>%\n\tdplyr::group_by(date,model) %>%\n\tdplyr::summarise(RIP = ifelse((sum(xtr)/length(xtr)) > RIP_threshold, 1, 0)) %>%\n\tdplyr::mutate(season = GetSeasonDate(date))\n\nsave(mod_RIP, file = 'Processed_Data/mod_RIP.RData')\n\n# Calculate and save the number of cell-based intense precip days per day\nmod_IP = pr_mod %>% dplyr::group_by(lat,lon,model) %>%\n\tdplyr::mutate(xtr_thresh = quantile(value, probs = 0.99)) %>%\n\tdplyr::mutate(xtr = ifelse(value > xtr_thresh, 1, 0)) %>%\n\tdplyr::group_by(date,model) %>%\n\tdplyr::summarise(IP = sum(xtr)) %>%\n\tdplyr::mutate(season = GetSeasonDate(date))\n\nsave(mod_IP, file = 'Processed_Data/mod_IP.RData')\n\n# now re-calculate the RIPs for the GCM but using the thresholds calculated from the CPC precip\nload(file = 'Processed_Data/CPC_xtr_thresh.RData')\nload(file = 'Processed_Data/mod_ORB_grid.RData')\n\nmod_CPC_thresh_pr = merge(merge(pr_mod, mod_ORB_grid, by = c(\"lon\",\"lat\"), all = TRUE),\n\t\t\t\t\t\t\t\t\t\t\t\t\tCPC_xtr_thresh, by = \"cell\", all = TRUE)\n\n\t\t\t\t\t\nmod_CPC_thresh_RIP = mod_CPC_thresh_pr %>% dplyr::group_by(cell,model) %>%\n\tdplyr::mutate(xtr = ifelse(value > xtr_thresh/60/60/24, 1, 0)) %>%\n\tdplyr::group_by(date,model) %>%\n\tdplyr::summarise(RIP = ifelse((sum(xtr)/length(xtr)) > RIP_threshold, 1, 0)) %>%\n\tdplyr::mutate(season = GetSeasonDate(date))\n\n\nsave(mod_CPC_thresh_RIP, file = 'Processed_Data/mod_CPC_thresh_RIP.RData')\n\n\n# check the precipitation on the RIP and IP days\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\n# only retain a protion of the precipitation data\n# define the spatial domain here\npr_extent = data.frame(lat.min = c(25),\n\t\t\t\t\t\t\t\t\t\t\t lat.max = c(50),\n\t\t\t\t\t\t\t\t\t\t\t lon.min = c(260),\n\t\t\t\t\t\t\t\t\t\t\t lon.max = c(300))\n\nsave(pr_extent, file = \"Processed_Data/pr_extent.RData\")\n\n# load the record of when any RIPs happened inside the ORB \nload('Processed_Data/CPC_mod_cell_RIP.RData')\n\nRIP_same_day_dates_obs = CPC_mod_cell_RIP %>% dplyr::filter(RIP == 1) %>%\n\tdata.frame() %>%\n\tdplyr::mutate(date = date) \n\nIP_min = 0\n\n# also load record of when any xtrs happened inside the ORB \nload(file = 'Processed_Data/CPC_mod_cell_IP.RData')\n\nIP_dates_obs = CPC_mod_cell_IP %>% dplyr::filter(IP > IP_min) %>%\n\tdata.frame()\n\n# load the CPC reanalysis precipitation and re-grid to the GCM resolution\nload(file = 'Processed_Data/data.file.path')\npr_CPC_output = nc_open(paste0(data.file.path,'REANALYSIS_data/pr_CPC_daily.nc'))\n\ntime = ncvar_get(pr_CPC_output, varid = \"time\", start = c(1), count = c(-1))\nlat = ncvar_get(pr_CPC_output, varid = \"lat\", start = c(1), count = c(-1))\nlon = ncvar_get(pr_CPC_output, varid = \"lon\", start = c(1), count = c(-1))\n\nstart_time = which(as.Date(unique(time), origin = \"1948-01-01\") > as.Date(\"1949-12-31\") &\n\t\t\t\t\t\t\t\t\t \tas.Date(unique(time), origin = \"1948-01-01\") < as.Date(\"2006-01-01\"))[1]\ncount_time = sum(as.Date(unique(time), origin = \"1948-01-01\") > as.Date(\"1949-12-31\") &\n\t\t\t\t\t\t\t\t \tas.Date(unique(time), origin = \"1948-01-01\") < as.Date(\"2006-01-01\"))\n\nstart_lat = which(lat > pr_extent$lat.min & lat < pr_extent$lat.max)[1]\ncount_lat = sum(lat > pr_extent$lat.min & lat < pr_extent$lat.max)\n\nstart_lon = which(lon > pr_extent$lon.min & lon < pr_extent$lon.max)[1]\ncount_lon = sum(lon > pr_extent$lon.min & lon < pr_extent$lon.max)\n\npr_CPC = ncvar_get(pr_CPC_output, \n\t\t\t\t\t\t\t\t\t varid = \"prcp\", \n\t\t\t\t\t\t\t\t\t start = c(start_lon,start_lat,start_time), \n\t\t\t\t\t\t\t\t\t count = c(count_lon,count_lat,count_time))\n\npr_CPC_long = melt(pr_CPC)\nrm(pr_CPC)\n\nlats_CPC = lat[start_lat:(start_lat + count_lat - 1)]\nlons_CPC = lon[start_lon:(start_lon + count_lon - 1)]\ndates_CPC = as.Date(time[start_time:(start_time + count_time - 1)], origin = \"1948-01-01\")\n\npr_CPC = pr_CPC_long %>% dplyr::mutate(lon = lons_CPC[Var1],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t lat = lats_CPC[Var2],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t date = dates_CPC[Var3]) %>%\n\tdplyr::select(lon, lat, date, value) \nrm(pr_CPC_long)\n\n\n# now upscale to match the spatial scale of the GCM\nload(file = \"Processed_Data/pr_extent.RData\")\n\npr_CPC_coarse = pr_CPC %>% dplyr::mutate(lat = 2*round((lat+1)/2) - 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t lon =  2.5*round((lon+1.25)/2.5) - 1.25) %>%\n\tdplyr::group_by(lat, lon, date) %>%\n\tdplyr::summarise(value = mean(value, na.rm = TRUE))\n\n# now compute the percentile of precip for each cell for each day\nsource('R/prank.R')\npr_CPC_coarse_percentile = pr_CPC_coarse %>% dplyr::mutate(season = GetSeasonDate(date)) %>%\n\tdplyr::group_by(lat, lon) %>%\n\tdplyr::mutate(pr_percentile = prank(value))\n\nsave(pr_CPC_coarse_percentile, file = 'Processed_Data/pr_CPC_coarse_percentile.RData')\n\nload(file = 'Processed_Data/pr_CPC_coarse_percentile.RData')\n\n# now compute the mean of precipitation precentile for all RIP days\npr_CPC_RIP_same_day = pr_CPC_coarse_percentile %>% dplyr::filter(date %in%  c(RIP_same_day_dates_obs$date)) %>%\n\tdplyr::group_by(lat,lon,season) %>%\n\tdplyr::summarise(mean_pr_percentile = mean(pr_percentile, na.rm = TRUE))\npr_CPC_RIP_same_day$model = \"OBS\"\n\npr_CPC_RIP_same_day = pr_CPC_RIP_same_day %>% dplyr::filter(lat < pr_extent$lat.max &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlon < pr_extent$lon.max &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlon > pr_extent$lon.min)\n\npr_CPC_RIP_same_day = pr_CPC_RIP_same_day %>% data.frame()\n\nsave(pr_CPC_RIP_same_day, file = 'Processed_Data/pr_CPC_RIP_same_day.RData')\n\n\n# now compute the mean of precipitation precentile for all IP days\npr_CPC_IP = pr_CPC_coarse_percentile %>% dplyr::filter(date %in%  c(IP_dates_obs$date)) %>%\n\tdplyr::group_by(lat,lon,season) %>%\n\tdplyr::summarise(mean_pr_percentile = mean(pr_percentile, na.rm = TRUE))\npr_CPC_IP$model = \"OBS\"\n\npr_CPC_IP = pr_CPC_IP %>% dplyr::filter(lat < pr_extent$lat.max &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlon < pr_extent$lon.max &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlon > pr_extent$lon.min)\n\npr_CPC_IP = pr_CPC_IP %>% data.frame()\n\nsave(pr_CPC_IP, file = 'Processed_Data/pr_CPC_IP_US.RData')\n\n\n# load the GCM precipitation\nload(file = 'Processed_Data/data.file.path')\nlist_pr_files = list.files(path = paste0(data.file.path,'GCM_data/historic/pr/'))\n\npr_mod = data.frame()\n\nfor(m in 1:5){\n\tmmod = c(\"r1i\", \"r2i\", \"r3i\", \"r4i\", \"r5i\")\n\tmmod_files = list_pr_files[grep(list_pr_files, pattern = mmod[m])]\n\t\n\tfor(file_num in 1:length(mmod_files)){\n\t\tpr_ncdf = nc_open(paste0(data.file.path,'GCM_data/historic/pr/',mmod_files[file_num]))\n\t\t\n\t\t# extract time and lat/on from the file\n\t\ttime = ncvar_get(pr_ncdf, varid = \"time\", start = c(1), count = c(-1))\n\t\tlat = ncvar_get(pr_ncdf, varid = \"lat\", start = c(1), count = c(-1))\n\t\tlon = ncvar_get(pr_ncdf, varid = \"lon\", start = c(1), count = c(-1))\n\t\t\n\t\tstart_lat = which(lat > pr_extent$lat.min & lat < pr_extent$lat.max)[1]\n\t\tcount_lat = sum(lat > pr_extent$lat.min & lat < pr_extent$lat.max)\n\t\t\n\t\tstart_lon = which(lon > pr_extent$lon.min & lon < pr_extent$lon.max)[1]\n\t\tcount_lon = sum(lon > pr_extent$lon.min & lon < pr_extent$lon.max)\n\t\t\n\t\t\n\t\ttmp0 = melt(ncvar_get(pr_ncdf,\n\t\t\t\t\t\t\t\t\t\t\t\t\tvarid = \"pr\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tstart = c(start_lon,start_lat,1),\n\t\t\t\t\t\t\t\t\t\t\t\t\tcount = c(count_lon,count_lat,length(time))))\n\t\tif(file_num == 1){tmp = tmp0}\n\t\t\n\t\tif(file_num > 1){tmp = rbind(tmp, tmp0)}\n\t\tprint(file_num)\n\t}\n\ttmp$model = m\n\t\n\tif(m == 1){pr_mod = tmp}\n\tif(m > 1){pr_mod = rbind(pr_mod,tmp)}\n}\n\n# all years of the GCM data have 365 days (no leap years)\n# below we create the month and day of each of these no-leap year days\ndoy_no_leap = data.frame(month = month(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")),\n\t\t\t\t\t\t\t\t\t\t\t\t day = day(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")))\n\n# create a vector of dates for the GCM historic run\ndate = c(as.Date(paste0(rep(1950:2005, each = 365),\"-\",doy_no_leap$month,\"-\",doy_no_leap$day)))\n\n# how many GCM cells exist in the study region\nnum.cells = nrow(unique(pr_mod[,c(\"Var1\", \"Var2\")]))\n\n# replace the date, lon, and lat indices with actual values\npr_mod$date = rep(rep(date,each = num.cells),length(mmod))\npr_mod$lon = lon[which(lon > pr_extent$lon.min & lon < pr_extent$lon.max)][pr_mod$Var1]\npr_mod$lat = lat[which(lat > pr_extent$lat.min & lat < pr_extent$lat.max)][pr_mod$Var2]\n\npr_mod = pr_mod %>% dplyr::select(date,lon,lat,model,value)\n\n# now compute the mean of precipitation precentile for all RIP and IP days for the GCM\nload(file = 'Processed_Data/mod_RIP.RData')\nRIP_same_day_dates_mod = mod_RIP  %>% dplyr::filter(RIP == 1) %>%\n\tdata.frame() %>%\n\tdplyr::mutate(date = date) \n\nIP_min = 0\nload(file = 'Processed_Data/mod_IP.RData')\nIP_dates_mod = mod_IP %>% dplyr::filter(IP > IP_min) %>%\n\tdata.frame()\n\nsource('R/prank.R')\n\npr_mod_percentile = pr_mod  %>% dplyr::mutate(season = GetSeasonDate(date)) %>%\n\tdplyr::group_by(lat, lon, model) %>%\n\tdplyr::mutate(pr_percentile = prank(value)) %>%\n  dplyr::filter(season == \"MAM\")\n\nsave(pr_mod_percentile, file = 'Processed_Data/pr_mod_percentile.RData')\n\n\n# RIP same day\npr_mod_RIP_same_day = merge(pr_mod_percentile %>% dplyr::select(-c(value)), RIP_same_day_dates_mod, by = c(\"date\", \"model\", \"season\")) \n\npr_mod_RIP_same_day = pr_mod_RIP_same_day %>% dplyr::group_by(lat,lon,model,season) %>%\n\tdplyr::summarise(mean_pr_percentile = mean(pr_percentile, na.rm = TRUE))\n\npr_mod_RIP_same_day = pr_mod_RIP_same_day %>% data.frame() %>% \n\tdplyr::filter(lat < pr_extent$lat.max &\n\t\t\t\t\t\t\t\t\tlon < pr_extent$lon.max &\n\t\t\t\t\t\t\t\t\tlon > pr_extent$lon.min)\n\npr_mod_RIP_same_day = pr_mod_RIP_same_day %>% dplyr::mutate(model = paste0(\"GCM \", model))\n\nsave(pr_mod_RIP_same_day, file = 'Processed_Data/pr_mod_RIP_same_day.RData')\n\n\n# now for the IP\npr_mod_IP = merge(pr_mod_percentile, IP_dates_mod, by = c(\"date\", \"model\", \"season\")) \n\npr_mod_IP = pr_mod_IP %>% dplyr::group_by(lat,lon,model,season) %>%\n\tdplyr::summarise(mean_pr_percentile = mean(pr_percentile, na.rm = TRUE))\n\npr_mod_IP = pr_mod_IP %>% data.frame() %>% \n\tdplyr::filter(lat < pr_extent$lat.max &\n\t\t\t\t\t\t\t\t\tlon < pr_extent$lon.max &\n\t\t\t\t\t\t\t\t\tlon > pr_extent$lon.min)\n\npr_mod_IP = pr_mod_IP %>% dplyr::mutate(model = paste0(\"GCM \", model))\n\nsave(pr_mod_IP, file = 'Processed_Data/pr_mod_IP_US.RData')\n\n\n# now load and save teh Z_700, PR_WAT, and T_700 fields\nrm(list = ls())\nsource('R/GetSeasonDate.R')\n\n# load and save Z_700 and PR_WAT and T_700 fields\n# first Z_700\nload(file = 'Processed_Data/data.file.path')\nreanal_output = nc_open(paste0(data.file.path,'REANALYSIS_data/zg_700mb_REANALYSIS.nc'))\n\ntime = ncvar_get(reanal_output, varid = \"T\", start = c(1), count = c(-1))\ndate = as.Date(time, origin = \"1948-01-01 00:00:00\")\n\nlat = ncvar_get(reanal_output, varid = \"Y\", start = c(1), count = c(-1))\nlon = ncvar_get(reanal_output, varid = \"X\", start = c(1), count = c(-1))\n\nstart_date = which(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\t \tdate < \"2006-01-01\")[1]\n\ncount_date = sum(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t \tdate < \"2006-01-01\")\n\nZ_700 = melt(ncvar_get(reanal_output, \n\t\t\t\t\t\t\t\t\t\t\t varid = \"phi\", \n\t\t\t\t\t\t\t\t\t\t\t start = c(1,1,1,start_date), \n\t\t\t\t\t\t\t\t\t\t\t count = c(length(lon),length(lat),1,count_date)))\n\nZ_700 = Z_700 %>% dplyr::mutate(lon = lon[Var1],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat = lat[Var2],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate = date[which(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate < \"2006-01-01\")][Var3],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tseason = GetSeasonDate(date),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tz_700 = value) %>%\n\tdplyr::select(c(date, season, lon, lat, z_700))\n\n# retain for DJF and MAM b/c events in early Mar will require Feb data for lag composites\nZ_700 = Z_700 %>% dplyr::filter(season %in% c(\"DJF\", \"MAM\"))\nsave(Z_700, file = 'Processed_Data/Z_700.RData')\n\n# clear workspace\nrm(list = ls())\nsource('R/GetSeasonDate.R')\n# now load the PR_WAT\nload(file = 'Processed_Data/data.file.path')\nreanal_output = nc_open(paste0(data.file.path,'REANALYSIS_data/pr_wat_col_REANALYSIS.nc'))\n\ntime = ncvar_get(reanal_output, varid = \"T\", start = c(1), count = c(-1))\ndate = as.Date(time, origin = \"1948-01-01 00:00:00\")\n\nlat = ncvar_get(reanal_output, varid = \"Y\", start = c(1), count = c(-1))\nlon = ncvar_get(reanal_output, varid = \"X\", start = c(1), count = c(-1))\n\nstart_date = which(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\t \tdate < \"2006-01-01\")[1]\n\ncount_date = sum(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t \tdate < \"2006-01-01\")\n\nPR_WAT = melt(ncvar_get(reanal_output, \n\t\t\t\t\t\t\t\t\t\t\t\tvarid = \"PWAT\", \n\t\t\t\t\t\t\t\t\t\t\t\tstart = c(1,1,start_date), \n\t\t\t\t\t\t\t\t\t\t\t\tcount = c(length(lon),length(lat),count_date)))\n\nPR_WAT = PR_WAT %>% dplyr::mutate(lon = lon[Var1],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat = lat[Var2],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate = date[which(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate < \"2006-01-01\")][Var3],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tseason = GetSeasonDate(date),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpr_wat = value) %>%\n\tdplyr::select(c(date, season, lon, lat, pr_wat))\n\n# set the values < 0 to 0\nPR_WAT = PR_WAT %>% dplyr::mutate(pr_wat = ifelse(pr_wat < 0, 0, pr_wat))\n\nPR_WAT = PR_WAT %>% dplyr::filter(season %in% c(\"DJF\", \"MAM\"))\nsave(PR_WAT, file = 'Processed_Data/PR_WAT.RData')\n\n\n# clear workspace\nrm(list = ls())\nsource('R/GetSeasonDate.R')\n# now load the T_700\nload(file = 'Processed_Data/data.file.path')\nreanal_output = nc_open(paste0(data.file.path,'REANALYSIS_data/temp_700mb_REANALYSIS.nc'))\n\ntime = ncvar_get(reanal_output, varid = \"T\", start = c(1), count = c(-1))\ndate = as.Date(time, origin = \"1948-01-01 00:00:00\")\n\nlat = ncvar_get(reanal_output, varid = \"Y\", start = c(1), count = c(-1))\nlon = ncvar_get(reanal_output, varid = \"X\", start = c(1), count = c(-1))\n\nstart_date = which(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\t date < \"2006-01-01\")[1]\n\ncount_date = sum(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t date < \"2006-01-01\")\n\nT_700 = melt(ncvar_get(reanal_output, \n\t\t\t\t\t\t\t\t\t\t\t varid = \"temp\", \n\t\t\t\t\t\t\t\t\t\t\t start = c(1,1,1,start_date), \n\t\t\t\t\t\t\t\t\t\t\t count = c(length(lon),length(lat),1,count_date)))\n\nT_700 = T_700 %>% dplyr::mutate(lon = lon[Var1],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat = lat[Var2],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate = date[which(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate < \"2006-01-01\")][Var3],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tseason = GetSeasonDate(date),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tt_700 = value) %>%\n\tdplyr::select(c(date, season, lon, lat, t_700))\n\nT_700 = T_700 %>% dplyr::filter(season %in% c(\"DJF\", \"MAM\"))\nsave(T_700, file = 'Processed_Data/T_700.RData')\n\n\n# now load the model Z_700 field\nrm(list = ls())\nsource('R/GetSeasonDate.R')\n# now load the zg_700 field from the GCM to compare the composites from the GCM and the observations\nload(file = 'Processed_Data/data.file.path')\nlist_zg_files = list.files(path = paste0(data.file.path,'GCM_data/historic/zg/'))\n\nZ_700_mod_field = data.frame()\n\n# define the retent of Z_700 field to retain\nmin.lat = 14\nmax.lat = 60\nmin.lon = 205\nmax.lon = 315\nfor(m in 1:5){\n\tmmod = c(\"r1i\", \"r2i\", \"r3i\", \"r4i\", \"r5i\")\n\tmmod_files = list_zg_files[grep(list_zg_files, pattern = mmod[m])]\n\t\n\tfor(file_num in 1:length(mmod_files)){\n\t\tGCM_ncdf = nc_open(paste0(data.file.path,'GCM_data/historic/zg/',mmod_files[file_num]))\n\t\t\n\t\t# extract time and lat/on from the file\n\t\ttime = ncvar_get(GCM_ncdf, varid = \"time\", start = c(1), count = c(-1))\n\t\tlat = ncvar_get(GCM_ncdf, varid = \"lat\", start = c(1), count = c(-1))\n\t\tlon = ncvar_get(GCM_ncdf, varid = \"lon\", start = c(1), count = c(-1))\n\t\t\n\t\tstart_lat = which(lat > min.lat & lat < max.lat)[1]\n\t\tcount_lat = sum(lat > min.lat & lat < max.lat)\n\t\t\n\t\tstart_lon = which(lon > min.lon & lon < max.lon)[1]\n\t\tcount_lon = sum(lon > min.lon & lon < max.lon)\n\t\t\n\t\tplev = ncvar_get(GCM_ncdf, varid = \"plev\", start = c(1), count = c(-1))\n\t\t\n\t\t\n\t\ttmp0 = melt(ncvar_get(GCM_ncdf, \n\t\t\t\t\t\t\t\t\t\t\t\t\tvarid = \"zg\", \n\t\t\t\t\t\t\t\t\t\t\t\t\tstart = c(start_lon,start_lat,which(plev == 70000),1), \n\t\t\t\t\t\t\t\t\t\t\t\t\tcount = c(count_lon,count_lat,1,length(time))))\n\t\tif(file_num == 1){tmp = tmp0}\n\t\t\n\t\tif(file_num > 1){tmp = rbind(tmp, tmp0)}\n\t\tprint(file_num)\n\t}\n\ttmp$model = m\n\t\n\tif(m == 1){Z_700_mod_field = tmp}\n\tif(m > 1){Z_700_mod_field = rbind(Z_700_mod_field,tmp)}\t\n}\n\n# all years of the GCM data have 365 days (no leap years)\n# below we create the month and day of each of these no-leap year days\ndoy_no_leap = data.frame(month = month(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")),\n\t\t\t\t\t\t\t\t\t\t\t\t day = day(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")))\n\n# create a vector of dates for the GCM historic run\ndate = c(as.Date(paste0(rep(1950:2005, each = 365),\"-\",doy_no_leap$month,\"-\",doy_no_leap$day)))\n\n# how many GCM cells exist in the study region\nnum.cells = nrow(unique(Z_700_mod_field[,c(\"Var1\", \"Var2\")]))\n\n# replace the date, lon, and lat indices with actual values\nZ_700_mod_field$date = rep(rep(date,each = num.cells),length(mmod))\n\n# can get rid of non MAM months\nZ_700_mod_field = Z_700_mod_field %>% dplyr::filter(lubridate::month(date) %in% c(3,4,5))\n\n# can get rid of lats > max.lat and lat < min.lat and lon < min.lon and lon > max.lon for space\nZ_700_mod_field$lat = lat[which(lat > min.lat & lat < max.lat)][Z_700_mod_field$Var2]\nZ_700_mod_field$lon = lon[which(lon > min.lon & lon < max.lon)][Z_700_mod_field$Var1]\n\n\nZ_700_mod_field = Z_700_mod_field %>% dplyr::select(date,lon,lat,model,value)\n\nsave(Z_700_mod_field, file = 'Processed_Data/Z_700_mod_field.RData')\n\n\n# now load and save the U_200 monthly fields\nrm(list = ls())\nsource('R/GetSeasonDate.R')\n\n# load and save the U_200 field -- monthly data\nload(file = 'Processed_Data/data.file.path')\nreanal_output = nc_open(paste0(data.file.path,'REANALYSIS_data/u_200_REANALYSIS.nc'))\n\ntime = ncvar_get(reanal_output, varid = \"T\", start = c(1), count = c(-1))\n# data spans from jan 1949 to mar 2017\ndates = data.frame(year = c(rep(1949:2016, each = 12),rep(2017,3)),\n\t\t\t\t\t\t\t\t\t month = c(rep(1:12,(2016-1949+1)),1:3),\n\t\t\t\t\t\t\t\t\t day = 1)\ndate = as.Date(paste(dates$year,\n\t\t\t\t\t\t\t\t\t\t dates$month,\n\t\t\t\t\t\t\t\t\t\t dates$day, sep = \"-\"), \n\t\t\t\t\t\t\t origin = \"1948-01-01 00:00:00\")\n\nlat = ncvar_get(reanal_output, varid = \"Y\", start = c(1), count = c(-1))\nlon = ncvar_get(reanal_output, varid = \"X\", start = c(1), count = c(-1))\n\nstart_date = which(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\t \tdate < \"2005-01-01\")[1]\n\ncount_date = sum(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t \tdate < \"2005-01-01\")\n\nU_200 = melt(ncvar_get(reanal_output, \n\t\t\t\t\t\t\t\t\t\t\t varid = \"u\", \n\t\t\t\t\t\t\t\t\t\t\t start = c(1,1,1,start_date), \n\t\t\t\t\t\t\t\t\t\t\t count = c(length(lon),length(lat),1,count_date)))\n\nU_200 = U_200 %>% dplyr::mutate(lon = lon[Var1],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat = lat[Var2],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate = date[which(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate < \"2005-01-01\")][Var3],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tseason = GetSeasonDate(date),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tu_200 = value) %>%\n\tdplyr::select(c(date, season, lon, lat, u_200))\n\nU_200_MAM = U_200 %>% dplyr::filter(season %in% c(\"MAM\"))\nsave(U_200_MAM, file = 'Processed_Data/U_200_MAM.RData')\n\n\n# now load the U_200 GCM monthly data\nrm(list = ls())\nsource('R/GetSeasonDate.R')\nload(file = 'Processed_Data/data.file.path')\nlist_ua_files = list.files(path = paste0(data.file.path,'GCM_data/historic/ua_monthly/'))\n\nU_200_mod_field = data.frame()\n\nfor(m in 1:5){\n\tmmod = c(\"r1i\", \"r2i\", \"r3i\", \"r4i\", \"r5i\")\n\tmmod_files = list_ua_files[grep(list_ua_files, pattern = mmod[m])]\n\t\n\tfor(file_num in 1:length(mmod_files)){\n\t\tua_ncdf = nc_open(paste0(data.file.path,'GCM_data/historic/ua_monthly/',mmod_files[file_num]))\n\t\t\n\t\t# extract time and lat/on from the file\n\t\ttime = ncvar_get(ua_ncdf, varid = \"time\", start = c(1), count = c(-1))\n\t\tlat = ncvar_get(ua_ncdf, varid = \"lat\", start = c(1), count = c(-1))\n\t\tlon = ncvar_get(ua_ncdf, varid = \"lon\", start = c(1), count = c(-1))\n\t\t\n\t\tplev = ncvar_get(ua_ncdf, varid = \"plev\", start = c(1), count = c(-1))\n\t\t\n\t\t\n\t\ttmp0 = melt(ncvar_get(ua_ncdf, \n\t\t\t\t\t\t\t\t\t\t\t\t\tvarid = \"ua\", \n\t\t\t\t\t\t\t\t\t\t\t\t\tstart = c(1,1,which(plev == 20000),1), \n\t\t\t\t\t\t\t\t\t\t\t\t\tcount = c(length(lon),length(lat),1,length(time))))\n\t\tif(file_num == 1){tmp = tmp0}\n\t\t\n\t\tif(file_num > 1){tmp = rbind(tmp, tmp0)}\n\t\tprint(file_num)\n\t}\n\ttmp$model = m\n\t\n\tif(m == 1){U_200_mod_field = tmp}\n\tif(m > 1){U_200_mod_field = rbind(U_200_mod_field,tmp)}\t\n}\n\n# create a vector of dates for the GCM historic run\ndate = c(as.Date(paste0(rep(1950:2005, each = 12),\"-\",rep(1:12,(2005-1950+1)),\"-\",\"01\")))\n\n# how many GCM cells exist in the study region\nnum.cells = nrow(unique(U_200_mod_field[,c(\"Var1\", \"Var2\")]))\n\n# replace the date, lon, and lat indices with actual values\nU_200_mod_field$date = rep(rep(date,each = num.cells),length(mmod))\nU_200_mod_field$lon = lon[U_200_mod_field$Var1]\nU_200_mod_field$lat = lat[U_200_mod_field$Var2]\n\nU_200_mod_field = U_200_mod_field %>% dplyr::mutate(season = GetSeasonDate(date),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tu_200 = value) %>%\n\tdplyr::select(c(date, season, lon, lat, model, u_200))\n\n\nU_200_mod_MAM = U_200_mod_field %>% dplyr::filter(season %in% c(\"MAM\"))\nsave(U_200_mod_MAM, file = 'Processed_Data/U_200_mod_MAM.RData')\n\n\n# now compute and save teh EWD and MHC indices\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\n# define the EWD index boxes\nEWD_boxes = data.frame(box = c('east', 'west'),\n\t\t\t\t\t\t\t\t\t\t\t lat.min = c(30, 30),\n\t\t\t\t\t\t\t\t\t\t\t lat.max = c(45, 45),\n\t\t\t\t\t\t\t\t\t\t\t lon.min = c(-77.5, -102.5),\n\t\t\t\t\t\t\t\t\t\t\t lon.max = c(-62.5, -87.5))\n\nsave(EWD_boxes, file = 'Processed_Data/EWD_boxes.RData')\n\n# load and process the Z_700 data\nload(file = 'Processed_Data/data.file.path')\nlist_zg_files = list.files(path = paste0(data.file.path,'/GCM_data/historic/zg/'))\n\nEWD_mod = data.frame()\n\nfor(m in 1:5){\n\tmmod = c(\"r1i\", \"r2i\", \"r3i\", \"r4i\", \"r5i\")\n\tmmod_files = list_zg_files[grep(list_zg_files, pattern = mmod[m])]\n\t\n\tfor(file_num in 1:length(mmod_files)){\n\t\tzg_ncdf = nc_open(paste0(data.file.path,'GCM_data/historic/zg/',mmod_files[file_num]))\n\t\t\n\t\t# extract time and lat/on from the file\n\t\ttime = ncvar_get(zg_ncdf, varid = \"time\", start = c(1), count = c(-1))\n\t\tlat = ncvar_get(zg_ncdf, varid = \"lat\", start = c(1), count = c(-1))\n\t\tlon = ncvar_get(zg_ncdf, varid = \"lon\", start = c(1), count = c(-1))\n\t\tlon[lon > 180] = lon[lon > 180] - 360\n\t\tplev = ncvar_get(zg_ncdf, varid = \"plev\", start = c(1), count = c(-1))\n\t\t\n\t\t\n\t\tstart_lat_east = which(lat >= EWD_boxes$lat.min[EWD_boxes$box == 'east'] & \n\t\t\t\t\t\t\t\t\t\t\t\t\t \tlat <= EWD_boxes$lat.max[EWD_boxes$box == 'east'])[1]\n\t\tcount_lat_east = sum(lat >= EWD_boxes$lat.min[EWD_boxes$box == 'east'] & \n\t\t\t\t\t\t\t\t\t\t\t\t \tlat <= EWD_boxes$lat.max[EWD_boxes$box == 'east'])[1]\n\t\t\n\t\tstart_lat_west = which(lat >= EWD_boxes$lat.min[EWD_boxes$box == 'west'] & \n\t\t\t\t\t\t\t\t\t\t\t\t\t \tlat <= EWD_boxes$lat.max[EWD_boxes$box == 'west'])[1]\n\t\tcount_lat_west = sum(lat >= EWD_boxes$lat.min[EWD_boxes$box == 'west'] & \n\t\t\t\t\t\t\t\t\t\t\t\t \tlat <= EWD_boxes$lat.max[EWD_boxes$box == 'west'])[1]\n\t\t\n\t\tstart_lon_east = which(lon >= EWD_boxes$lon.min[EWD_boxes$box == 'east'] & \n\t\t\t\t\t\t\t\t\t\t\t\t\t \tlon <= EWD_boxes$lon.max[EWD_boxes$box == 'east'])[1]\n\t\tcount_lon_east = sum(lon >= EWD_boxes$lon.min[EWD_boxes$box == 'east'] & \n\t\t\t\t\t\t\t\t\t\t\t\t \tlon <= EWD_boxes$lon.max[EWD_boxes$box == 'east'])[1]\n\t\t\n\t\tstart_lon_west = which(lon >= EWD_boxes$lon.min[EWD_boxes$box == 'west'] & \n\t\t\t\t\t\t\t\t\t\t\t\t\t \tlon <= EWD_boxes$lon.max[EWD_boxes$box == 'west'])[1]\n\t\tcount_lon_west = sum(lon >= EWD_boxes$lon.min[EWD_boxes$box == 'west'] & \n\t\t\t\t\t\t\t\t\t\t\t\t \tlon <= EWD_boxes$lon.max[EWD_boxes$box == 'west'])[1]\n\t\t\n\t\t\n\t\t# zg[lon,lat,plev,time]\n\t\tEWD_east_box = melt(ncvar_get(zg_ncdf, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvarid = \"zg\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart = c(start_lon_east,start_lat_east,which(plev == 70000),1), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount = c(count_lon_east,count_lat_east,1,length(time))))\n\t\t\n\t\tEWD_east_box = EWD_east_box %>% dplyr::group_by(Var3) %>%\n\t\t\tdplyr::summarise(east.box = mean(value))\n\t\t\n\t\tEWD_west_box = melt(ncvar_get(zg_ncdf, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvarid = \"zg\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart = c(start_lon_west,start_lat_west,which(plev == 70000),1), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount = c(count_lon_west,count_lat_west,1,length(time))))\n\t\t\n\t\tEWD_west_box = EWD_west_box %>% dplyr::group_by(Var3) %>%\n\t\t\tdplyr::summarise(west.box = mean(value))\n\t\t\n\t\ttmp0 = cbind(merge(EWD_east_box, EWD_west_box),time) %>% dplyr::select(east.box, west.box, time)\n\t\t\n\t\t\n\t\tif(file_num == 1){tmp = tmp0}\n\t\t\n\t\tif(file_num > 1){tmp = rbind(tmp, tmp0)}\n\t\tprint(file_num)\n\t}\n\ttmp$model = m\n\t\n\tif(m == 1){EWD_mod = tmp}\n\tif(m > 1){EWD_mod = rbind(EWD_mod,tmp)}\t\n}\n\n# all years of the GCM data have 365 days (no leap years)\n# below we create the month and day of each of these no-leap year days\ndoy_no_leap = data.frame(month = month(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")),\n\t\t\t\t\t\t\t\t\t\t\t\t day = day(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")))\n\n# create a vector of dates for the GCM historic run\ndate = c(as.Date(paste0(rep(1950:2005, each = 365),\"-\",doy_no_leap$month,\"-\",doy_no_leap$day)))\n\n# replace the date, lon, and lat indices with actual values\nEWD_mod$date = rep(date,length(mmod))\nEWD_mod = EWD_mod %>% dplyr::mutate(EWD = east.box - west.box)\n\nEWD_mod = EWD_mod %>% dplyr::mutate(season = GetSeasonDate(date)) %>%\n\tdplyr::select(date, model, EWD, season)\n\nsave(EWD_mod, file = 'Processed_Data/EWD_mod.RData')\n\n# calculate the EWD index from the reananlysis\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\nload(file = 'Processed_Data/EWD_boxes.RData')\n\nload(file = 'Processed_Data/data.file.path')\nobs_output = nc_open(paste0(data.file.path,'REANALYSIS_data/NCAR_zg_700_REANALYSIS.nc'))\n\ntime = ncvar_get(obs_output, varid = \"T\", start = c(1), count = c(-1))\n# NOTE: there are no leaps years in this data #\n\nlat = ncvar_get(obs_output, varid = \"Y\", start = c(1), count = c(-1))\nlon = ncvar_get(obs_output, varid = \"X\", start = c(1), count = c(-1))\n\n\n# formatting of Z is float zg[lon,lat,plev,time] \n\nstart_lat_east = which(lat >= EWD_boxes$lat.min[EWD_boxes$box == 'east'] & \n\t\t\t\t\t\t\t\t\t\t\t \tlat <= EWD_boxes$lat.max[EWD_boxes$box == 'east'])[1]\ncount_lat_east = sum(lat >= EWD_boxes$lat.min[EWD_boxes$box == 'east'] & \n\t\t\t\t\t\t\t\t\t\t \tlat <= EWD_boxes$lat.max[EWD_boxes$box == 'east'])[1]\n\nstart_lat_west = which(lat >= EWD_boxes$lat.min[EWD_boxes$box == 'west'] & \n\t\t\t\t\t\t\t\t\t\t\t \tlat <= EWD_boxes$lat.max[EWD_boxes$box == 'west'])[1]\ncount_lat_west = sum(lat >= EWD_boxes$lat.min[EWD_boxes$box == 'west'] & \n\t\t\t\t\t\t\t\t\t\t \tlat <= EWD_boxes$lat.max[EWD_boxes$box == 'west'])[1]\n\nstart_lon_east = which(lon >= EWD_boxes$lon.min[EWD_boxes$box == 'east'] & \n\t\t\t\t\t\t\t\t\t\t\t \tlon <= EWD_boxes$lon.max[EWD_boxes$box == 'east'])[1]\ncount_lon_east = sum(lon >= EWD_boxes$lon.min[EWD_boxes$box == 'east'] & \n\t\t\t\t\t\t\t\t\t\t \tlon <= EWD_boxes$lon.max[EWD_boxes$box == 'east'])[1]\n\nstart_lon_west = which(lon >= EWD_boxes$lon.min[EWD_boxes$box == 'west'] & \n\t\t\t\t\t\t\t\t\t\t\t \tlon <= EWD_boxes$lon.max[EWD_boxes$box == 'west'])[1]\ncount_lon_west = sum(lon >= EWD_boxes$lon.min[EWD_boxes$box == 'west'] & \n\t\t\t\t\t\t\t\t\t\t \tlon <= EWD_boxes$lon.max[EWD_boxes$box == 'west'])[1]\n\n# both boxes are 5 by 5 cells\n\nEWD_east_box = melt(ncvar_get(obs_output, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvarid = \"phi\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart = c(start_lon_east,start_lat_east,1,1), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount = c(count_lon_east,count_lat_east,1,length(time))))\n\nEWD_east_box = EWD_east_box %>% dplyr::group_by(Var3) %>%\n\tdplyr::summarise(east.box = mean(value))\n\nEWD_west_box = melt(ncvar_get(obs_output, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvarid = \"phi\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart = c(start_lon_west,start_lat_west,1,1), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount = c(count_lon_west,count_lat_west,1,length(time))))\n\nEWD_west_box = EWD_west_box %>% dplyr::group_by(Var3) %>%\n\tdplyr::summarise(west.box = mean(value))\n\n\nEWD = cbind(merge(EWD_east_box, EWD_west_box, by = \"Var3\"),time)\n\nEWD = EWD %>% dplyr::mutate(date = as.Date(time, origin = \"1948-01-01 00:00:00\"),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEWD = east.box - west.box,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tseason = GetSeasonDate(date)) %>%\n\tdplyr::select(date, EWD, season)\n\n\nEWD = EWD %>% dplyr::filter(date > \"1949-12-31\" &\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate < \"2006-01-01\"\t)\n\nsave(EWD, file = 'Processed_Data/EWD.RData')\n\n\n# now compute teh MHC index\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\n# Define temp region for MHC\nMHC_box = data.frame(lat.min = c(36),\n\t\t\t\t\t\t\t\t\t\t lat.max = c(42),\n\t\t\t\t\t\t\t\t\t\t lon.min = c(270),\n\t\t\t\t\t\t\t\t\t\t lon.max = c(282.5))\n\n\nsave(MHC_box, file = 'Processed_Data/MHC_box.RData')\n\n# load and process the ta data\nload(file = 'Processed_Data/data.file.path')\nlist_ta_files = list.files(path = paste0(data.file.path,'GCM_data/historic/ta/'))\n\nMHC_mod = data.frame()\n\nfor(m in 1:5){\n\tmmod = c(\"r1i\", \"r2i\", \"r3i\", \"r4i\", \"r5i\")\n\tmmod_files = list_ta_files[grep(list_ta_files, pattern = mmod[m])]\n\t\n\tfor(file_num in 1:length(mmod_files)){\n\t\tta_ncdf = nc_open(paste0(data.file.path,'/GCM_data/historic/ta/',mmod_files[file_num]))\n\t\t\n\t\t# extract time and lat/on from the file\n\t\tlon = ncvar_get(ta_ncdf, varid = \"lon\", start = c(1), count = c(-1))\n\t\tlat = ncvar_get(ta_ncdf, varid = \"lat\", start = c(1), count = c(-1))\n\t\tplev = ncvar_get(ta_ncdf, varid = \"plev\", start = c(1), count = c(-1))\n\t\ttime = ncvar_get(ta_ncdf, varid = \"time\", start = c(1), count = c(-1))\n\t\t\n\t\tlats_keep = lat[which(lat >= MHC_box$lat.min & \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat <= MHC_box$lat.max)]\n\t\t\n\t\tstart_lat = which(lat >= MHC_box$lat.min & \n\t\t\t\t\t\t\t\t\t\t\t\tlat <= MHC_box$lat.max)[1]\n\t\tcount_lat = sum(lat >= MHC_box$lat.min & \n\t\t\t\t\t\t\t\t\t\t\tlat <= MHC_box$lat.max)[1]\n\t\t\n\t\tstart_lon = which(lon >= MHC_box$lon.min & \n\t\t\t\t\t\t\t\t\t\t\t\tlon <= MHC_box$lon.max)[1]\n\t\tcount_lon = sum(lon >= MHC_box$lon.min & \n\t\t\t\t\t\t\t\t\t\t\tlon <= MHC_box$lon.max)[1]\n\t\t\n\t\t# ta[lon,lat,plev,time]\n\t\tT_700_mod = melt(ncvar_get(ta_ncdf, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t varid = \"ta\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t start = c(start_lon,start_lat,which(plev == 70000),1), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t count = c(count_lon,count_lat,1,length(time))))\n\t\t\n\n\t\tT_700_mod = T_700_mod %>% dplyr::mutate(lat = lats_keep[Var2])\n\t\t\n\t\tT_700_mod = T_700_mod %>% dplyr::group_by(Var3) %>%\n\t\t\tdplyr::summarise(T_700_mod = mean(value, na.rm = TRUE))\n\t\t\n\t\ttmp0 = cbind(T_700_mod,time) \n\t\t\n\t\tif(file_num == 1){tmp = tmp0}\n\t\t\n\t\tif(file_num > 1){tmp = rbind(tmp, tmp0)}\n\t\tprint(file_num)\n\t}\n\ttmp$model = m\n\t\n\tif(m == 1){MHC_mod = tmp}\n\tif(m > 1){MHC_mod = rbind(MHC_mod,tmp)}\t\n}\n\n# all years of the GCM data have 365 days (no leap years)\n# below we create the month and day of each of these no-leap year days\ndoy_no_leap = data.frame(month = month(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")),\n\t\t\t\t\t\t\t\t\t\t\t\t day = day(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")))\n\n# create a vector of dates for the GCM historic run\ndate = c(as.Date(paste0(rep(1950:2005, each = 365),\"-\",doy_no_leap$month,\"-\",doy_no_leap$day)))\n\nMHC_mod$date = rep(date,length(mmod))\n\nMHC_mod = MHC_mod %>% dplyr::mutate(season = GetSeasonDate(date)) %>%\n\tdplyr::select(date, model, T_700_mod, season)\n\n# get rid of very high and low values -- all \"strange\" values are in JJA, so this does not affect MAM\nMHC_mod$T_700_mod[MHC_mod$T_700_mod > 1000 | MHC_mod$T_700_mod < 10] = NA\n\n# define the MHC\nMHC_mod = MHC_mod %>% dplyr::mutate(MHC = 6.1 * exp((17.625 * (T_700_mod - 273.15)) / ((T_700_mod - 273.15) + 243.04))) %>%\n\tdplyr::group_by(season) %>%\n\tdplyr::mutate(MHC_clim = mean(MHC, na.rm = TRUE),\n\t\t\t\t\t\t\t\tMHC_anom = MHC - MHC_clim)\n\nsave(MHC_mod, file = 'Processed_Data/MHC_mod.RData')\n\n# now compute the MHC for the reanalysis\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\nload(file = 'Processed_Data/MHC_box.RData')\n\n# calculate MHC from the reananlysis\nload(file = 'Processed_Data/data.file.path')\nreanal_output = nc_open(paste0(data.file.path,'REANALYSIS_data/temp_700mb_REANALYSIS.nc'))\n\ntime = ncvar_get(reanal_output, varid = \"T\", start = c(1), count = c(-1))\nlat = ncvar_get(reanal_output, varid = \"Y\", start = c(1), count = c(-1))\nlon = ncvar_get(reanal_output, varid = \"X\", start = c(1), count = c(-1))\nplev = ncvar_get(reanal_output, varid = \"P\", start = c(1), count = c(-1))\n\nstart_lat = which(lat >= MHC_box$lat.min & \n\t\t\t\t\t\t\t\t\t\tlat <= MHC_box$lat.max)[1]\ncount_lat = sum(lat >= MHC_box$lat.min & \n\t\t\t\t\t\t\t\t\tlat <= MHC_box$lat.max)[1]\n\nlats_keep = lat[which(lat >= MHC_box$lat.min & \n\t\t\t\t\t\t\t\t\t\t\t\tlat <= MHC_box$lat.max)]\n\nstart_lon = which(lon >= MHC_box$lon.min & \n\t\t\t\t\t\t\t\t\t\tlon <= MHC_box$lon.max)[1]\ncount_lon = sum(lon >= MHC_box$lon.min & \n\t\t\t\t\t\t\t\t\tlon <= MHC_box$lon.max)[1]\n\nT_700 = melt(ncvar_get(reanal_output, \n\t\t\t\t\t\t\t\t\t\t\t varid = \"temp\", \n\t\t\t\t\t\t\t\t\t\t\t start = c(start_lon,start_lat,1,1), \n\t\t\t\t\t\t\t\t\t\t\t count = c(count_lon,count_lat,1,length(time))))\n\nT_700 = T_700 %>% dplyr::mutate(lat = lats_keep[Var2])\n\nT_700 = T_700 %>% dplyr::group_by(Var3) %>%\n\tdplyr::summarise(T_700 = mean(value))\n\nT_700 = cbind(T_700,time)\n\nMHC = T_700 %>% dplyr::mutate(date = as.Date(time, origin = \"1948-01-01 00:00:00\"),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tseason = GetSeasonDate(date)) %>%\n\tdplyr::select(date, T_700, season)\n\n# define the MHC\nMHC = MHC %>% dplyr::mutate(MHC = 6.1 * exp((17.625 * (T_700 - 273.15)) / ((T_700 - 273.15) + 243.04))) %>%\n\tdplyr::group_by(season) %>%\n\tdplyr::mutate(MHC_clim = mean(MHC, na.rm = TRUE),\n\t\t\t\t\t\t\t\tMHC_anom = MHC - MHC_clim)\n\n\nsave(MHC, file = 'Processed_Data/MHC.RData')\n\n\n\n# load the the RCP 8.5 data\n# start with the precipitation\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\n# load the precipitation box\nload(file = 'Processed_Data/pr_box.RData')\n\n\n# next let's load and evaluate the GCM precipitation data\n# 8.5\nload(file = 'Processed_Data/data.file.path')\nlist_pr_files = list.files(path = paste0(data.file.path,'GCM_data/future GFDL CM3 RCP 8.5/pr/'))\n\npr_mod = data.frame()\n\nfor(m in 1){\n\tmmod = c(\"r1i\")\n\tmmod_files = list_pr_files[grep(list_pr_files, pattern = mmod[m])]\n\t\n\tfor(file_num in 1:length(mmod_files)){\n\t\tpr_ncdf = nc_open(paste0(data.file.path,'GCM_data/future GFDL CM3 RCP 8.5/pr/',mmod_files[file_num]))\n\t\t\n\t\t# extract time and lat/on from the file\n\t\ttime = ncvar_get(pr_ncdf, varid = \"time\", start = c(1), count = c(-1))\n\t\tlat = ncvar_get(pr_ncdf, varid = \"lat\", start = c(1), count = c(-1))\n\t\tlon = ncvar_get(pr_ncdf, varid = \"lon\", start = c(1), count = c(-1))\n\t\t\n\t\tstart_lat = which(lat > pr_box$lat.min & lat < pr_box$lat.max)[1]\n\t\tcount_lat = sum(lat > pr_box$lat.min & lat < pr_box$lat.max)\n\t\t\n\t\tstart_lon = which(lon > pr_box$lon.min & lon < pr_box$lon.max)[1]\n\t\tcount_lon = sum(lon > pr_box$lon.min & lon < pr_box$lon.max)\n\t\t\n\t\t\n\t\ttmp0 = melt(ncvar_get(pr_ncdf, \n\t\t\t\t\t\t\t\t\t\t\t\t\tvarid = \"pr\", \n\t\t\t\t\t\t\t\t\t\t\t\t\tstart = c(start_lon,start_lat,1), \n\t\t\t\t\t\t\t\t\t\t\t\t\tcount = c(count_lon,count_lat,length(time))))\n\t\tif(file_num == 1){tmp = tmp0}\n\t\t\n\t\tif(file_num > 1){tmp = rbind(tmp, tmp0)}\n\t\tprint(file_num)\n\t}\n\ttmp$model = m\n\t\n\tif(m == 1){pr_mod = tmp}\n\tif(m > 1){pr_mod = rbind(pr_mod,tmp)}\t\n}\n\n# all years of the GCM data have 365 days (no leap years)\n# below we create the month and day of each of these no-leap year days\ndoy_no_leap = data.frame(month = month(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")),\n\t\t\t\t\t\t\t\t\t\t\t\t day = day(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")))\n\n# create a vector of dates for the GCM historic run\ndate = c(as.Date(paste0(rep(2006:2100, each = 365),\"-\",doy_no_leap$month,\"-\",doy_no_leap$day)))\n\n# how many GCM cells exist in the study region\nnum.cells = nrow(unique(pr_mod[,c(\"Var1\", \"Var2\")]))\n\n# replace the date, lon, and lat indices with actual values\npr_mod$date = rep(rep(date,each = num.cells),length(mmod))\npr_mod$lon = lon[which(lon > pr_box$lon.min & lon < pr_box$lon.max)][pr_mod$Var1]\npr_mod$lat = lat[which(lat > pr_box$lat.min & lat < pr_box$lat.max)][pr_mod$Var2]\n\npr_mod_future = pr_mod %>% dplyr::select(date,lon,lat,model,value)\nsave(pr_mod_future, file = 'Processed_Data/pr_mod_future.RData')\n\n\n\n# compute future RIPs -- using the historic ensemble mean of the 99th %-ile\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\n# get the historic 99th percentile threshold\nload(file = 'Processed_Data/pr_mod.RData')\n\nhistoric_thresh = pr_mod %>% dplyr::group_by(lat,lon,model) %>%\n\tdplyr::summarise(cut = quantile(value, probs = 0.99)) %>%\n\tdplyr::group_by(lat,lon) %>%\n\tdplyr::summarise(xtr_thresh = mean(cut))\n\nload(file = \"Processed_Data/RIP_threshold\")\n\nload(file = 'Processed_Data/pr_mod_future.RData')\nmod_RIP_future = merge(pr_mod_future, historic_thresh, by = c('lat', 'lon')) %>% \n\tdplyr::mutate(xtr = ifelse(value > xtr_thresh, 1, 0)) %>%\n\tdplyr::group_by(date,model) %>%\n\tdplyr::summarise(RIP = ifelse((sum(xtr)/length(xtr)) > RIP_threshold, 1, 0)) %>%\n\tdplyr::mutate(season = GetSeasonDate(date))\n\nsave(mod_RIP_future, file = 'Processed_Data/mod_RIP_future.RData')\n\n# now compute the future EWD and MHC indices\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\nload(file = 'Processed_Data/EWD_boxes.RData')\n\n# load and process the Z_700 data\nload(file = 'Processed_Data/data.file.path')\nlist_zg_files = list.files(path = paste0(data.file.path,'GCM_data/future GFDL CM3 RCP 8.5/zg/'))\n\nEWD_mod = data.frame()\n\nfor(m in 1:1){\n\tmmod = c(\"r1i\")\n\tmmod_files = list_zg_files[grep(list_zg_files, pattern = mmod[m])]\n\t\n\tfor(file_num in 1:length(mmod_files)){\n\t\tzg_ncdf = nc_open(paste0(data.file.path,'GCM_data/future GFDL CM3 RCP 8.5/zg/',mmod_files[file_num]))\n\t\t\n\t\t# extract time and lat/on from the file\n\t\ttime = ncvar_get(zg_ncdf, varid = \"time\", start = c(1), count = c(-1))\n\t\tlat = ncvar_get(zg_ncdf, varid = \"lat\", start = c(1), count = c(-1))\n\t\tlon = ncvar_get(zg_ncdf, varid = \"lon\", start = c(1), count = c(-1))\n\t\tlon[lon > 180] = lon[lon > 180] - 360\n\t\tplev = ncvar_get(zg_ncdf, varid = \"plev\", start = c(1), count = c(-1))\n\t\t\n\t\t\n\t\tstart_lat_east = which(lat >= EWD_boxes$lat.min[EWD_boxes$box == 'east'] & \n\t\t\t\t\t\t\t\t\t\t\t\t\t \tlat <= EWD_boxes$lat.max[EWD_boxes$box == 'east'])[1]\n\t\tcount_lat_east = sum(lat >= EWD_boxes$lat.min[EWD_boxes$box == 'east'] & \n\t\t\t\t\t\t\t\t\t\t\t\t \tlat <= EWD_boxes$lat.max[EWD_boxes$box == 'east'])[1]\n\t\t\n\t\tstart_lat_west = which(lat >= EWD_boxes$lat.min[EWD_boxes$box == 'west'] & \n\t\t\t\t\t\t\t\t\t\t\t\t\t \tlat <= EWD_boxes$lat.max[EWD_boxes$box == 'west'])[1]\n\t\tcount_lat_west = sum(lat >= EWD_boxes$lat.min[EWD_boxes$box == 'west'] & \n\t\t\t\t\t\t\t\t\t\t\t\t \tlat <= EWD_boxes$lat.max[EWD_boxes$box == 'west'])[1]\n\t\t\n\t\tstart_lon_east = which(lon >= EWD_boxes$lon.min[EWD_boxes$box == 'east'] & \n\t\t\t\t\t\t\t\t\t\t\t\t\t \tlon <= EWD_boxes$lon.max[EWD_boxes$box == 'east'])[1]\n\t\tcount_lon_east = sum(lon >= EWD_boxes$lon.min[EWD_boxes$box == 'east'] & \n\t\t\t\t\t\t\t\t\t\t\t\t \tlon <= EWD_boxes$lon.max[EWD_boxes$box == 'east'])[1]\n\t\t\n\t\tstart_lon_west = which(lon >= EWD_boxes$lon.min[EWD_boxes$box == 'west'] & \n\t\t\t\t\t\t\t\t\t\t\t\t\t \tlon <= EWD_boxes$lon.max[EWD_boxes$box == 'west'])[1]\n\t\tcount_lon_west = sum(lon >= EWD_boxes$lon.min[EWD_boxes$box == 'west'] & \n\t\t\t\t\t\t\t\t\t\t\t\t \tlon <= EWD_boxes$lon.max[EWD_boxes$box == 'west'])[1]\n\t\t\n\t\t\n\t\t# zg[lon,lat,plev,time]\n\t\tEWD_east_box = melt(ncvar_get(zg_ncdf, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvarid = \"zg\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart = c(start_lon_east,start_lat_east,which(plev == 70000),1), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount = c(count_lon_east,count_lat_east,1,length(time))))\n\t\t\n\t\tEWD_east_box = EWD_east_box %>% dplyr::group_by(Var3) %>%\n\t\t\tdplyr::summarise(east.box = mean(value))\n\t\t\n\t\tEWD_west_box = melt(ncvar_get(zg_ncdf, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvarid = \"zg\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart = c(start_lon_west,start_lat_west,which(plev == 70000),1), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount = c(count_lon_west,count_lat_west,1,length(time))))\n\t\t\n\t\tEWD_west_box = EWD_west_box %>% dplyr::group_by(Var3) %>%\n\t\t\tdplyr::summarise(west.box = mean(value))\n\t\t\n\t\ttmp0 = cbind(merge(EWD_east_box, EWD_west_box),time) %>% dplyr::select(east.box, west.box, time)\n\t\t\n\t\t\n\t\tif(file_num == 1){tmp = tmp0}\n\t\t\n\t\tif(file_num > 1){tmp = rbind(tmp, tmp0)}\n\t\tprint(file_num)\n\t}\n\ttmp$model = m\n\t\n\tif(m == 1){EWD_mod = tmp}\n\tif(m > 1){EWD_mod = rbind(EWD_mod,tmp)}\t\n}\n\n# all years of the GCM data have 365 days (no leap years)\n# below we create the month and day of each of these no-leap year days\ndoy_no_leap = data.frame(month = month(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")),\n\t\t\t\t\t\t\t\t\t\t\t\t day = day(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")))\n\n# create a vector of dates for the GCM historic run\ndate = c(as.Date(paste0(rep(2006:2100, each = 365),\"-\",doy_no_leap$month,\"-\",doy_no_leap$day)))\n\n# replace the date, lon, and lat indices with actual values\nEWD_mod$date = rep(date,length(mmod))\nEWD_mod = EWD_mod %>% dplyr::mutate(EWD = east.box - west.box)\n\nEWD_mod_future = EWD_mod %>% dplyr::mutate(season = GetSeasonDate(date)) %>%\n\tdplyr::select(date, model, EWD, season)\n\nsave(EWD_mod_future, file = 'Processed_Data/EWD_mod_future.RData')\n\n\n# now load the atmospheric temperatures\nrm(list = ls())\nsource(\"R/GetSeasonDate.R\")\n\n# Define temp region for MHC\nload(file = 'Processed_Data/MHC_box.RData')\n\n# load and process the ta data\nload(file = 'Processed_Data/data.file.path')\nlist_ta_files = list.files(path = paste0(data.file.path, 'GCM_data/future GFDL CM3 RCP 8.5/ta/'))\n\nMHC_mod = data.frame()\n\nfor(m in 1:1){\n\tmmod = c(\"r1i\")\n\tmmod_files = list_ta_files[grep(list_ta_files, pattern = mmod[m])]\n\t\n\tfor(file_num in 1:length(mmod_files)){\n\t\tta_ncdf = nc_open(paste0(data.file.path, 'GCM_data/future GFDL CM3 RCP 8.5/ta/',mmod_files[file_num]))\n\t\t\n\t\t# extract time and lat/on from the file\n\t\tlon = ncvar_get(ta_ncdf, varid = \"lon\", start = c(1), count = c(-1))\n\t\tlat = ncvar_get(ta_ncdf, varid = \"lat\", start = c(1), count = c(-1))\n\t\tplev = ncvar_get(ta_ncdf, varid = \"plev\", start = c(1), count = c(-1))\n\t\ttime = ncvar_get(ta_ncdf, varid = \"time\", start = c(1), count = c(-1))\n\t\t\n\t\tlats_keep = lat[which(lat >= MHC_box$lat.min & \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat <= MHC_box$lat.max)]\n\t\t\n\t\tstart_lat = which(lat >= MHC_box$lat.min & \n\t\t\t\t\t\t\t\t\t\t\t\tlat <= MHC_box$lat.max)[1]\n\t\tcount_lat = sum(lat >= MHC_box$lat.min & \n\t\t\t\t\t\t\t\t\t\t\tlat <= MHC_box$lat.max)[1]\n\t\t\n\t\tstart_lon = which(lon >= MHC_box$lon.min & \n\t\t\t\t\t\t\t\t\t\t\t\tlon <= MHC_box$lon.max)[1]\n\t\tcount_lon = sum(lon >= MHC_box$lon.min & \n\t\t\t\t\t\t\t\t\t\t\tlon <= MHC_box$lon.max)[1]\n\t\t\n\t\t# ta[lon,lat,plev,time]\n\t\tT_700_mod = melt(ncvar_get(ta_ncdf, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t varid = \"ta\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t start = c(start_lon,start_lat,which(plev == 70000),1), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t count = c(count_lon,count_lat,1,length(time))))\n\t\t\n\t\tT_700_mod = T_700_mod %>% dplyr::mutate(lat = lats_keep[Var2])\n\t\t\n\t\tT_700_mod = T_700_mod %>% dplyr::group_by(Var3) %>%\n\t\t\tdplyr::summarise(T_700_mod = mean(value, na.rm = TRUE))\n\t\t\n\t\ttmp0 = cbind(T_700_mod,time) \n\t\t\n\t\tif(file_num == 1){tmp = tmp0}\n\t\t\n\t\tif(file_num > 1){tmp = rbind(tmp, tmp0)}\n\t\tprint(file_num)\n\t}\n\ttmp$model = m\n\t\n\tif(m == 1){MHC_mod = tmp}\n\tif(m > 1){MHC_mod = rbind(MHC_mod,tmp)}\t\n}\n\n# all years of the GCM data have 365 days (no leap years)\n# below we create the month and day of each of these no-leap year days\ndoy_no_leap = data.frame(month = month(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")),\n\t\t\t\t\t\t\t\t\t\t\t\t day = day(seq.Date(from = as.Date(\"1999-01-01\"), to = as.Date(\"1999-12-31\"), by = \"1 day\")))\n\n# create a vector of dates for the GCM historic run\ndate = c(as.Date(paste0(rep(2006:2100, each = 365),\"-\",doy_no_leap$month,\"-\",doy_no_leap$day)))\n\nMHC_mod$date = rep(date,length(mmod))\n\nMHC_mod = MHC_mod %>% dplyr::mutate(season = GetSeasonDate(date)) %>%\n\tdplyr::select(date, model, T_700_mod, season)\n\n# get rid of very high and low values -- they are present during JJA, so it doesn't matter for MAM\nMHC_mod$T_700_mod[MHC_mod$T_700_mod > 1000 | MHC_mod$T_700_mod < 10] = NA\n\n# define the MHC\nMHC_mod_future = MHC_mod %>% dplyr::mutate(MHC = 6.1 * exp((17.625 * (T_700_mod - 273.15)) / ((T_700_mod - 273.15) + 243.04)))\n\n# need to load the historic climatology to calculate the anomaly\nload(file = \"Processed_Data/MHC_mod.RData\")\n\nMHC_clim = MHC_mod %>% dplyr::group_by(season) %>%\n\tdplyr::summarise(MHC_clim = unique(MHC_clim))\n\nMHC_mod_future = merge(MHC_mod_future, MHC_clim, by = \"season\") %>%\n\tdplyr::mutate(MHC_anom = MHC - MHC_clim)\n\nsave(MHC_mod_future, file = 'Processed_Data/MHC_mod_future.RData')\n\n",
    "created" : 1497363387021.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1867459965",
    "id" : "9DB8E8C",
    "lastKnownWriteTime" : 1497389921,
    "last_content_update" : 1497389921379,
    "path" : "~/Google Drive/ORB_Paper/ORB_1_LoadProcessSaveData.R",
    "project_path" : "ORB_1_LoadProcessSaveData.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}